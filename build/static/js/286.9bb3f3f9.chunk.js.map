{"version":3,"file":"static/js/286.9bb3f3f9.chunk.js","mappings":"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","sources":["components/Freestyle/exercises/grammar/PossessivesExercise.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { loadPossessivesData } from '../../../../utils/exerciseDataService';\r\nimport FeedbackDisplay from '../../FeedbackDisplay';\r\nimport ExerciseControls from '../../ExerciseControls';\r\nimport { useLatinizationContext } from '../../../../contexts/LatinizationContext';\r\nimport useLatinization from '../../../../hooks/useLatinization';\r\nimport { normalizeString } from '../../../../utils/stringUtils';\r\nimport { useProgress } from '../../../../contexts/ProgressContext';\r\nimport { useI18n } from '../../../../i18n/I18nContext';\r\n\r\nconst PossessivesExercise = ({ language, days, exerciseKey }) => {\r\n  const [currentExercise, setCurrentExercise] = useState(null);\r\n  const [userInput, setUserInput] = useState('');\r\n  const [feedback, setFeedback] = useState({ message: '', type: '' });\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [isRevealed, setIsRevealed] = useState(false);\r\n  const [exerciseData, setExerciseData] = useState([]);\r\n\r\n  const { isLatinized } = useLatinizationContext();\r\n  const getLatinizedText = useLatinization();\r\n  const progress = useProgress();\r\n  const { t } = useI18n();\r\n\r\n  const pickNewExercise = useCallback((data) => {\r\n    if (data && data.length > 0) {\r\n      const randomIndex = Math.floor(Math.random() * data.length);\r\n      setCurrentExercise(data[randomIndex]);\r\n      setUserInput('');\r\n      setFeedback({ message: '', type: '' });\r\n      setIsRevealed(false);\r\n      setError(null);\r\n    } else {\r\n      setError(t('exercises.noPossessivesFound', 'No possessives exercises found for the selected criteria.'));\r\n      setCurrentExercise(null);\r\n    }\r\n    setIsLoading(false);\r\n  }, [t]);\r\n\r\n  const fetchAndSetNewExercise = useCallback(async () => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    try {\r\n      const { data, error: fetchError } = await loadPossessivesData(language, days);\r\n      if (fetchError) {\r\n        throw new Error(fetchError.message || fetchError.error || t('errors.failedLoadPossessives'));\r\n      }\r\n      // Data for possessives is expected to be an array of items for the given day(s)\r\n      // loadPossessivesData already handles filtering by day.\r\n      setExerciseData(data || []); \r\n      pickNewExercise(data || []);\r\n    } catch (err) {\r\n      console.error(\"PossessivesExercise - Error fetching exercises:\", err);\r\n      setError(err.message || t('errors.unexpectedError'));\r\n      setIsLoading(false);\r\n      setCurrentExercise(null);\r\n    }\r\n  }, [language, days, pickNewExercise, t]);\r\n\r\n  useEffect(() => {\r\n    if (language && days && days.length > 0) {\r\n      fetchAndSetNewExercise();\r\n    } else {\r\n      setIsLoading(false);\r\n      setError(t('errors.selectLangDay'));\r\n      setCurrentExercise(null);\r\n    }\r\n  }, [fetchAndSetNewExercise, exerciseKey, language, days, t]);\r\n\r\n  const handleInputChange = (e) => {\r\n    setUserInput(e.target.value);\r\n    if (feedback.message) setFeedback({ message: '', type: '' });\r\n  };\r\n\r\n  const checkAnswer = () => {\r\n    if (!currentExercise || isRevealed) return;\r\n\r\n    const correctAnswer = currentExercise.answer;\r\n    const normalizedUserInput = normalizeString(userInput);\r\n    const normalizedCorrectAnswer = normalizeString(correctAnswer);\r\n    \r\n    const displayAnswer = isLatinized ? getLatinizedText(correctAnswer, language) : correctAnswer;\r\n    const itemId = `possessive_${normalizeString(currentExercise.sentence.split(\" \")[0])}_${normalizeString(correctAnswer)}`;\r\n\r\n    if (normalizedUserInput === normalizedCorrectAnswer) {\r\n      setFeedback({ message: t('feedback.correct'), type: 'correct' });\r\n      progress.awardCorrectAnswer(itemId, 'grammar-possessive');\r\n    } else {\r\n      setFeedback({ message: t('feedback.incorrectAnswerIs', { correctAnswer: displayAnswer }), type: 'incorrect' });\r\n      progress.awardIncorrectAnswer(itemId, 'grammar-possessive');\r\n    }\r\n  };\r\n\r\n  const showHint = () => {\r\n    if (!currentExercise || isRevealed) return;\r\n    // Basic hint: show the first letter of the answer\r\n    const firstLetter = currentExercise.answer[0];\r\n    const latinizedFirstLetter = getLatinizedText(firstLetter, language);\r\n    setFeedback({ message: t('feedback.hintFirstLetterIs', { letter: latinizedFirstLetter }), type: 'hint' });\r\n  };\r\n\r\n  const revealTheAnswer = () => {\r\n    if (!currentExercise) return;\r\n    const correctAnswer = currentExercise.answer;\r\n    const displayAnswer = isLatinized ? getLatinizedText(correctAnswer, language) : correctAnswer;\r\n    const itemId = `possessive_${normalizeString(currentExercise.sentence.split(\" \")[0])}_${normalizeString(correctAnswer)}`;\r\n\r\n    setUserInput(correctAnswer); // Show the full answer in the input\r\n    setFeedback({ message: t('feedback.correctAnswerIs', { correctAnswer: displayAnswer }), type: 'info' });\r\n    setIsRevealed(true);\r\n    progress.scheduleReview(itemId, 'grammar-possessive', false);\r\n  };\r\n\r\n  const handleNext = () => {\r\n    setIsLoading(true);\r\n    pickNewExercise(exerciseData);\r\n  };\r\n\r\n  if (isLoading) {\r\n    return <p>{t('loading.possessivesExercise', 'Loading possessives exercise...')}</p>;\r\n  }\r\n\r\n  if (error) {\r\n    return <FeedbackDisplay message={error} type=\"error\" />;\r\n  }\r\n\r\n  if (!currentExercise) {\r\n    return <FeedbackDisplay message={t('exercises.noPossessivesLoaded', 'No possessive exercise loaded. Try different selections or check data.')} type=\"info\" />;\r\n  }\r\n\r\n  // Display logic for \"fill_blank\" type\r\n  let sentenceParts = [];\r\n  let placeholder = \"____\"; // Default placeholder\r\n  if (currentExercise.sentence.includes('____')) {\r\n    sentenceParts = currentExercise.sentence.split('____');\r\n  } else if (currentExercise.sentence.includes('_')) { // Allow single underscore as placeholder\r\n    sentenceParts = currentExercise.sentence.split('_');\r\n    placeholder = \"_\";\r\n  } else {\r\n    sentenceParts = [currentExercise.sentence, \"\"]; // No placeholder found, input after sentence\r\n  }\r\n\r\n\r\n  return (\r\n    <div style={{ textAlign: 'center', padding: '20px', border: '1px solid #eee', borderRadius: '8px', maxWidth: '600px', margin: 'auto' }}>\r\n      <h3>{t('titles.fillThePossessive', 'Fill in the Correct Possessive')}</h3>\r\n      <p style={{ fontSize: '1.1rem', margin: '15px 0' }}>\r\n        {getLatinizedText(sentenceParts[0], language)}\r\n        <input\r\n          type=\"text\"\r\n          value={userInput}\r\n          onChange={handleInputChange}\r\n          placeholder={placeholder}\r\n          disabled={isRevealed || isLoading}\r\n          style={{ \r\n            padding: '8px', \r\n            fontSize: '1rem', \r\n            width: `${Math.max(currentExercise.answer.length * 10, 60)}px`, // Dynamic width\r\n            minWidth: '60px',\r\n            maxWidth: '150px',\r\n            margin: '0 5px', \r\n            border: '1px solid #ccc', \r\n            borderRadius: '4px',\r\n            textAlign: 'center'\r\n          }}\r\n        />\r\n        {getLatinizedText(sentenceParts[1] || '', language)}\r\n      </p>\r\n      \r\n      <FeedbackDisplay message={feedback.message} type={feedback.type} language={language} />\r\n      <ExerciseControls\r\n        onCheckAnswer={!isRevealed && !!currentExercise ? checkAnswer : undefined}\r\n        onShowHint={!isRevealed && !!currentExercise ? showHint : undefined}\r\n        onRevealAnswer={!isRevealed && !!currentExercise ? revealTheAnswer : undefined}\r\n        onNextExercise={handleNext}\r\n        config={{\r\n          showCheck: !isRevealed && !!currentExercise,\r\n          showHint: !isRevealed && !!currentExercise,\r\n          showReveal: !isRevealed && !!currentExercise,\r\n          showNext: true,\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PossessivesExercise;\r\n"],"names":["_ref","language","days","exerciseKey","currentExercise","setCurrentExercise","useState","userInput","setUserInput","feedback","setFeedback","message","type","isLoading","setIsLoading","error","setError","isRevealed","setIsRevealed","exerciseData","setExerciseData","isLatinized","useLatinizationContext","getLatinizedText","useLatinization","progress","useProgress","t","useI18n","pickNewExercise","useCallback","data","length","randomIndex","Math","floor","random","fetchAndSetNewExercise","async","fetchError","loadPossessivesData","Error","err","console","useEffect","_jsx","children","FeedbackDisplay","sentenceParts","placeholder","sentence","includes","split","_jsxs","style","textAlign","padding","border","borderRadius","maxWidth","margin","fontSize","value","onChange","e","target","disabled","width","concat","max","answer","minWidth","ExerciseControls","onCheckAnswer","checkAnswer","correctAnswer","normalizedUserInput","normalizeString","normalizedCorrectAnswer","displayAnswer","itemId","awardCorrectAnswer","awardIncorrectAnswer","undefined","onShowHint","showHint","firstLetter","latinizedFirstLetter","letter","onRevealAnswer","revealTheAnswer","scheduleReview","onNextExercise","handleNext","config","showCheck","showReveal","showNext"],"sourceRoot":""}