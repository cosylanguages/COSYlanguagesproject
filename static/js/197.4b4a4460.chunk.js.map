{"version":3,"file":"static/js/197.4b4a4460.chunk.js","mappings":"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","sources":["components/Freestyle/exercises/grammar/VerbFormTranslation.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useI18n } from '../../../../i18n/I18nContext';\nimport { normalizeString } from '../../../../utils/stringUtils';\nimport useLatinization from '../../../../hooks/useLatinization';\n\nconst VerbFormTranslation = ({\n  verb, // The full verb object from processConjugationData\n  tenseName, // e.g., \"présent\"\n  pronoun, // e.g., \"je\"\n  conjugatedForm, // e.g., \"vais\" (the correct answer if translating from English, or part of prompt if to English)\n  translationDirection, // 'toEnglish' or 'fromEnglish'\n  language,\n  onCheckAnswer, // Callback to be triggered by parent's ExerciseControls\n  onSetFeedback, // Callback to set feedback in parent\n  isRevealedExternally, // If parent initiated reveal\n  onSetCorrect // Callback to inform parent if answer is correct\n}) => {\n  const { t } = useI18n();\n  const getLatinizedText = useLatinization();\n  const [userInput, setUserInput] = useState('');\n  const [isAnswered, setIsAnswered] = useState(false);\n\n  const infinitiveTranslation = verb.translation_en; // e.g., \"to go\"\n  const targetLanguageForm = conjugatedForm; // e.g., \"vais\"\n\n  let questionPrompt = '';\n  // let correctAnswerNormalized = ''; // Removed as per no-unused-vars\n\n  if (translationDirection === 'toEnglish') {\n    // User sees \"je vais\" (for example), needs to type \"to go\"\n    questionPrompt = t('translate.formToEnglishPrompt', `Translate \"{pronoun} {form}\" to English (infinitive):`, {\n      pronoun: getLatinizedText(pronoun, language),\n      form: getLatinizedText(conjugatedForm, language),\n    });\n    // correctAnswerNormalized = normalizeString(infinitiveTranslation); // Removed\n  } else { // fromEnglish\n    // User sees \"to go\", \"je\", \"présent\", needs to type \"vais\"\n    questionPrompt = t('translate.englishToFormPrompt', `What is the form of \"{translation}\" for \"{pronoun}\" in the {tenseName} tense?`, {\n      translation: infinitiveTranslation,\n      pronoun: getLatinizedText(pronoun, language),\n      tenseName: getLatinizedText(tenseName, language),\n    });\n    // correctAnswerNormalized = normalizeString(targetLanguageForm); // Removed\n  }\n\n  useEffect(() => {\n    setUserInput('');\n    setIsAnswered(false);\n    if (onSetFeedback) onSetFeedback({message: '', type: ''});\n  }, [verb, tenseName, pronoun, translationDirection, onSetFeedback]);\n\n  useEffect(() => {\n    if (isRevealedExternally && !isAnswered) {\n      const answerToShow = translationDirection === 'toEnglish' ? infinitiveTranslation : targetLanguageForm.split('/')[0];\n      setUserInput(answerToShow);\n      setIsAnswered(true);\n      if (onSetCorrect) onSetCorrect(true); // Consider revealed as correct for control flow\n      if (onSetFeedback) {\n        onSetFeedback({\n          message: t('feedback.answerIs', 'The answer is: {answer}', { answer: answerToShow }),\n          type: 'info',\n        });\n      }\n    }\n  }, [isRevealedExternally, isAnswered, translationDirection, infinitiveTranslation, targetLanguageForm, onSetCorrect, onSetFeedback, t]);\n\n\n  const handleInputChange = (e) => {\n    setUserInput(e.target.value);\n    if (isAnswered) setIsAnswered(false); // Allow re-checking if user changes input after an attempt\n    if (onSetFeedback) onSetFeedback({message: '', type: ''});\n    if (onSetCorrect) onSetCorrect(false);\n  };\n\n  const checkSingleAnswer = React.useCallback(() => {\n    if (isAnswered && userInput !== '') return; // Don't re-check if already answered correctly, unless input is cleared\n\n    const normalizedInput = normalizeString(userInput);\n    let isCorrect = false;\n\n    if (translationDirection === 'toEnglish') {\n        // infinitiveTranslation might have multiple possibilities separated by \"/\"\n        isCorrect = infinitiveTranslation.split('/').map(s => normalizeString(s)).includes(normalizedInput);\n    } else { // fromEnglish\n        // targetLanguageForm might have multiple possibilities separated by \"/\"\n        isCorrect = targetLanguageForm.split('/').map(s => normalizeString(s)).includes(normalizedInput);\n    }\n\n    if (isCorrect) {\n      if (onSetFeedback) onSetFeedback({ message: t('feedback.correct', 'Correct!'), type: 'correct' });\n      if (onSetCorrect) onSetCorrect(true);\n      setIsAnswered(true);\n    } else {\n      const actualCorrectAnswer = translationDirection === 'toEnglish'\n        ? infinitiveTranslation.split('/')[0] // Show the first option\n        : targetLanguageForm.split('/')[0];  // Show the first option\n      if (onSetFeedback) onSetFeedback({\n        message: t('feedback.incorrectAnswerIs', `Incorrect. The correct answer is: {correctAnswer}`, {correctAnswer: actualCorrectAnswer}),\n        type: 'incorrect'\n      });\n      if (onSetCorrect) onSetCorrect(false);\n      setIsAnswered(false); // Allow user to try again\n    }\n    return isCorrect;\n  }, [\n    isAnswered, userInput, translationDirection, infinitiveTranslation,\n    targetLanguageForm, onSetFeedback, t, onSetCorrect, setIsAnswered\n  ]);\n\n  // Expose checkSingleAnswer to parent via onCheckAnswer ref\n  useEffect(() => {\n    if (onCheckAnswer) {\n      onCheckAnswer.current = checkSingleAnswer;\n    }\n  }, [onCheckAnswer, checkSingleAnswer]);\n\n\n  return (\n    <div style={{ margin: '20px 0', padding: '15px', border: '1px solid #e0e0e0', borderRadius: '5px' }}>\n      <p style={{ fontWeight: 'bold', marginBottom: '10px' }}>{getLatinizedText(verb.infinitive, language)}</p>\n      <p style={{ marginBottom: '15px' }}>{questionPrompt}</p>\n      <input\n        type=\"text\"\n        value={userInput}\n        onChange={handleInputChange}\n        disabled={isAnswered && userInput !== '' && !isRevealedExternally} // Disable if correctly answered, unless revealed\n        placeholder={t('placeholders.typeTranslation', \"Type your answer\")}\n        style={{\n          padding: '10px',\n          fontSize: '1rem',\n          width: 'clamp(200px, 80%, 300px)', // Responsive width\n          border: '1px solid #ccc',\n          borderRadius: '4px',\n          boxSizing: 'border-box'\n        }}\n        aria-label={t('ariaLabels.translationInput', \"Translation input\")}\n      />\n    </div>\n  );\n};\n\nexport default VerbFormTranslation;\n"],"names":["_ref","verb","tenseName","pronoun","conjugatedForm","translationDirection","language","onCheckAnswer","onSetFeedback","isRevealedExternally","onSetCorrect","t","useI18n","getLatinizedText","useLatinization","userInput","setUserInput","useState","isAnswered","setIsAnswered","infinitiveTranslation","translation_en","targetLanguageForm","questionPrompt","form","translation","useEffect","message","type","answerToShow","split","answer","checkSingleAnswer","React","normalizedInput","normalizeString","isCorrect","map","s","includes","actualCorrectAnswer","correctAnswer","current","_jsxs","style","margin","padding","border","borderRadius","children","_jsx","fontWeight","marginBottom","infinitive","value","onChange","e","target","disabled","placeholder","fontSize","width","boxSizing"],"sourceRoot":""}