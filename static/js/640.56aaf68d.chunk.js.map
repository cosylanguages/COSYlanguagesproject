{"version":3,"file":"static/js/640.56aaf68d.chunk.js","mappings":"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","sources":["utils/speechUtils.js","components/Freestyle/ExerciseControls.js","components/Freestyle/FeedbackDisplay.js","utils/arrayUtils.js","utils/stringUtils.js","components/Freestyle/exercises/vocabulary/MatchOppositesExercise.js","components/Freestyle/exercises/vocabulary/RandomWordPracticeHost.js","components/Freestyle/exercises/vocabulary/ShowWordExercise.js","components/Freestyle/exercises/vocabulary/TypeOppositeExercise.js","components/Freestyle/exercises/vocabulary/BuildWordExercise.js","utils/exerciseDataService.js"],"sourcesContent":["/**\n * Maps COSYlanguage identifiers to BCP 47 language codes for the Web Speech API.\n * @param {string} cosyLanguage - The COSYlanguage identifier (e.g., \"COSYenglish\").\n * @returns {string} The BCP 47 language code (e.g., \"en-US\").\n */\nexport function mapLanguageToSpeechCode(cosyLanguage) {\n  let speechCode;\n  let isFallback = false;\n  const langStr = String(cosyLanguage || '');\n\n  switch(langStr) {\n    case 'COSYenglish': speechCode = 'en-US'; break;\n    case 'COSYfrançais': speechCode = 'fr-FR'; break;\n    case 'COSYespañol': speechCode = 'es-ES'; break;\n    case 'COSYitaliano': speechCode = 'it-IT'; break;\n    case 'COSYdeutsch': speechCode = 'de-DE'; break;\n    case 'COSYportuguês': speechCode = 'pt-PT'; break;\n    case 'ΚΟΖΥελληνικά': speechCode = 'el-GR'; break;\n    case 'ТАКОЙрусский': speechCode = 'ru-RU'; break;\n    case 'ԾՈՍՅհայկական': speechCode = 'hy-AM'; break;\n    case 'COSYbrezhoneg': speechCode = 'fr-FR'; isFallback = true; break;\n    case 'COSYtatarça': speechCode = 'ru-RU'; isFallback = true; break;\n    case 'COSYbashkort': speechCode = 'ru-RU'; isFallback = true; break;\n    default:\n      console.warn(`SpeechUtils: Unknown COSYlanguage \"${langStr}\". Defaulting to en-US.`);\n      speechCode = 'en-US';\n      isFallback = true;\n      break;\n  }\n  if (isFallback && langStr !== '') {\n    console.warn(`SpeechUtils: No direct speech synthesis voice for ${cosyLanguage}. Using fallback ${speechCode}.`);\n  }\n  return speechCode;\n}\n\n/**\n * Pronounces a given text using the Web Speech API.\n * @param {string} text - The text to pronounce.\n * @param {string} cosyLanguage - The COSYlanguage identifier for the text's language.\n * @returns {Promise<void>} A promise that resolves when speaking starts or rejects on error.\n */\nexport const pronounceText = (text, cosyLanguage) => {\n  return new Promise((resolve, reject) => {\n    if (typeof window === 'undefined' || !window.speechSynthesis) {\n      console.error('SpeechUtils: Speech Synthesis not supported by this browser.');\n      reject(new Error('Speech Synthesis not supported'));\n      return;\n    }\n\n    if (!text || String(text).trim() === '') {\n      console.warn('PronounceText: No text provided.');\n      resolve();\n      return;\n    }\n\n    const speechLang = mapLanguageToSpeechCode(cosyLanguage);\n    const utterance = new SpeechSynthesisUtterance(String(text).trim());\n    utterance.lang = speechLang;\n\n    window.speechSynthesis.cancel();\n\n    utterance.onstart = () => {\n      console.log(`SpeechUtils: Speaking \"${text}\" in ${cosyLanguage} (mapped to ${speechLang})`);\n      resolve();\n    };\n\n    utterance.onerror = (event) => {\n      console.error('SpeechUtils: SpeechSynthesisUtterance.onerror - Error speaking:', event.error, 'for text:', text, 'lang:', speechLang);\n      reject(event.error instanceof Error ? event.error : new Error(String(event.error || 'Unknown speech error')));\n    };\n\n    window.speechSynthesis.speak(utterance);\n  });\n};\n\n/**\n * Attempts to unlock audio playback in the browser.\n * This should be called after a user interaction if speech synthesis is not working.\n */\nexport const unlockAudioPlayback = () => {\n  if (typeof window !== 'undefined' && typeof Audio !== 'undefined') {\n    try {\n      const silentAudio = new Audio(\"data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA\");\n      silentAudio.volume = 0;\n      const playPromise = silentAudio.play();\n\n      if (playPromise !== undefined) {\n        playPromise.then(_ => {\n          console.log(\"SpeechUtils: Audio playback likely unlocked.\");\n        }).catch(error => {\n          console.warn(\"SpeechUtils: Audio unlock failed (this is common, user interaction might be needed for audio):\", error);\n        });\n      }\n    } catch (e) {\n      console.error(\"SpeechUtils: Error trying to unlock audio:\", e);\n    }\n  }\n};\n\nconsole.log('[SpeechUtils] Service loaded with TTS and language mapping.');\n","import React from 'react';\nimport { useI18n } from '../../i18n/I18nContext';\nimport Button from '../Common/Button'; // Import Button\nimport './ExerciseControls.css';\n\nconst ExerciseControls = ({\n  onCheckAnswer,\n  onRevealAnswer,\n  onShowHint,\n  onRandomize,\n  onNextExercise,\n  config = {},\n  isAnswerCorrect = false,\n  isRevealed = false,\n  customButton = null\n}) => {\n  const { t } = useI18n();\n\n  const {\n    showCheck = !!onCheckAnswer,\n    checkButtonText = t('buttons.check', '✔️ Check'),\n    showReveal = !!onRevealAnswer,\n    revealButtonText = t('buttons.revealAnswer', '🤫 Reveal Answer'),\n    showHint = !!onShowHint,\n    hintButtonText = t('buttons.help', '💡 Hint'),\n    showRandomize = !!onRandomize,\n    randomizeButtonText = t('buttons.randomize', '🎲 Randomize'),\n    showNext = !!onNextExercise,\n    nextButtonText = t('buttons.next', '➡️ Next Exercise'),\n  } = config;\n\n  const canInteract = !isAnswerCorrect && !isRevealed;\n\n  return (\n    <div className=\"exercise-action-buttons\">\n      {showHint && onShowHint && (\n        <Button\n          onClick={onShowHint}\n          disabled={!canInteract}\n          className=\"btn-warning\"\n        >\n          {hintButtonText}\n        </Button>\n      )}\n      {showRandomize && onRandomize && (\n        <Button\n          onClick={onRandomize}\n          disabled={!canInteract && !showNext}\n          className=\"btn-secondary\"\n        >\n          {randomizeButtonText}\n        </Button>\n      )}\n      {showCheck && onCheckAnswer && (\n        <Button\n          onClick={onCheckAnswer}\n          disabled={!canInteract}\n          className=\"btn-success\"\n        >\n          {checkButtonText}\n        </Button>\n      )}\n      {showReveal && onRevealAnswer && (\n        <Button\n          onClick={onRevealAnswer}\n          disabled={!canInteract}\n          className=\"btn-info\"\n        >\n          {revealButtonText}\n        </Button>\n      )}\n      {customButton}\n      {showNext && onNextExercise && (\n        <Button\n          onClick={onNextExercise}\n          className=\"btn-primary\"\n        >\n          {nextButtonText}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default ExerciseControls;\n","import React from 'react';\r\nimport { useLatinizationContext } from '../../contexts/LatinizationContext';\r\nimport useLatinization from '../../hooks/useLatinization';\r\n\r\n/**\r\n * Displays feedback messages for exercises.\r\n * Props:\r\n * - message: string or React node - The feedback message.\r\n * - type: string (e.g., 'correct', 'incorrect', 'hint', 'info', 'error') - Determines styling.\r\n * - language: string (optional) - The language of the feedback message, for latinization.\r\n */\r\nconst FeedbackDisplay = ({ message, type, language }) => {\r\n  // Call the useLatinization hook unconditionally at the top level.\r\n  // Pass an empty string if message is not a string to prevent errors in the hook.\r\n  // The hook itself is expected to use LatinizationContext to determine if latinization is active.\r\n  const latinizedVersion = useLatinization(typeof message === 'string' ? message : '', language);\r\n\r\n  // Determine the actual message to display.\r\n  // If the original message was not a string, or no language was provided, use the original message.\r\n  // Otherwise, use the output from useLatinization (which respects the isLatinized context).\r\n  const processedMessage = (typeof message === 'string' && language)\r\n    ? latinizedVersion\r\n    : message;\r\n\r\n  // Get isLatinized from context, primarily for UI adjustments like font style,\r\n  // not for deciding whether to call useLatinization.\r\n  const { isLatinized } = useLatinizationContext();\r\n\r\n  if (!message) {\r\n    return <div style={{ minHeight: '24px', margin: '10px 0' }} aria-live=\"polite\"></div>; // Reserve space\r\n  }\r\n\r\n  let style = {\r\n    padding: '15px',\n    margin: '10px 0',\r\n    borderRadius: '8px',\n    textAlign: 'center',\r\n    minHeight: '24px', // Ensure it doesn't collapse when empty\r\n    fontWeight: 'bold',\n    animation: 'fadeIn 0.5s ease-in-out'\n  };\r\n\n  if (type === 'correct') {\n    style.animation = 'correct-answer-animation 0.5s ease-in-out';\n  }\n\r\n  let textPrefix = '';\r\n\r\n  switch (type) {\r\n    case 'correct':\r\n      style.backgroundColor = 'var(--color-success-bg)';\n      style.color = 'var(--color-success-text)';\n      style.borderColor = 'var(--color-success-border)';\n      textPrefix = '🎉 ';\n      break;\r\n    case 'incorrect':\r\n      style.backgroundColor = 'var(--color-danger-bg)';\n      style.color = 'var(--color-danger-text)';\n      style.borderColor = 'var(--color-danger-border)';\n      textPrefix = '🤔 ';\n      break;\r\n    case 'hint':\r\n      style.backgroundColor = 'var(--color-warning-bg)';\n      style.color = 'var(--color-warning-text)';\n      style.borderColor = 'var(--color-warning-border)';\n      textPrefix = '💡 ';\r\n      break;\r\n    case 'info':\r\n      style.backgroundColor = 'var(--color-info-bg)';\n      style.color = 'var(--color-info-text)';\n      style.borderColor = 'var(--color-info-border)';\n      textPrefix = 'ℹ️ ';\r\n      break;\r\n    case 'error':\r\n      style.backgroundColor = 'var(--color-danger-bg)'; // Same as incorrect\n      style.color = 'var(--color-danger-text)';\n      style.borderColor = 'var(--color-danger-border)';\n      textPrefix = '⚠️ ';\r\n      break;\r\n    default: // Neutral / no specific type\r\n      style.backgroundColor = 'var(--color-surface-medium)';\n      style.color = 'var(--color-text-primary)';\n      style.borderColor = 'var(--color-border)';\n  }\r\n  \r\n  // Apply visual indication for latinized text if necessary\r\n  if (isLatinized && typeof processedMessage === 'string' && typeof message === 'string' && processedMessage !== message) {\r\n    style.fontStyle = 'italic'; \r\n    // style.fontFamily = 'Arial, sans-serif'; // Example alternative font\r\n  }\r\n\r\n  return (\r\n    <div style={style} role=\"alert\" aria-live=\"assertive\">\r\n      {textPrefix}{processedMessage}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FeedbackDisplay;\r\n","/**\n * Shuffles an array in place and returns a new shuffled array.\n * This is a pure function that does not modify the original array.\n * @param {Array} array - The array to shuffle.\n * @returns {Array} A new array with the elements randomly shuffled.\n */\nexport function shuffleArray(array) {\n  const newArray = [...array];\n  for (let i = newArray.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [newArray[i], newArray[j]] = [newArray[j], newArray[i]];\n  }\n  return newArray;\n}\n\n/**\n * Selects a random item from an array of items, where each item has a weight.\n * @param {Array<{item: any, weight: number}>} itemsWithWeights - An array of objects,\n * each with an 'item' and its 'weight'.\n * @returns {any|null} The selected item, or null if the input is invalid or empty.\n */\nexport function getWeightedRandomItem(itemsWithWeights) {\n  if (!itemsWithWeights || itemsWithWeights.length === 0) {\n    return null;\n  }\n\n  const totalWeight = itemsWithWeights.reduce((sum, entry) => sum + (entry.weight || 0), 0);\n  if (totalWeight <= 0) {\n    // If the total weight is 0 or less, fall back to a uniform random selection.\n    const originalItems = itemsWithWeights.map(iw => iw.item);\n    return originalItems.length > 0 ? originalItems[Math.floor(Math.random() * originalItems.length)] : null;\n  }\n\n  let randomValue = Math.random() * totalWeight;\n  for (let i = 0; i < itemsWithWeights.length; i++) {\n    if (randomValue < (itemsWithWeights[i].weight || 0)) {\n      return itemsWithWeights[i].item;\n    }\n    randomValue -= (itemsWithWeights[i].weight || 0);\n  }\n\n  // Fallback in case of rounding errors or other unexpected scenarios.\n  const originalItems = itemsWithWeights.map(iw => iw.item);\n  return originalItems.length > 0 ? originalItems[Math.floor(Math.random() * originalItems.length)] : null;\n}\n","/**\n * Normalizes a string by converting it to lowercase, removing diacritics, and standardizing apostrophes.\n * @param {string} str - The string to normalize.\n * @returns {string} The normalized string.\n */\nexport function normalizeString(str) {\n  if (str === null || str === undefined) {\n    return '';\n  }\n  let normalized = String(str).normalize('NFD').replace(/[\\u0300-\\u036f]/g, '').toLowerCase();\n  normalized = normalized.replace(/[’‘ʼ]/g, \"'\");\n  return normalized;\n}\n\n/**\n * Capitalizes the first letter of a word.\n * @param {string} word - The word to capitalize.\n * @param {boolean} [forceLowerCaseRest=true] - Whether to convert the rest of the word to lowercase.\n * @param {string} [lang='COSYenglish'] - The language of the word.\n * @returns {string} The capitalized word.\n */\nexport function capitalizeWord(word, forceLowerCaseRest = true, lang = 'COSYenglish') {\n  if (typeof word !== 'string' || word.length === 0) {\n    return word;\n  }\n  if (lang === 'COSYenglish' && word.toLowerCase() === 'i') {\n    return 'I';\n  }\n  const firstLetter = word.charAt(0).toUpperCase();\n  const rest = forceLowerCaseRest ? word.slice(1).toLowerCase() : word.slice(1);\n  return firstLetter + rest;\n}\n\n/**\n * Escapes special characters in a string for use in a regular expression.\n * @param {string} string - The string to escape.\n * @returns {string} The escaped string.\n */\nexport function escapeRegExp(string) {\n  if (typeof string !== 'string') return '';\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n","import React, { useState, useEffect, useCallback, useRef } from 'react';\r\nimport { loadOppositesData } from '../../../../utils/exerciseDataService';\r\nimport FeedbackDisplay from '../../FeedbackDisplay';\r\nimport ExerciseControls from '../../ExerciseControls';\r\nimport { useLatinizationContext } from '../../../../contexts/LatinizationContext';\r\nimport useLatinization from '../../../../hooks/useLatinization';\r\nimport { shuffleArray } from '../../../../utils/arrayUtils';\r\nimport { normalizeString } from '../../../../utils/stringUtils';\r\n\r\nconst MatchOppositesExercise = ({ language, days, exerciseKey }) => {\r\n  const [pairs, setPairs] = useState([]);\r\n  const [wordsColumn, setWordsColumn] = useState([]);\r\n  const [oppositesColumn, setOppositesColumn] = useState([]);\r\n  const [selectedWord, setSelectedWord] = useState(null); // { value: string, element: HTMLElement }\r\n  const [selectedOpposite, setSelectedOpposite] = useState(null); // { value: string, element: HTMLElement }\r\n  const [matchedItems, setMatchedItems] = useState({}); // { [itemValue]: true }\r\n  const [feedback, setFeedback] = useState({ message: '', type: '' });\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [numCorrectMatches, setNumCorrectMatches] = useState(0);\r\n  const [isRevealed, setIsRevealed] = useState(false);\r\n  const [lines, setLines] = useState([]); // For drawing lines between matched items\r\n\r\n  // const { isLatinized } = useLatinizationContext(); // This instance of isLatinized is unused.\r\n  useLatinizationContext(); // Called to satisfy rules-of-hooks, assuming other context values might be used later or were used before.\r\n  const getLatinizedText = useLatinization;\r\n\r\n  const itemRefs = useRef({}); // To store refs for each matchable item\r\n  const columnsContainerRef = useRef(null); // Ref for the div containing both columns\r\n\r\n  const NUM_PAIRS_TO_DISPLAY = 4;\r\n\r\n  const setupExercise = useCallback(async () => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    setFeedback({ message: '', type: '' });\r\n    setSelectedWord(null);\r\n    setSelectedOpposite(null);\r\n    setMatchedItems({});\r\n    setNumCorrectMatches(0);\r\n    setIsRevealed(false);\r\n    setLines([]); // Clear lines\r\n    itemRefs.current = {}; // Clear old refs\r\n\r\n    try {\r\n      const { data: oppositesMap, error: fetchError } = await loadOppositesData(language, days);\r\n      if (fetchError) {\r\n        throw new Error(fetchError.message || fetchError.error || 'Failed to load opposites data.');\r\n      }\r\n\r\n      if (!oppositesMap || Object.keys(oppositesMap).length < NUM_PAIRS_TO_DISPLAY / 2) {\r\n        setError(`Not enough opposites data (found ${Object.keys(oppositesMap).length}) for this exercise. Need at least ${NUM_PAIRS_TO_DISPLAY / 2} base pairs.`);\r\n        setPairs([]);\r\n        setIsLoading(false);\r\n        return;\r\n      }\r\n\r\n      const allPossiblePairs = Object.entries(oppositesMap).map(([word, opposite]) => ({ word, opposite }));\r\n      const shuffledPossiblePairs = shuffleArray(allPossiblePairs);\r\n      const selectedPairs = shuffledPossiblePairs.slice(0, NUM_PAIRS_TO_DISPLAY);\r\n\r\n      if (selectedPairs.length < 1) {\r\n        setError('Could not select enough unique pairs for the exercise.');\r\n        setPairs([]);\r\n        setIsLoading(false);\r\n        return;\r\n      }\r\n\r\n      setPairs(selectedPairs);\r\n      setWordsColumn(shuffleArray(selectedPairs.map(p => p.word)));\r\n      setOppositesColumn(shuffleArray(selectedPairs.map(p => p.opposite)));\r\n\r\n    } catch (err) {\r\n      console.error(\"MatchOppositesExercise - Error setting up exercise:\", err);\r\n      setError(err.message || 'An unexpected error occurred.');\r\n      setPairs([]);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [language, days]);\r\n\r\n  useEffect(() => {\r\n    if (language && days && days.length > 0) {\r\n      setupExercise();\r\n    } else {\r\n      setIsLoading(false);\r\n      setError(\"Please select a language and day(s).\");\r\n    }\r\n  }, [setupExercise, exerciseKey, language, days]);\r\n\r\n  const handleItemClick = (itemValue, type, event) => {\r\n    if (matchedItems[itemValue] || isRevealed) return;\r\n\r\n    const currentSelection = { value: itemValue, element: event.target };\r\n\r\n    if (type === 'word') {\r\n      if (selectedWord && selectedWord.element === event.target) {\r\n        setSelectedWord(null); // Deselect if clicking the same selected item\r\n        // event.target.classList.remove('selected'); // classList managed by style logic\r\n        return;\r\n      }\r\n      // if(selectedWord && selectedWord.element) selectedWord.element.classList.remove('selected');\r\n      setSelectedWord(currentSelection);\r\n      // event.target.classList.add('selected');\r\n    } else if (type === 'opposite') {\r\n      if (selectedOpposite && selectedOpposite.element === event.target) {\r\n        setSelectedOpposite(null); // Deselect\r\n        // event.target.classList.remove('selected');\r\n        return;\r\n      }\r\n      // if(selectedOpposite && selectedOpposite.element) selectedOpposite.element.classList.remove('selected');\r\n      setSelectedOpposite(currentSelection);\r\n      // event.target.classList.add('selected');\r\n    }\r\n  };\r\n\r\n  const drawLine = useCallback((el1, el2) => {\r\n    if (!el1 || !el2 || !columnsContainerRef.current) return;\r\n\r\n    const containerRect = columnsContainerRef.current.getBoundingClientRect();\r\n    const rect1 = el1.getBoundingClientRect();\r\n    const rect2 = el2.getBoundingClientRect();\r\n\r\n    const x1 = rect1.left + rect1.width / 2 - containerRect.left + columnsContainerRef.current.scrollLeft;\r\n    const y1 = rect1.top + rect1.height / 2 - containerRect.top + columnsContainerRef.current.scrollTop;\r\n    const x2 = rect2.left + rect2.width / 2 - containerRect.left + columnsContainerRef.current.scrollLeft;\r\n    const y2 = rect2.top + rect2.height / 2 - containerRect.top + columnsContainerRef.current.scrollTop;\r\n    \r\n    const lineKey = `line-${normalizeString(el1.textContent)}-${normalizeString(el2.textContent)}`;\r\n    setLines(prevLines => [...prevLines, { x1, y1, x2, y2, key: lineKey }]);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedWord && selectedOpposite) {\r\n      const currentWordValue = selectedWord.value;\r\n      const currentOppositeValue = selectedOpposite.value;\r\n      const isCorrectMatch = pairs.some(pair =>\r\n        (pair.word === currentWordValue && pair.opposite === currentOppositeValue)\r\n      );\r\n      // const itemId = `matchopposite_${normalizeString(currentWordValue)}_${normalizeString(currentOppositeValue)}`; // ESLint: 'itemId' is assigned a value but never used.\r\n\r\n      if (isCorrectMatch) {\r\n        setFeedback({ message: 'Correct Match!', type: 'correct' });\r\n        setMatchedItems(prev => ({ ...prev, [currentWordValue]: true, [currentOppositeValue]: true }));\r\n        \r\n        if (selectedWord.element && selectedOpposite.element) {\r\n          drawLine(selectedWord.element, selectedOpposite.element);\r\n        }\r\n        \r\n        setNumCorrectMatches(prev => prev + 1);\r\n        \r\n        setSelectedWord(null); // Clear selections immediately after correct match\r\n        setSelectedOpposite(null);\r\n\r\n      } else {\r\n        setFeedback({ message: 'Incorrect Match. Try again.', type: 'incorrect' });\r\n        \r\n        // Visual feedback for incorrect (e.g., flash border red)\r\n        if(selectedWord.element) selectedWord.element.classList.add('incorrect-flash');\r\n        if(selectedOpposite.element) selectedOpposite.element.classList.add('incorrect-flash');\r\n        \r\n        setTimeout(() => {\r\n            if(selectedWord && selectedWord.element) selectedWord.element.classList.remove('incorrect-flash');\r\n            if(selectedOpposite && selectedOpposite.element) selectedOpposite.element.classList.remove('incorrect-flash');\r\n            setSelectedWord(null);\r\n            setSelectedOpposite(null);\r\n        }, 1000);\r\n      }\r\n    }\r\n  }, [selectedWord, selectedOpposite, pairs, drawLine]);\r\n\r\n  useEffect(() => {\r\n    if (pairs.length > 0 && numCorrectMatches === pairs.length && !isRevealed) {\r\n      setFeedback({ message: 'All pairs matched! Well done!', type: 'success' });\r\n    }\r\n  }, [numCorrectMatches, pairs.length, isRevealed]);\r\n\r\n  const showHint = () => {\r\n    if (isRevealed || numCorrectMatches === pairs.length) return;\r\n    const unMatchedPairs = pairs.filter(p => !matchedItems[p.word] && !matchedItems[p.opposite]);\r\n    if (unMatchedPairs.length > 0) {\r\n      const hintPair = unMatchedPairs[0];\r\n      setFeedback({ message: `Hint: Try matching \"${getLatinizedText(hintPair.word, language)}\" or \"${getLatinizedText(hintPair.opposite, language)}\".`, type: 'hint' });\r\n    } else {\r\n      setFeedback({ message: \"No more hints available.\", type: 'info' });\r\n    }\r\n  };\r\n\r\n  const revealAllAnswers = () => {\r\n    setIsRevealed(true);\r\n    const allCurrentlyMatched = {};\r\n    const linesForRevealed = []; \r\n    pairs.forEach(pair => {\r\n      allCurrentlyMatched[pair.word] = true;\r\n      allCurrentlyMatched[pair.opposite] = true;\r\n\r\n      const el1 = itemRefs.current[`word-${pair.word}`];\r\n      const el2 = itemRefs.current[`opposite-${pair.opposite}`];\r\n      if (el1 && el2 && columnsContainerRef.current) {\r\n        const containerRect = columnsContainerRef.current.getBoundingClientRect();\r\n        const rect1 = el1.getBoundingClientRect();\r\n        const rect2 = el2.getBoundingClientRect();\r\n        const x1 = rect1.left + rect1.width / 2 - containerRect.left + columnsContainerRef.current.scrollLeft;\r\n        const y1 = rect1.top + rect1.height / 2 - containerRect.top + columnsContainerRef.current.scrollTop;\r\n        const x2 = rect2.left + rect2.width / 2 - containerRect.left + columnsContainerRef.current.scrollLeft;\r\n        const y2 = rect2.top + rect2.height / 2 - containerRect.top + columnsContainerRef.current.scrollTop;\r\n        linesForRevealed.push({ x1, y1, x2, y2, key: `line-${normalizeString(pair.word)}-${normalizeString(pair.opposite)}` });\r\n      }\r\n    });\r\n    setMatchedItems(allCurrentlyMatched);\r\n    setLines(linesForRevealed); // Use the new variable here\r\n    setNumCorrectMatches(pairs.length);\r\n    setFeedback({ message: \"All pairs revealed.\", type: 'info' });\r\n  };\r\n\r\n  if (isLoading) return <p>Loading matching exercise...</p>;\r\n  if (error) return <FeedbackDisplay message={error} type=\"error\" />;\r\n  if (pairs.length === 0 && !isLoading) return <FeedbackDisplay message=\"No pairs available for this exercise.\" type=\"info\" />;\r\n\r\n  const columnStyle = { display: 'flex', flexDirection: 'column', gap: '8px', alignItems: 'center', margin: '0 15px', flex: 1 };\r\n  const itemStyle = (value, type) => {\r\n    let base = {\r\n      padding: '12px 18px',\r\n      border: '2px solid #ddd',\r\n      borderRadius: '8px',\r\n      cursor: 'pointer',\r\n      minWidth: '150px',\r\n      textAlign: 'center',\r\n      backgroundColor: '#fff',\r\n      transition: 'background-color 0.2s, border-color 0.2s, transform 0.1s',\r\n      boxShadow: '0 1px 3px rgba(0,0,0,0.05)',\r\n    };\r\n    if (matchedItems[value]) {\r\n      base.backgroundColor = '#e6ffed';\r\n      base.borderColor = '#b7eac9';\r\n      base.cursor = 'default';\r\n      base.fontWeight = 'bold';\r\n    } else if ((type === 'word' && selectedWord?.value === value) || (type === 'opposite' && selectedOpposite?.value === value)) {\r\n      base.backgroundColor = '#e0efff';\r\n      base.borderColor = '#90caf9';\r\n      base.transform = 'scale(1.03)';\r\n    }\r\n    return base;\r\n  };\r\n\r\n  return (\r\n    <div style={{ textAlign: 'center', padding: '20px', border: '1px solid #eee', borderRadius: '8px', maxWidth: '600px', margin: 'auto' }}>\r\n      <h3>Match the Opposites</h3>\r\n      <div \r\n        ref={columnsContainerRef} \r\n        style={{ display: 'flex', justifyContent: 'center', margin: '20px 0', position: 'relative' }}\r\n      >\r\n        <svg \r\n          style={{ \r\n            position: 'absolute', top: 0, left: 0, \r\n            width: '100%', height: '100%', \r\n            pointerEvents: 'none', zIndex: 0 \r\n          }}\r\n        >\r\n          {lines.map(line => (\r\n            <line \r\n              key={line.key} \r\n              x1={line.x1} y1={line.y1} \r\n              x2={line.x2} y2={line.y2} \r\n              stroke=\"#28a745\" strokeWidth=\"3\" opacity=\"0.7\"\r\n            />\r\n          ))}\r\n        </svg>\r\n        <div style={{...columnStyle, zIndex: 1}}> {/* Ensure columns are above SVG lines */}\r\n          <h4>Words</h4>\r\n          {wordsColumn.map(word => (\r\n            <button\r\n              key={`word-${word}`}\r\n              ref={el => itemRefs.current[`word-${word}`] = el}\r\n              style={itemStyle(word, 'word')}\r\n              onClick={(e) => handleItemClick(word, 'word', e)}\r\n              disabled={matchedItems[word] || isRevealed}\r\n              className={ (selectedWord?.value === word && !matchedItems[word]) ? 'selected-match-item' : '' }\r\n            >\r\n              {getLatinizedText(word, language)}\r\n            </button>\r\n          ))}\r\n        </div>\r\n        <div style={{...columnStyle, zIndex: 1}}>\r\n          <h4>Opposites</h4>\r\n          {oppositesColumn.map(opposite => (\r\n            <button\r\n              key={`opp-${opposite}`}\r\n              ref={el => itemRefs.current[`opposite-${opposite}`] = el}\r\n              style={itemStyle(opposite, 'opposite')}\r\n              onClick={(e) => handleItemClick(opposite, 'opposite', e)}\r\n              disabled={matchedItems[opposite] || isRevealed}\r\n              className={ (selectedOpposite?.value === opposite && !matchedItems[opposite]) ? 'selected-match-item' : '' }\r\n            >\r\n              {getLatinizedText(opposite, language)}\r\n            </button>\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <FeedbackDisplay message={feedback.message} type={feedback.type} language={language} />\r\n      <ExerciseControls\r\n        onShowHint={!isRevealed && numCorrectMatches < pairs.length ? showHint : undefined}\r\n        onRevealAnswer={!isRevealed && numCorrectMatches < pairs.length ? revealAllAnswers : undefined}\r\n        onNextExercise={setupExercise}\r\n        config={{\r\n          showCheck: false,\r\n          showHint: !isRevealed && numCorrectMatches < pairs.length && pairs.length > 0,\r\n          showReveal: !isRevealed && numCorrectMatches < pairs.length && pairs.length > 0,\r\n          showNext: true,\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MatchOppositesExercise;\r\n","// @ts-check\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useI18n } from '../../../../i18n/I18nContext';\n\n// Import the specific exercise components this host will manage\nimport ShowWordExercise from './ShowWordExercise';\nimport TypeOppositeExercise from './TypeOppositeExercise';\nimport MatchOppositesExercise from './MatchOppositesExercise';\nimport BuildWordExercise from './BuildWordExercise';\n\nconst managedExerciseComponents = [\n  { key: 'show_word', Component: ShowWordExercise, name: 'Show Word' },\n  { key: 'type_opposite', Component: TypeOppositeExercise, name: 'Type Opposite' },\n  { key: 'match_opposites', Component: MatchOppositesExercise, name: 'Match Opposites' },\n  { key: 'build_word', Component: BuildWordExercise, name: 'Build Word' },\n];\n\nconst RandomWordPracticeHost = ({ language, days, exerciseKey: hostKey }) => {\n  const { t } = useI18n();\n  const [CurrentExercise, setCurrentExercise] = useState(null);\n  const [currentExerciseInfo, setCurrentExerciseInfo] = useState(null);\n  const [subExerciseKey, setSubExerciseKey] = useState(0);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const selectAndLoadRandomExercise = useCallback(() => {\n    setIsLoading(true);\n    const randomIndex = Math.floor(Math.random() * managedExerciseComponents.length);\n    const selected = managedExerciseComponents[randomIndex];\n    \n    console.log(`RandomWordPracticeHost: Selecting exercise type: ${selected.name}`);\n    setCurrentExerciseInfo(selected);\n    setCurrentExercise(() => selected.Component); // Store the component constructor\n    setSubExerciseKey(prev => prev + 1);\n    setIsLoading(false);\n  }, []); // No dependencies needed here as it's meant to be called to reset\n\n  useEffect(() => {\n    // This effect runs when the hostKey (passed from ExerciseHost) changes,\n    // or on initial mount. It signifies a new \"session\" for this host.\n    console.log(`RandomWordPracticeHost: hostKey changed to ${hostKey}, selecting new initial exercise.`);\n    selectAndLoadRandomExercise();\n  }, [hostKey, selectAndLoadRandomExercise]); // selectAndLoadRandomExercise is stable\n\n  const handleSubExerciseComplete = useCallback(() => {\n    console.log(`RandomWordPracticeHost: Sub-exercise ${currentExerciseInfo?.name} completed. Selecting next one.`);\n    // After a sub-exercise completes, load another random one.\n    // Adding a small delay for smoother transition if needed, e.g. after success message.\n    setTimeout(() => {\n      selectAndLoadRandomExercise();\n    }, 500); // 0.5s delay\n  }, [selectAndLoadRandomExercise, currentExerciseInfo]);\n\n  if (isLoading || !CurrentExercise) {\n    return <p>{t('loading.randomWordExercise', 'Loading Random Word Exercise...')}</p>;\n  }\n\n  return (\n    <div className=\"random-word-practice-host-container cosy-exercise-container\">\n      {/* Optional: Display the type of current random word exercise for debugging or clarity */}\n      {/* <p style={{ textAlign: 'center', fontStyle: 'italic', fontSize: '0.9em' }}>\n        Current mode: {currentExerciseInfo?.name || 'N/A'}\n      </p> */}\n      <CurrentExercise\n        language={language}\n        days={days}\n        exerciseKey={subExerciseKey} // Use subExerciseKey to re-mount/reset the specific exercise\n        onComplete={handleSubExerciseComplete} // Pass the completion handler\n        // Note: Ensure all managed exercises accept and call onComplete when they are finished.\n        // MatchOppositesExercise already does. Others might need this prop added.\n      />\n    </div>\n  );\n};\n\nexport default RandomWordPracticeHost;\n","import React, { useState, useEffect, useCallback } from 'react';\r\nimport { loadVocabularyData } from '../../../../utils/exerciseDataService';\r\nimport { useLatinizationContext } from '../../../../contexts/LatinizationContext';\r\nimport useLatinization from '../../../../hooks/useLatinization';\r\nimport { pronounceText, unlockAudioPlayback } from '../../../../utils/speechUtils';\r\nimport ExerciseControls from '../../ExerciseControls'; \r\nimport FeedbackDisplay from '../../FeedbackDisplay';\r\nimport { useI18n } from '../../../../i18n/I18nContext';\r\nimport TransliterableText from '../../../Common/TransliterableText';\r\n\r\n\r\nconst ShowWordExercise = ({ language, days, exerciseKey, onComplete }) => { // Added onComplete prop\r\n  const [currentWord, setCurrentWord] = useState('');\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const { isLatinized } = useLatinizationContext();\r\n  const { t, language: i18nLanguage } = useI18n();\r\n\r\n  const latinizedWord = useLatinization(currentWord, language);\r\n\r\n  useEffect(() => {\r\n    unlockAudioPlayback(); \r\n  }, []);\r\n\r\n  const fetchAndSetNewWord = useCallback(async () => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    setCurrentWord(''); \r\n\r\n    try {\r\n      const { data: words, error: fetchError } = await loadVocabularyData(language, days);\r\n      if (fetchError) {\r\n        throw new Error(fetchError.message || fetchError.error || 'Failed to load vocabulary words.');\r\n      }\r\n      if (words && words.length > 0) {\r\n        const randomIndex = Math.floor(Math.random() * words.length);\r\n        setCurrentWord(words[randomIndex]);\r\n      } else {\r\n        setError(t('exercises.noVocabWords', 'No vocabulary words found for the selected criteria.'));\r\n      }\r\n    } catch (err) {\r\n      console.error(\"ShowWordExercise - Error fetching word:\", err);\r\n      setError(err.message || t('errors.unexpectedError', 'An unexpected error occurred.'));\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [language, days, t]); \r\n\r\n  useEffect(() => {\r\n    if (language && days && days.length > 0) { \r\n        fetchAndSetNewWord();\r\n    } else {\r\n        setIsLoading(false);\r\n        setError(t('errors.selectLangDay', \"Please select a language and day(s).\"));\r\n        setCurrentWord('');\r\n    }\r\n  }, [fetchAndSetNewWord, exerciseKey, language, days, t]);\r\n\r\n  const handlePronounce = async () => {\r\n    if (currentWord && language) {\r\n      try {\r\n        await pronounceText(currentWord, language);\r\n      } catch (speechError) {\r\n        console.error(\"Error pronouncing word:\", speechError);\r\n        setError(t('errors.pronunciationError', \"Could not pronounce the word. Please ensure your browser supports speech synthesis and audio is enabled.\"));\r\n      }\r\n    }\r\n  };\r\n  \r\n  const handleNext = () => {\r\n    if (onComplete) {\r\n      onComplete();\r\n    } else {\r\n      // Fallback if onComplete is not provided (e.g. when used standalone, though not intended for hosts)\r\n      fetchAndSetNewWord(); \r\n    }\r\n  };\r\n\r\n  const wordStyle = (isLatinized && currentWord !== latinizedWord) ? { fontFamily: 'Arial, sans-serif', fontStyle: 'italic' } : {};\r\n\r\n  if (isLoading) {\r\n    return <p><TransliterableText text={t('loading.wordExercise', 'Loading word...')} langOverride={i18nLanguage} /></p>;\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n        <>\r\n            <FeedbackDisplay message={error} type=\"error\" language={i18nLanguage} />\r\n            {/* Still provide controls to try fetching a new word or allow host to move on */}\r\n            <ExerciseControls \r\n              onRandomize={handleNext} // Or fetchAndSetNewWord if preferred for standalone randomize\r\n              onNextExercise={handleNext}\r\n              config={{\r\n                showNext: true,\r\n                showCheck: false,\r\n                showHint: false,\r\n                showReveal: false,\r\n                showRandomize: true, \r\n              }}\r\n            />\r\n        </>\r\n    );\r\n  }\r\n\r\n  if (!currentWord && !isLoading) { \r\n    return (\r\n        <>\r\n            <FeedbackDisplay message={t('exercises.noWordToDisplay', \"No word to display. Try different selections or check data.\")} type=\"info\" language={i18nLanguage} />\r\n             <ExerciseControls \r\n              onRandomize={handleNext}\r\n              onNextExercise={handleNext}\r\n              config={{\r\n                showNext: true,\r\n                showCheck: false,\r\n                showHint: false,\r\n                showReveal: false,\r\n                showRandomize: true, \r\n              }}\r\n            />\r\n        </>\r\n    );\r\n  }\r\n  \r\n  return (\r\n    <div style={{ textAlign: 'center', padding: '20px', border: '1px solid #eee', borderRadius: '8px' }}>\r\n      <h3><TransliterableText text={t('titles.randomWord', 'Random Word')} langOverride={i18nLanguage} /></h3>\r\n      {currentWord && ( \r\n        <>\r\n          <div\r\n            style={{ fontSize: '2.5rem', margin: '20px 0', padding: '10px', ...wordStyle }}\r\n            aria-label={`Word to practice: ${currentWord}`}\r\n          >\r\n            {latinizedWord || currentWord}\r\n          </div>\r\n          <div style={{ marginTop: '20px', display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center', gap: '15px' }}>\r\n            <button onClick={handlePronounce} className=\"action-button\" disabled={!currentWord}>\r\n              🔊 <TransliterableText text={t('buttons.pronounce', 'Pronounce')} langOverride={i18nLanguage} />\r\n            </button>\r\n            <ExerciseControls \r\n              onRandomize={handleNext} // Changed from fetchAndSetNewWord to handleNext\r\n              onNextExercise={handleNext} // Changed from fetchAndSetNewWord to handleNext\r\n              config={{\r\n                showNext: true,\r\n                showCheck: false,\r\n                showHint: false,\r\n                showReveal: false,\r\n                showRandomize: true, \r\n              }}\r\n            />\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ShowWordExercise;\r\n","import React, { useState, useEffect, useCallback } from 'react';\r\nimport { loadOppositesData, loadVocabularyData } from '../../../../utils/exerciseDataService'; \r\nimport { useLatinizationContext } from '../../../../contexts/LatinizationContext';\r\nimport useLatinization from '../../../../hooks/useLatinization';\r\nimport { pronounceText } from '../../../../utils/speechUtils';\r\nimport FeedbackDisplay from '../../FeedbackDisplay';\r\nimport ExerciseControls from '../../ExerciseControls';\r\nimport { shuffleArray } from '../../../../utils/arrayUtils';\r\nimport { useI18n } from '../../../../i18n/I18nContext';\r\nimport TransliterableText from '../../../Common/TransliterableText'; // For title\r\nimport './TypeOppositeExercise.css'; // Will create/update this CSS\r\n\r\nconst NUM_TOTAL_OPTIONS = 4; // 1 correct, 3 distractors\r\n\r\nconst TypeOppositeExercise = ({ language, days, exerciseKey, onComplete }) => {\r\n  const [targetDisplayWord, setTargetDisplayWord] = useState(''); // The word for which opposite is asked\r\n  const [correctOptionText, setCorrectOptionText] = useState(''); // The actual correct opposite text\r\n  const [displayOptions, setDisplayOptions] = useState([]); // { id: string, text: string, isCorrect: boolean, status: 'unselected'|'correct'|'incorrect' }\r\n  \r\n  const [feedback, setFeedback] = useState({ message: '', type: '' });\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [isAnswered, setIsAnswered] = useState(false);\r\n\r\n  const { isLatinized } = useLatinizationContext();\r\n  const getLatinizedText = useLatinization;\r\n  const { t, language: i18nLanguage } = useI18n();\r\n\r\n  const fetchAndPrepareExercise = useCallback(async () => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    setFeedback({ message: '', type: '' });\r\n    setTargetDisplayWord('');\r\n    setCorrectOptionText('');\r\n    setDisplayOptions([]);\r\n    setIsAnswered(false);\r\n\r\n    try {\r\n      const { data: oppositesMap, error: oppositesError } = await loadOppositesData(language, days);\r\n      if (oppositesError || !oppositesMap || Object.keys(oppositesMap).length === 0) {\r\n        setError(t('exercises.noOppositesData', 'No opposites data found for the selected criteria.'));\r\n        setIsLoading(false);\r\n        return;\r\n      }\r\n\r\n      const wordsWithDefinedOpposites = Object.keys(oppositesMap);\r\n      if (wordsWithDefinedOpposites.length === 0) {\r\n        setError(t('exercises.noWordsWithOpposites', 'No words with opposites found.'));\r\n        setIsLoading(false);\r\n        return;\r\n      }\r\n\r\n      const randomWordKey = wordsWithDefinedOpposites[Math.floor(Math.random() * wordsWithDefinedOpposites.length)];\r\n      const currentWord = randomWordKey;\r\n      const actualCorrectOpposite = oppositesMap[currentWord];\r\n\r\n      setTargetDisplayWord(currentWord);\r\n      setCorrectOptionText(actualCorrectOpposite);\r\n\r\n      // Fetch general vocabulary for distractors\r\n      const { data: allVocab, error: vocabError } = await loadVocabularyData(language, days);\r\n      let potentialDistractorsPool = [];\r\n      if (!vocabError && allVocab) {\r\n        potentialDistractorsPool = allVocab.map(item => typeof item === 'string' ? item : item.word).filter(Boolean);\r\n      } else { // Fallback to keys/values from oppositesMap if general vocab fails\r\n        potentialDistractorsPool = [...new Set([...wordsWithDefinedOpposites, ...Object.values(oppositesMap)])];\r\n      }\r\n      \r\n      potentialDistractorsPool = potentialDistractorsPool.filter(\r\n        word => word !== currentWord && word !== actualCorrectOpposite\r\n      );\r\n      shuffleArray(potentialDistractorsPool);\r\n      const distractors = potentialDistractorsPool.slice(0, NUM_TOTAL_OPTIONS - 1);\r\n      \r\n      const options = [{ text: actualCorrectOpposite, id: `opt_correct_${actualCorrectOpposite}`, isCorrect: true, status: 'unselected' }];\r\n      distractors.forEach((dText, i) => {\r\n        options.push({ text: dText, id: `opt_distractor_${dText}_${i}`, isCorrect: false, status: 'unselected' });\r\n      });\r\n\r\n      // Ensure we have NUM_TOTAL_OPTIONS, if not, it's an issue with data pool size.\r\n      if (options.length < 2 && NUM_TOTAL_OPTIONS > 1) { // Need at least one distractor for MCQ\r\n         setError(t('exercises.notEnoughOptionsForMCQ', 'Not enough distinct words to create multiple choice options.'));\r\n         setIsLoading(false);\r\n         return;\r\n      }\r\n      \r\n      setDisplayOptions(shuffleArray(options));\r\n\r\n    } catch (err) {\r\n      console.error(\"TypeOppositeExercise (MCQ) - Error setting up:\", err);\r\n      setError(err.message || t('errors.unexpectedError', 'An unexpected error occurred.'));\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [language, days, t]);\r\n\r\n  useEffect(() => {\r\n    if (language && days && days.length > 0) {\r\n      fetchAndPrepareExercise();\r\n    } else {\r\n      setIsLoading(false);\r\n      setError(t('errors.selectLangDay', \"Please select a language and day(s).\"));\r\n    }\r\n  }, [fetchAndPrepareExercise, exerciseKey, language, days, t]);\r\n\r\n  const handleOptionClick = (selectedOption) => {\r\n    if (isAnswered || isLoading) return;\r\n    setIsAnswered(true);\r\n\r\n    if (selectedOption.isCorrect) {\r\n      setFeedback({ message: t('feedback.correct', 'Correct!'), type: 'correct' });\r\n      setDisplayOptions(prevOpts => prevOpts.map(opt => \r\n        opt.id === selectedOption.id ? { ...opt, status: 'correct' } : opt\r\n      ));\r\n    } else {\r\n      setFeedback({ \r\n        message: t('feedback.incorrectAnswerWas', `Incorrect. The correct opposite of \"${getLatinizedText(targetDisplayWord, language)}\" is \"${getLatinizedText(correctOptionText, language)}\".`, { \r\n          targetWord: getLatinizedText(targetDisplayWord, language), \r\n          correctAnswer: getLatinizedText(correctOptionText, language) \r\n        }), \r\n        type: 'incorrect' \r\n      });\r\n      setDisplayOptions(prevOpts => prevOpts.map(opt => {\r\n        if (opt.id === selectedOption.id) return { ...opt, status: 'incorrect' };\r\n        if (opt.isCorrect) return { ...opt, status: 'correct' }; // Highlight the correct one\r\n        return opt;\r\n      }));\r\n    }\r\n    if (onComplete) {\r\n      setTimeout(() => onComplete(), selectedOption.isCorrect ? 1500 : 2000); \r\n    }\r\n  };\r\n  \r\n  const handleNextRequestByControl = () => { \r\n    if (onComplete) {\r\n      onComplete();\r\n    } else {\r\n      fetchAndPrepareExercise(); // Fallback\r\n    }\r\n  };\r\n\r\n  const handlePronounceTargetWord = () => {\r\n    if (targetDisplayWord && language) {\r\n      pronounceText(targetDisplayWord, language).catch(err => {\r\n          console.error(\"Pronunciation error:\", err);\r\n          setFeedback({message: t('errors.pronunciationError', 'Could not pronounce the word.'), type: 'error'});\r\n      });\r\n    }\r\n  };\r\n\r\n  if (isLoading) return <p>{t('loading.oppositesExercise', 'Loading opposites exercise...')}</p>;\r\n  if (error) return (\r\n    <>\r\n      <FeedbackDisplay message={error} type=\"error\" />\r\n      <ExerciseControls onNextExercise={handleNextRequestByControl} onRandomize={handleNextRequestByControl} config={{showNext: true, showRandomize: true}} />\r\n    </>\r\n  );\r\n  if (displayOptions.length === 0 && !isLoading) return (\r\n    <>\r\n      <FeedbackDisplay message={t('exercises.noOppositesPair', 'No opposites pair available for MCQ. Try different selections.')} type=\"info\"/>\r\n      <ExerciseControls onNextExercise={handleNextRequestByControl} onRandomize={handleNextRequestByControl} config={{showNext: true, showRandomize: true}} />\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <div className=\"type-opposite-exercise mcq-variant\">\r\n      <h3>\r\n        <TransliterableText \r\n          text={t('titles.whatIsTheOppositeOf', 'What is the opposite of:')} \r\n          langOverride={i18nLanguage} \r\n        />\r\n        <strong style={{ marginLeft: '8px', ...(isLatinized && targetDisplayWord !== getLatinizedText(targetDisplayWord, language) && {fontStyle: 'italic'}) }}>\r\n          {getLatinizedText(targetDisplayWord, language)}\r\n        </strong>\r\n        <button onClick={handlePronounceTargetWord} disabled={!targetDisplayWord} title={t('tooltips.pronounceWord', `Pronounce word`)} className=\"pronounce-btn-inline\">🔊</button>\r\n      </h3>\r\n      \r\n      <div className=\"mcq-options-container\">\r\n        {displayOptions.map((option) => (\r\n          <button\r\n            key={option.id}\r\n            onClick={() => handleOptionClick(option)}\r\n            className={`mcq-option-btn ${option.status}`}\r\n            disabled={isAnswered || isLoading}\r\n          >\r\n            {getLatinizedText(option.text, language)}\r\n          </button>\r\n        ))}\r\n      </div>\r\n      \r\n      <FeedbackDisplay message={feedback.message} type={feedback.type} />\r\n      \r\n      <ExerciseControls\r\n        onNextExercise={handleNextRequestByControl} \r\n        onRandomize={handleNextRequestByControl}\r\n        isAnswerCorrect={isAnswered && displayOptions.find(o => o.status === 'correct')?.isCorrect}\r\n        // Reveal and Hint are not implemented for this MCQ version yet\r\n        config={{ \r\n            showCheck: false, \r\n            showHint: false, \r\n            showReveal: false,\r\n            showNext: true, \r\n            showRandomize: true,\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TypeOppositeExercise;\r\n","import React, { useState, useEffect, useCallback } from 'react';\r\nimport { loadVocabularyData } from '../../../../utils/exerciseDataService';\r\nimport FeedbackDisplay from '../../FeedbackDisplay';\r\nimport ExerciseControls from '../../ExerciseControls';\r\nimport { useLatinizationContext } from '../../../../contexts/LatinizationContext';\r\nimport useLatinization from '../../../../hooks/useLatinization';\r\nimport { pronounceText } from '../../../../utils/speechUtils';\r\nimport { shuffleArray } from '../../../../utils/arrayUtils';\r\nimport { normalizeString } from '../../../../utils/stringUtils';\r\nimport { useI18n } from '../../../../i18n/I18nContext';\r\nimport './BuildWordExercise.css'; // Import the CSS file\r\n\r\nconst BuildWordExercise = ({ language, days, exerciseKey, onComplete }) => {\r\n  const [correctWord, setCorrectWord] = useState('');\r\n  const [shuffledLetters, setShuffledLetters] = useState([]); \r\n  const [wordSlots, setWordSlots] = useState([]); \r\n  \r\n  const [feedback, setFeedback] = useState({ message: '', type: '' });\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [isRevealed, setIsRevealed] = useState(false);\r\n  const [isCorrectState, setIsCorrectState] = useState(false);\r\n\r\n  const { isLatinized } = useLatinizationContext();\r\n  const getLatinizedText = useLatinization;\r\n  const { t } = useI18n();\r\n\r\n  const latinizedCorrectWord = getLatinizedText(correctWord, language);\r\n\r\n  const setupNewWord = useCallback(async () => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    setFeedback({ message: '', type: '' });\r\n    setIsRevealed(false);\r\n    setIsCorrectState(false);\r\n    setCorrectWord('');\r\n    setShuffledLetters([]);\r\n    setWordSlots([]);\r\n\r\n    try {\r\n      const { data: words, error: fetchError } = await loadVocabularyData(language, days);\r\n      if (fetchError) {\r\n        throw new Error(fetchError.message || fetchError.error || 'Failed to load vocabulary words.');\r\n      }\r\n      if (words && words.length > 0) {\r\n        let wordForExercise;\r\n        const singleWords = words.filter(w => !w.includes(' ') && w.length > 2 && w.length < 15);\r\n        if (singleWords.length > 0) {\r\n            wordForExercise = singleWords[Math.floor(Math.random() * singleWords.length)];\r\n        } else {\r\n            wordForExercise = words[Math.floor(Math.random() * words.length)].split(' ')[0]; \r\n            if(wordForExercise.length <= 2 || wordForExercise.length >=15) { \r\n                 setError(t('exercises.noSuitableWordBuild', 'Could not find a suitable word (3-14 letters, no spaces) for \"Build Word\" exercise.'));\r\n                 setIsLoading(false);\r\n                 return;\r\n            }\r\n        }\r\n        \r\n        setCorrectWord(wordForExercise);\r\n        setWordSlots(Array(wordForExercise.length).fill({ char: null, originalTileId: null }));\r\n        setShuffledLetters(\r\n          shuffleArray(\r\n            wordForExercise.split('').map((char, index) => ({ char, id: index, inSlot: false, slotIndex: null }))\r\n          )\r\n        );\r\n      } else {\r\n        setError(t('exercises.noWordsFound', 'No vocabulary words found for the selected criteria.'));\r\n      }\r\n    } catch (err) {\r\n      console.error(\"BuildWordExercise - Error fetching word:\", err);\r\n      setError(err.message || t('errors.unexpectedError', 'An unexpected error occurred.'));\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [language, days, t]);\r\n\r\n  useEffect(() => {\r\n    if (language && days && days.length > 0) {\r\n      setupNewWord();\r\n    } else {\r\n      setIsLoading(false);\r\n      setError(t('errors.selectLangDay', \"Please select a language and day(s).\"));\r\n    }\r\n  }, [setupNewWord, exerciseKey, language, days, t]);\r\n\r\n  const handleTileClick = (tile) => {\r\n    if (isRevealed || isCorrectState || tile.inSlot) return;\r\n\r\n    const newWordSlots = [...wordSlots];\r\n    const firstEmptySlotIndex = newWordSlots.findIndex(slot => slot.char === null);\r\n\r\n    if (firstEmptySlotIndex !== -1) {\r\n      newWordSlots[firstEmptySlotIndex] = { char: tile.char, originalTileId: tile.id };\r\n      setWordSlots(newWordSlots);\r\n\r\n      const newShuffledLetters = shuffledLetters.map(t =>\r\n        t.id === tile.id ? { ...t, inSlot: true, slotIndex: firstEmptySlotIndex } : t\r\n      );\r\n      setShuffledLetters(newShuffledLetters);\r\n      setFeedback({ message: '', type: '' });\r\n    }\r\n  };\r\n\r\n  const handleSlotClick = (slotIndex) => {\r\n    if (isRevealed || isCorrectState || !wordSlots[slotIndex] || wordSlots[slotIndex].char === null) return;\r\n\r\n    const tileToReturnId = wordSlots[slotIndex].originalTileId;\r\n    \r\n    const newWordSlots = [...wordSlots];\r\n    newWordSlots[slotIndex] = { char: null, originalTileId: null };\r\n    setWordSlots(newWordSlots);\r\n\r\n    const newShuffledLetters = shuffledLetters.map(t =>\r\n      t.id === tileToReturnId ? { ...t, inSlot: false, slotIndex: null } : t\r\n    );\r\n    setShuffledLetters(newShuffledLetters);\r\n    setFeedback({ message: '', type: '' });\r\n  };\r\n  \r\n  const checkAnswer = () => {\r\n    if (isRevealed || isCorrectState || !correctWord) return;\r\n    const constructedWord = wordSlots.map(slot => slot.char).join('');\r\n    const isCorrectNow = normalizeString(constructedWord) === normalizeString(correctWord);\r\n\r\n    if (isCorrectNow) {\r\n      setFeedback({ message: t('feedback.correct', 'Correct!'), type: 'correct' });\r\n      setIsCorrectState(true);\r\n      if (onComplete) {\r\n        setTimeout(() => onComplete(), 1500);\r\n      }\r\n    } else {\r\n      setFeedback({ message: t('feedback.incorrectKeepTrying', `Incorrect. Keep trying or use a hint.`), type: 'incorrect' });\r\n    }\r\n  };\r\n\r\n  const showHint = () => {\r\n    if (isRevealed || isCorrectState || !correctWord) return;\r\n    let hintSlotIndex = -1;\r\n    const currentConstructedWord = wordSlots.map(slot => slot.char).join('');\r\n\r\n    for (let i = 0; i < correctWord.length; i++) {\r\n      if (!wordSlots[i] || !wordSlots[i].char || normalizeString(wordSlots[i].char) !== normalizeString(correctWord[i])) {\r\n        hintSlotIndex = i;\r\n        break;\r\n      }\r\n    }\r\n    if (hintSlotIndex === -1 && currentConstructedWord.length < correctWord.length) {\r\n        hintSlotIndex = currentConstructedWord.length;\r\n    }\r\n\r\n    if (hintSlotIndex !== -1) {\r\n      const correctCharForHint = correctWord[hintSlotIndex];\r\n      if (wordSlots[hintSlotIndex] && wordSlots[hintSlotIndex].char && normalizeString(wordSlots[hintSlotIndex].char) !== normalizeString(correctCharForHint)) {\r\n        handleSlotClick(hintSlotIndex); \r\n      }\r\n      \r\n      const tileToPlace = shuffledLetters.find(t => !t.inSlot && normalizeString(t.char) === normalizeString(correctCharForHint));\r\n      if (tileToPlace) {\r\n        const newSlots = [...wordSlots]; \r\n        newSlots[hintSlotIndex] = { char: tileToPlace.char, originalTileId: tileToPlace.id };\r\n        setWordSlots(newSlots);\r\n        setShuffledLetters(prevLetters => prevLetters.map(t => t.id === tileToPlace.id ? {...t, inSlot:true, slotIndex: hintSlotIndex} : t));\r\n        setFeedback({ message: t('feedback.hintLetterPlaced', `Hint: Letter \"${getLatinizedText(correctCharForHint, language)}\" placed.`, { letter: getLatinizedText(correctCharForHint, language) }), type: 'hint' });\r\n      } else {\r\n         setFeedback({ message: t('feedback.hintLetterMisplaced', 'Hint: Could not find the next correct letter in the pool (it might be misplaced).'), type: 'info' });\r\n      }\r\n    } else {\r\n      setFeedback({ message: t('feedback.hintWordCorrectOrNoMore', 'Word seems correct or no more hints applicable.'), type: 'info' });\r\n    }\r\n  };\r\n  \r\n  const revealTheAnswer = () => { \r\n    if (!correctWord) return;\r\n    setWordSlots(correctWord.split('').map((char, index) => ({ char, originalTileId: -1-index }))); \r\n    setShuffledLetters(shuffledLetters.map(tile => ({...tile, inSlot: true, slotIndex: correctWord.indexOf(tile.char) }))); \r\n    setFeedback({ message: t('feedback.answerIs', `The word is: ${latinizedCorrectWord || correctWord}`, { answer: latinizedCorrectWord || correctWord }), type: 'info' });\r\n    setIsRevealed(true);\r\n    setIsCorrectState(true); \r\n    if (onComplete) {\r\n        setTimeout(() => onComplete(), 2000);\r\n    }\r\n  };\r\n\r\n  const handleReset = () => {\r\n     if (!correctWord || isRevealed || isCorrectState) return;\r\n     setWordSlots(Array(correctWord.length).fill({ char: null, originalTileId: null }));\r\n     setShuffledLetters(\r\n          shuffleArray( \r\n            correctWord.split('').map((char, index) => ({ char, id: index, inSlot: false, slotIndex: null }))\r\n          )\r\n     );\r\n     setFeedback({ message: '', type: '' });\r\n  };\r\n\r\n  const handleNextRequestByControl = () => {\r\n    if (onComplete) {\r\n      onComplete();\r\n    } else {\r\n      setupNewWord();\r\n    }\r\n  };\r\n\r\n  if (isLoading) return <p>{t('loading.buildWordExercise', 'Loading word building exercise...')}</p>;\r\n  if (error) return (\r\n    <div className=\"build-word-exercise-container\">\r\n      <FeedbackDisplay message={error} type=\"error\" />\r\n      <ExerciseControls onNextExercise={handleNextRequestByControl} config={{showNext: true}} />\r\n    </div>\r\n  );\r\n  if (!correctWord && !isLoading) return (\r\n    <div className=\"build-word-exercise-container\">\r\n      <FeedbackDisplay message={t('exercises.noWordForBuild', 'No word available for this exercise.')} type=\"info\" />\r\n      <ExerciseControls onNextExercise={handleNextRequestByControl} config={{showNext: true}} />\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"build-word-exercise-container\">\r\n      <h3>{t('titles.buildTheWord', 'Build the Word')}</h3>\r\n      <button onClick={() => pronounceText(correctWord, language)} disabled={!correctWord} title={t('tooltips.pronounceWord', \"Pronounce the word\")} className=\"pronounce-button-bwe\">🔊</button>\r\n      \r\n      <div className=\"word-slots-area\">\r\n        {wordSlots.map((slot, index) => (\r\n          <div \r\n            key={`slot-${index}`} \r\n            className={`word-slot ${slot.char ? 'filled-slot' : 'empty-slot'}`}\r\n            onClick={() => handleSlotClick(index)}\r\n          >\r\n            {slot.char ? <span className={`slot-char ${isLatinized && slot.char !== getLatinizedText(slot.char, language) ? 'latinized-char' : ''}`}>{getLatinizedText(slot.char, language)}</span> : <span className=\"slot-placeholder\">?</span>}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      \r\n      <div className=\"letter-pool-area\">\r\n        {shuffledLetters.filter(tile => !tile.inSlot).map(tile => (\r\n          <button \r\n            key={`tile-${tile.id}`} \r\n            className=\"letter-tile\"\r\n            onClick={() => handleTileClick(tile)}\r\n            disabled={isRevealed || isCorrectState}\r\n          >\r\n            <span className={isLatinized && tile.char !== getLatinizedText(tile.char, language) ? 'latinized-char' : ''}>{getLatinizedText(tile.char, language)}</span>\r\n          </button>\r\n        ))}\r\n         {shuffledLetters.filter(tile => !tile.inSlot).length === 0 && !isCorrectState && !isRevealed && \r\n            <span className=\"all-letters-placed-message\">{t('feedback.allLettersPlaced', 'All letters placed! Check your word.')}</span>}\r\n      </div>\r\n      \r\n      <FeedbackDisplay message={feedback.message} type={feedback.type} language={language} />\r\n      \r\n      <ExerciseControls\r\n        onCheckAnswer={!isRevealed && !isCorrectState && wordSlots.every(s => s.char) && correctWord ? checkAnswer : undefined}\r\n        onShowHint={!isRevealed && !isCorrectState && correctWord ? showHint : undefined}\r\n        onRevealAnswer={!isRevealed && !isCorrectState && correctWord ? revealTheAnswer : undefined}\r\n        onNextExercise={handleNextRequestByControl}\r\n        config={{ \r\n            showCheck: !isRevealed && !isCorrectState && wordSlots.every(s => s.char) && !!correctWord, \r\n            showHint: !isRevealed && !isCorrectState && !!correctWord, \r\n            showReveal: !isRevealed && !isCorrectState && !!correctWord,\r\n            showNext: true, \r\n        }}\r\n      />\r\n       <button onClick={handleReset} className=\"reset-tiles-button\" disabled={isRevealed || isCorrectState || !correctWord}>\r\n        🔄 {t('buttons.resetTiles', 'Reset Tiles')}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BuildWordExercise;\r\n","/**\n * A generic function to fetch JSON data from a given file path.\n * @param {string} filePath - The path to the JSON file.\n * @returns {Promise<{data: any, error: string|null, errorType: string|null}>} A promise that resolves to an object containing the data, or an error if the data could not be loaded.\n */\nasync function fetchJsonData(filePath) {\n  try {\n    const fullPath = `${process.env.PUBLIC_URL || ''}${filePath}`;\n    const response = await fetch(fullPath);\n    if (response.ok) {\n      try {\n        const data = await response.json();\n        return { data, error: null, errorType: null };\n      } catch (jsonError) {\n        console.error(`Error parsing JSON from ${filePath}:`, jsonError);\n        return { data: null, error: 'Invalid JSON format', errorType: 'jsonError' };\n      }\n    } else {\n      const errorContext = `HTTP error ${response.status} while fetching ${filePath}`;\n      console.error(errorContext);\n      if (response.status === 404) {\n        return { data: null, error: `File not found: ${filePath}`, errorType: 'fileNotFound' };\n      }\n      return { data: null, error: `Failed to load data: ${errorContext}`, errorType: 'httpError' };\n    }\n  } catch (networkError) {\n    console.error(`Network error or other exception while loading data from ${filePath}:`, networkError);\n    return { data: null, error: `Network error: ${networkError.message}`, errorType: 'networkError' };\n  }\n}\n\n// A map that associates COSYlanguage identifiers with their corresponding file keys.\nconst langFileMap = {\n  'COSYenglish': 'en',\n  'COSYfrench': 'fr',\n  'COSYespañol': 'es',\n  'COSYitalian': 'it',\n  'COSYdeutsch': 'de',\n  'COSYportugese': 'pt',\n  'COSYgreek': 'el',\n  'COSYrussian': 'ru',\n  'COSYarmenian': 'hy',\n  'COSYbrezhoneg': 'br',\n  'COSYtatar': 'tt',\n  'COSYbachkir': 'ba'\n};\n\n/**\n * Gets the language file key for a given language identifier.\n * @param {string} languageIdentifier - The language identifier (e.g., 'COSYfrench').\n * @returns {string} The language file key.\n */\nexport function getLanguageFileKey(languageIdentifier) {\n  return langFileMap[languageIdentifier] || 'english';\n}\n\n/**\n * Filters the fetched data based on the selected day(s).\n * @param {object} allData - The entire data object fetched from the JSON file.\n * @param {string|string[]} days - The selected day or array of days.\n * @returns {Array|Object} The filtered data for the selected day(s).\n */\nfunction filterDataByDays(allData, days) {\n  if (!allData) return Array.isArray(days) ? [] : {};\n\n  let dayData;\n  if (Array.isArray(days)) {\n    dayData = [];\n    days.forEach(d => {\n      if (allData[d]) dayData = dayData.concat(allData[d]);\n    });\n  } else {\n    if (typeof days === 'string' || typeof days === 'number') {\n        dayData = allData[days] || (typeof allData === 'object' && !Array.isArray(allData) ? {} : []);\n    } else {\n        dayData = allData;\n    }\n  }\n  return dayData;\n}\n\n/**\n * Loads the vocabulary data for a given language and day(s).\n * @param {string} languageIdentifier - The language identifier (e.g., 'COSYfrench').\n * @param {string|string[]} days - The selected day or array of days.\n * @returns {Promise<{data: Array, error: string|null, errorType: string|null}>} A promise that resolves to an object containing the vocabulary data, or an error if the data could not be loaded.\n */\nexport async function loadVocabularyData(languageIdentifier, days) {\n  const langKey = getLanguageFileKey(languageIdentifier);\n  const filePath = `/data/vocabulary/words/${langKey}.json`;\n  const { data, error, errorType } = await fetchJsonData(filePath);\n  if (error) return { data: [], error, errorType };\n  return { data: filterDataByDays(data, days), error: null, errorType: null };\n}\n\n/**\n * Loads the image data for a given language and day(s).\n * @param {string} languageIdentifier - The language identifier (e.g., 'COSYfrench').\n * @param {string|string[]} days - The selected day or array of days.\n * @returns {Promise<{data: Array, error: string|null, errorType: string|null}>} A promise that resolves to an object containing the image data, or an error if the data could not be loaded.\n */\nexport async function loadImageData(languageIdentifier, days) {\n  const filePath = `/data/vocabulary/images/images.json`;\n  const { data: allImageData, error, errorType } = await fetchJsonData(filePath);\n\n  if (error) return { data: [], error, errorType };\n\n  const imageDataForDays = filterDataByDays(allImageData, days);\n\n  const filteredImages = Array.isArray(imageDataForDays)\n    ? imageDataForDays.filter(img => img.translations && img.translations[languageIdentifier])\n    : [];\n\n  return { data: filteredImages, error: null, errorType: null };\n}\n\n/**\n * Loads the opposites data for a given language and day(s).\n * @param {string} languageIdentifier - The language identifier (e.g., 'COSYfrench').\n * @param {string|string[]} days - The selected day or array of days.\n * @returns {Promise<{data: object, error: string|null, errorType: string|null}>} A promise that resolves to an object containing the opposites data, or an error if the data could not be loaded.\n */\nexport async function loadOppositesData(languageIdentifier, days) {\n  const langKey = getLanguageFileKey(languageIdentifier);\n  const filePath = `/data/vocabulary/opposites/${langKey}.json`;\n  const { data, error, errorType } = await fetchJsonData(filePath);\n  if (error) return { data: {}, error, errorType };\n  const dayData = filterDataByDays(data, days);\n  if (Array.isArray(days) && Array.isArray(dayData)) {\n    const mergedOpposites = dayData.reduce((acc, dayObj) => ({ ...acc, ...dayObj }), {});\n    return { data: mergedOpposites, error: null, errorType: null };\n  }\n  return { data: dayData, error: null, errorType: null };\n}\n\n/**\n * Loads the gender grammar data for a given language and day(s).\n * @param {string} languageIdentifier - The language identifier (e.g., 'COSYfrench').\n * @param {string|string[]} days - The selected day or array of days.\n * @returns {Promise<{data: Array, error: string|null, errorType: string|null}>} A promise that resolves to an object containing the gender grammar data, or an error if the data could not be loaded.\n */\nexport async function loadGenderGrammarData(languageIdentifier, days) {\n  const langKey = getLanguageFileKey(languageIdentifier);\n  const filePath = `/data/grammar/gender/grammar_gender_${langKey}.json`;\n  const { data, error, errorType } = await fetchJsonData(filePath);\n  if (error) return { data: [], error, errorType };\n  return { data: filterDataByDays(data, days), error: null, errorType: null };\n}\n\n/**\n * Loads the possessives data for a given language and day(s).\n * @param {string} languageIdentifier - The language identifier (e.g., 'COSYfrench').\n * @param {string|string[]} days - The selected day or array of days.\n * @returns {Promise<{data: object, error: string|null, errorType: string|null}>} A promise that resolves to an object containing the possessives data, or an error if the data could not be loaded.\n */\nexport async function loadPossessivesData(languageIdentifier, days) {\n  const langKey = getLanguageFileKey(languageIdentifier);\n  const filenameLangKey = langKey === 'french' ? 'francais' : langKey;\n  const filePath = `/data/grammar/possessives/${filenameLangKey}.json`;\n  const { data, error, errorType } = await fetchJsonData(filePath);\n  if (error) return { data: {}, error, errorType };\n  return { data: filterDataByDays(data, days), error: null, errorType: null };\n}\n\n/**\n * Loads the verb grammar data for a given language and day(s).\n * @param {string} languageIdentifier - The language identifier (e.g., 'COSYfrench').\n * @param {string|string[]} days - The selected day or array of days.\n * @returns {Promise<{data: Array, error: string|null, errorType: string|null}>} A promise that resolves to an object containing the verb grammar data, or an error if the data could not be loaded.\n */\nexport async function loadVerbGrammarData(languageIdentifier, days) {\n  const langKey = getLanguageFileKey(languageIdentifier);\n  const filePath = `/data/grammar/verbs/grammar_verbs_${langKey}.json`;\n  const { data, error, errorType } = await fetchJsonData(filePath);\n  if (error) return { data: [], error, errorType };\n  return { data: filterDataByDays(data, days), error: null, errorType: null };\n}\n\n/**\n * Loads the reading data for a given language and day(s).\n * @param {string} languageIdentifier - The language identifier (e.g., 'COSYfrench').\n * @param {string|string[]} days - The selected day or array of days.\n * @returns {Promise<{data: Array, error: string|null, errorType: string|null}>} A promise that resolves to an object containing the reading data, or an error if the data could not be loaded.\n */\nexport async function loadReadingData(languageIdentifier, days) {\n  const langKey = getLanguageFileKey(languageIdentifier);\n  const filePath = `/data/reading/reading_${langKey}.json`;\n  const { data, error, errorType } = await fetchJsonData(filePath);\n  if (error) return { data: [], error, errorType };\n  return { data: filterDataByDays(data, days), error: null, errorType: null };\n}\n\n/**\n * Loads the speaking prompts data for a given language and day(s).\n * @param {string} languageIdentifier - The language identifier (e.g., 'COSYfrench').\n * @param {string|string[]} days - The selected day or array of days.\n * @returns {Promise<{data: Array, error: string|null, errorType: string|null}>} A promise that resolves to an object containing the speaking prompts data, or an error if the data could not be loaded.\n */\nexport async function loadSpeakingPromptsData(languageIdentifier, days) {\n  const langKey = getLanguageFileKey(languageIdentifier);\n  const filePath = `/data/speaking/question/question_${langKey}.json`;\n  const { data, error, errorType } = await fetchJsonData(filePath);\n  if (error) return { data: [], error, errorType };\n  return { data: filterDataByDays(data, days), error: null, errorType: null };\n}\n\n/**\n * Loads the writing prompts data for a given language and day(s).\n * @param {string} languageIdentifier - The language identifier (e.g., 'COSYfrench').\n * @param {string|string[]} days - The selected day or array of days.\n * @returns {Promise<{data: object, error: string|null, errorType: string|null}>} A promise that resolves to an object containing the writing prompts data, or an error if the data could not be loaded.\n */\nexport async function loadWritingPromptsData(languageIdentifier, days) {\n  const langKey = getLanguageFileKey(languageIdentifier);\n  const filePath = `/data/writing/story_prompts_${langKey}.json`;\n  const { data, error, errorType } = await fetchJsonData(filePath);\n  const defaultData = { what_happens_next: [], what_happened_before: [] };\n  if (error) return { data: defaultData, error, errorType };\n  const dayFilteredData = filterDataByDays(data, days);\n  if (Array.isArray(days) && Array.isArray(dayFilteredData)) {\n    const mergedPrompts = { what_happens_next: [], what_happened_before: [] };\n    dayFilteredData.forEach(dayObj => {\n      if (dayObj && dayObj.what_happens_next) mergedPrompts.what_happens_next.push(...dayObj.what_happens_next);\n      if (dayObj && dayObj.what_happened_before) mergedPrompts.what_happened_before.push(...dayObj.what_happened_before);\n    });\n    return { data: mergedPrompts, error: null, errorType: null };\n  }\n  return {\n    data: (dayFilteredData && typeof dayFilteredData === 'object' && !Array.isArray(dayFilteredData)) ? dayFilteredData : defaultData,\n    error: null,\n    errorType: null\n  };\n}\n\n/**\n * Loads the sentence unscramble data for a given language.\n * @param {string} languageIdentifier - The language identifier (e.g., 'COSYfrench').\n * @returns {Promise<{data: Array, error: string|null, errorType: string|null}>} A promise that resolves to an object containing the sentence unscramble data, or an error if the data could not be loaded.\n */\nexport async function loadSentenceUnscrambleData(languageIdentifier) {\n  const filePath = `/data/exercises/sentenceUnscramble.json`;\n  const { data: allLanguageData, error, errorType } = await fetchJsonData(filePath);\n  if (error) {\n    return { data: [], error, errorType };\n  }\n  if (allLanguageData && allLanguageData[languageIdentifier]) {\n    return { data: allLanguageData[languageIdentifier], error: null, errorType: null };\n  } else {\n    console.warn(`Sentence unscramble data for language ${languageIdentifier} not found in ${filePath}.`);\n    return { data: [], error: `No sentence unscramble data for ${languageIdentifier}.`, errorType: 'dataNotFound' };\n  }\n}\n\n/**\n * Loads the fill in the blanks data for a given language.\n * @param {string} languageIdentifier - The language identifier (e.g., \"COSYfrench\").\n * @returns {Promise<{data: Array, error: string|null, errorType: string|null}>} A promise that resolves to an object containing the fill in the blanks data, or an error if the data could not be loaded.\n */\nexport async function loadFillInTheBlanksData(languageIdentifier) {\n  const filePath = `/data/exercises/fillInTheBlanks.json`;\n  const { data: allLanguageData, error, errorType } = await fetchJsonData(filePath);\n\n  if (error) {\n    return { data: [], error, errorType };\n  }\n\n  if (allLanguageData && allLanguageData[languageIdentifier]) {\n    return { data: allLanguageData[languageIdentifier], error: null, errorType: null };\n  } else {\n    console.warn(`Fill in the Blanks data for language ${languageIdentifier} not found in ${filePath}.`);\n    return { data: [], error: `No Fill in the Blanks data for ${languageIdentifier}.`, errorType: 'dataNotFound' };\n  }\n}\n\nexport { fetchJsonData };\n\nconsole.log('[ExerciseDataService] Service loaded.');\n"],"names":["pronounceText","text","cosyLanguage","Promise","resolve","reject","window","speechSynthesis","console","error","Error","String","trim","warn","speechLang","speechCode","isFallback","langStr","mapLanguageToSpeechCode","utterance","SpeechSynthesisUtterance","lang","cancel","onstart","log","onerror","event","speak","unlockAudioPlayback","Audio","silentAudio","volume","playPromise","play","undefined","then","_","catch","e","_ref","onCheckAnswer","onRevealAnswer","onShowHint","onRandomize","onNextExercise","config","isAnswerCorrect","isRevealed","customButton","t","useI18n","showCheck","checkButtonText","showReveal","revealButtonText","showHint","hintButtonText","showRandomize","randomizeButtonText","showNext","nextButtonText","canInteract","_jsxs","className","children","_jsx","Button","onClick","disabled","message","type","language","latinizedVersion","useLatinization","processedMessage","isLatinized","useLatinizationContext","style","minHeight","margin","padding","borderRadius","textAlign","fontWeight","animation","textPrefix","backgroundColor","color","borderColor","fontStyle","role","shuffleArray","array","newArray","i","length","j","Math","floor","random","normalizeString","str","normalized","normalize","replace","toLowerCase","managedExerciseComponents","key","Component","days","exerciseKey","onComplete","currentWord","setCurrentWord","useState","isLoading","setIsLoading","setError","i18nLanguage","latinizedWord","useEffect","fetchAndSetNewWord","useCallback","async","data","words","fetchError","loadVocabularyData","randomIndex","err","handleNext","wordStyle","fontFamily","TransliterableText","langOverride","_Fragment","FeedbackDisplay","ExerciseControls","border","fontSize","marginTop","display","flexDirection","justifyContent","alignItems","gap","speechError","name","_displayOptions$find","targetDisplayWord","setTargetDisplayWord","correctOptionText","setCorrectOptionText","displayOptions","setDisplayOptions","feedback","setFeedback","isAnswered","setIsAnswered","getLatinizedText","fetchAndPrepareExercise","oppositesMap","oppositesError","loadOppositesData","Object","keys","wordsWithDefinedOpposites","actualCorrectOpposite","allVocab","vocabError","potentialDistractorsPool","map","item","word","filter","Boolean","Set","values","distractors","slice","NUM_TOTAL_OPTIONS","options","id","isCorrect","status","forEach","dText","push","handleNextRequestByControl","marginLeft","handlePronounceTargetWord","title","option","handleOptionClick","selectedOption","prevOpts","opt","targetWord","correctAnswer","setTimeout","find","o","pairs","setPairs","wordsColumn","setWordsColumn","oppositesColumn","setOppositesColumn","selectedWord","setSelectedWord","selectedOpposite","setSelectedOpposite","matchedItems","setMatchedItems","numCorrectMatches","setNumCorrectMatches","setIsRevealed","lines","setLines","itemRefs","useRef","columnsContainerRef","setupExercise","current","NUM_PAIRS_TO_DISPLAY","allPossiblePairs","entries","_ref2","opposite","selectedPairs","p","handleItemClick","itemValue","currentSelection","value","element","target","drawLine","el1","el2","containerRect","getBoundingClientRect","rect1","rect2","x1","left","width","scrollLeft","y1","top","height","scrollTop","x2","y2","lineKey","textContent","prevLines","currentWordValue","currentOppositeValue","some","pair","prev","classList","add","remove","columnStyle","flex","itemStyle","base","cursor","minWidth","transition","boxShadow","transform","maxWidth","ref","position","pointerEvents","zIndex","line","stroke","strokeWidth","opacity","el","unMatchedPairs","hintPair","revealAllAnswers","allCurrentlyMatched","linesForRevealed","correctWord","setCorrectWord","shuffledLetters","setShuffledLetters","wordSlots","setWordSlots","isCorrectState","setIsCorrectState","latinizedCorrectWord","setupNewWord","wordForExercise","singleWords","w","includes","split","Array","fill","char","originalTileId","index","inSlot","slotIndex","handleSlotClick","tileToReturnId","newWordSlots","newShuffledLetters","slot","tile","firstEmptySlotIndex","findIndex","handleTileClick","every","s","checkAnswer","join","hintSlotIndex","currentConstructedWord","correctCharForHint","tileToPlace","newSlots","prevLetters","letter","revealTheAnswer","indexOf","answer","handleReset","hostKey","CurrentExercise","setCurrentExercise","currentExerciseInfo","setCurrentExerciseInfo","subExerciseKey","setSubExerciseKey","selectAndLoadRandomExercise","selected","handleSubExerciseComplete","fetchJsonData","filePath","fullPath","response","fetch","ok","errorContext","errorType","json","jsonError","networkError","langFileMap","getLanguageFileKey","languageIdentifier","filterDataByDays","allData","isArray","dayData","d","concat","reduce","acc","dayObj","loadSentenceUnscrambleData","allLanguageData","loadFillInTheBlanksData"],"sourceRoot":""}