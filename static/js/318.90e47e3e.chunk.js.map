{"version":3,"file":"static/js/318.90e47e3e.chunk.js","mappings":"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","sources":["components/Freestyle/exercises/grammar/IrregularVerbQuiz.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useI18n } from '../../../../i18n/I18nContext';\nimport { normalizeString } from '../../../../utils/stringUtils';\nimport useLatinization from '../../../../hooks/useLatinization'; // Though not strictly needed for English, good for consistency\n\nconst IrregularVerbQuiz = ({\n  verb, // { base, pastSimple, pastParticiple, translation }\n  language,\n  onCheckAnswer,\n  onSetFeedback,\n  isRevealedExternally,\n  onSetCorrect\n}) => {\n  const { t } = useI18n();\n  const getLatinizedText = useLatinization(); // Using for consistency, though English won't change\n\n  const [pastSimpleInput, setPastSimpleInput] = useState('');\n  const [pastParticipleInput, setPastParticipleInput] = useState('');\n  const [isPastSimpleCorrect, setIsPastSimpleCorrect] = useState(null); // null, true, false\n  const [isPastParticipleCorrect, setIsPastParticipleCorrect] = useState(null); // null, true, false\n  const [isFullyAnswered, setIsFullyAnswered] = useState(false);\n\n\n  useEffect(() => {\n    setPastSimpleInput('');\n    setPastParticipleInput('');\n    setIsPastSimpleCorrect(null);\n    setIsPastParticipleCorrect(null);\n    setIsFullyAnswered(false);\n    if (onSetFeedback) onSetFeedback({ message: '', type: '' });\n    if (onSetCorrect) onSetCorrect(false);\n  }, [verb, onSetFeedback, onSetCorrect]);\n\n  useEffect(() => {\n    if (isRevealedExternally && !isFullyAnswered) {\n      setPastSimpleInput(verb.pastSimple.split('/')[0]);\n      setPastParticipleInput(verb.pastParticiple.split('/')[0]);\n      setIsPastSimpleCorrect(true);\n      setIsPastParticipleCorrect(true);\n      setIsFullyAnswered(true);\n      if (onSetCorrect) onSetCorrect(true);\n      if (onSetFeedback) {\n        onSetFeedback({\n          message: t('feedback.answersRevealedIrregular', `Base: {base}, Past Simple: {ps}, Past Participle: {pp}`, {\n            base: verb.base,\n            ps: verb.pastSimple,\n            pp: verb.pastParticiple,\n          }),\n          type: 'info',\n        });\n      }\n    }\n  }, [isRevealedExternally, verb, isFullyAnswered, onSetCorrect, onSetFeedback, t]);\n\n  const checkForms = React.useCallback(() => {\n    if (isFullyAnswered && !isRevealedExternally) return;\n\n    const normalizedPSInput = normalizeString(pastSimpleInput);\n    const normalizedPPInput = normalizeString(pastParticipleInput);\n\n    const correctPastSimples = verb.pastSimple.split('/').map(s => normalizeString(s));\n    const correctPastParticiples = verb.pastParticiple.split('/').map(s => normalizeString(s));\n\n    const psCorrect = correctPastSimples.includes(normalizedPSInput);\n    const ppCorrect = correctPastParticiples.includes(normalizedPPInput);\n\n    setIsPastSimpleCorrect(psCorrect);\n    setIsPastParticipleCorrect(ppCorrect);\n\n    if (psCorrect && ppCorrect) {\n      if (onSetFeedback) onSetFeedback({ message: t('feedback.correctAllForms', 'Correct! All forms are right.'), type: 'success' });\n      if (onSetCorrect) onSetCorrect(true);\n      setIsFullyAnswered(true);\n      return true;\n    } else {\n      let messages = [];\n      if (!psCorrect && pastSimpleInput) messages.push(t('feedback.pastSimpleIncorrect', 'Past Simple is incorrect.'));\n      if (!ppCorrect && pastParticipleInput) messages.push(t('feedback.pastParticipleIncorrect', 'Past Participle is incorrect.'));\n      if (pastSimpleInput === '' || pastParticipleInput === '') messages.push(t('feedback.fillAllForms', 'Please fill in both forms.'));\n\n      if (onSetFeedback) onSetFeedback({ message: messages.join(' ') || t('feedback.tryAgain', 'Try again.'), type: 'incorrect' });\n      if (onSetCorrect) onSetCorrect(false);\n      setIsFullyAnswered(false);\n      return false;\n    }\n  }, [\n    isFullyAnswered, isRevealedExternally, pastSimpleInput, pastParticipleInput,\n    verb, onSetFeedback, t, onSetCorrect, setIsPastSimpleCorrect,\n    setIsPastParticipleCorrect, setIsFullyAnswered\n  ]);\n\n  useEffect(() => {\n    if (onCheckAnswer) {\n      onCheckAnswer.current = checkForms;\n    }\n  }, [onCheckAnswer, checkForms]);\n\n\n  const inputGroupStyle = {\n    display: 'flex',\n    flexWrap: 'wrap', // Allow wrapping on small screens\n    alignItems: 'center',\n    justifyContent: 'center', // Center items in the flex container\n    marginBottom: '15px',\n    gap: '10px', // Gap between label and input\n  };\n\n  const labelStyle = {\n    // marginRight: '10px', // Replaced by gap\n    minWidth: '120px', // Give label some minimum width\n    textAlign: 'right', // Align text to the right for labels\n    flexBasis: '120px', // Basis for label width\n  };\n\n  const inputStyle = (isCorrect) => ({\n    padding: '8px',\n    fontSize: '1rem',\n    border: `1px solid ${isCorrect === false ? 'red' : (isCorrect === true ? 'green' : '#ccc')}`,\n    borderRadius: '4px',\n    width: 'clamp(150px, 60%, 200px)', // Responsive width\n    boxSizing: 'border-box',\n    textAlign: 'center',\n  });\n\n\n  return (\n    <div style={{ margin: '20px 0', padding: '15px', border: '1px solid #e0e0e0', borderRadius: '5px' }}>\n      <p style={{ fontWeight: 'bold', marginBottom: '20px', fontSize: '1.2em', textAlign: 'center' }}>\n        {t('labels.verbBaseForm', `Verb (Base Form):`)} {getLatinizedText(verb.base, language)}\n      </p>\n      <div style={inputGroupStyle}>\n        <label htmlFor=\"pastSimple\" style={labelStyle}>\n          {t('labels.pastSimple', `Past Simple:`)}\n        </label>\n        <input\n          type=\"text\"\n          id=\"pastSimple\"\n          value={pastSimpleInput}\n          onChange={e => {\n            setPastSimpleInput(e.target.value);\n            setIsPastSimpleCorrect(null);\n            setIsFullyAnswered(false);\n            if (onSetCorrect) onSetCorrect(false);\n            if (onSetFeedback) onSetFeedback({message: '', type: ''});\n          }}\n          disabled={isFullyAnswered && !isRevealedExternally}\n          style={inputStyle(isPastSimpleCorrect)}\n          aria-label={t('ariaLabels.pastSimpleInput', \"Past simple input\")}\n        />\n      </div>\n      <div style={inputGroupStyle}>\n        <label htmlFor=\"pastParticiple\" style={labelStyle}>\n          {t('labels.pastParticiple', `Past Participle:`)}\n        </label>\n        <input\n          type=\"text\"\n          id=\"pastParticiple\"\n          value={pastParticipleInput}\n          onChange={e => {\n            setPastParticipleInput(e.target.value);\n            setIsPastParticipleCorrect(null);\n            setIsFullyAnswered(false);\n            if (onSetCorrect) onSetCorrect(false);\n            if (onSetFeedback) onSetFeedback({message: '', type: ''});\n          }}\n          disabled={isFullyAnswered && !isRevealedExternally}\n          style={inputStyle(isPastParticipleCorrect)}\n          aria-label={t('ariaLabels.pastParticipleInput', \"Past participle input\")}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default IrregularVerbQuiz;\n"],"names":["_ref","verb","language","onCheckAnswer","onSetFeedback","isRevealedExternally","onSetCorrect","t","useI18n","getLatinizedText","useLatinization","pastSimpleInput","setPastSimpleInput","useState","pastParticipleInput","setPastParticipleInput","isPastSimpleCorrect","setIsPastSimpleCorrect","isPastParticipleCorrect","setIsPastParticipleCorrect","isFullyAnswered","setIsFullyAnswered","useEffect","message","type","pastSimple","split","pastParticiple","base","ps","pp","checkForms","React","normalizedPSInput","normalizeString","normalizedPPInput","correctPastSimples","map","s","correctPastParticiples","psCorrect","includes","ppCorrect","messages","push","join","current","inputGroupStyle","display","flexWrap","alignItems","justifyContent","marginBottom","gap","labelStyle","minWidth","textAlign","flexBasis","inputStyle","isCorrect","padding","fontSize","border","borderRadius","width","boxSizing","_jsxs","style","margin","children","fontWeight","_jsx","htmlFor","id","value","onChange","e","target","disabled"],"sourceRoot":""}