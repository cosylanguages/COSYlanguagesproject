{"ast":null,"code":"import React from'react';import{useLatinizationContext}from'../../contexts/LatinizationContext';import useLatinization from'../../hooks/useLatinization';/**\r\n * Displays feedback messages for exercises.\r\n * Props:\r\n * - message: string or React node - The feedback message.\r\n * - type: string (e.g., 'correct', 'incorrect', 'hint', 'info', 'error') - Determines styling.\r\n * - language: string (optional) - The language of the feedback message, for latinization.\r\n */import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const FeedbackDisplay=_ref=>{let{message,type,language}=_ref;// Call the useLatinization hook unconditionally at the top level.\n// Pass an empty string if message is not a string to prevent errors in the hook.\n// The hook itself is expected to use LatinizationContext to determine if latinization is active.\nconst latinizedVersion=useLatinization(typeof message==='string'?message:'',language);// Determine the actual message to display.\n// If the original message was not a string, or no language was provided, use the original message.\n// Otherwise, use the output from useLatinization (which respects the isLatinized context).\nconst processedMessage=typeof message==='string'&&language?latinizedVersion:message;// Get isLatinized from context, primarily for UI adjustments like font style,\n// not for deciding whether to call useLatinization.\nconst{isLatinized}=useLatinizationContext();if(!message){return/*#__PURE__*/_jsx(\"div\",{style:{minHeight:'24px',margin:'10px 0'},\"aria-live\":\"polite\"});// Reserve space\n}let style={padding:'10px',margin:'10px 0',borderRadius:'4px',textAlign:'center',minHeight:'24px'// Ensure it doesn't collapse when empty\n};let textPrefix='';switch(type){case'correct':style.backgroundColor='#d4edda';style.color='#155724';style.borderColor='#c3e6cb';textPrefix='‚úÖ ';break;case'incorrect':style.backgroundColor='#f8d7da';style.color='#721c24';style.borderColor='#f5c6cb';textPrefix='‚ùå ';break;case'hint':style.backgroundColor='#fff3cd';style.color='#856404';style.borderColor='#ffeeba';textPrefix='üí° ';break;case'info':style.backgroundColor='#d1ecf1';style.color='#0c5460';style.borderColor='#bee5eb';textPrefix='‚ÑπÔ∏è ';break;case'error':style.backgroundColor='#f8d7da';// Same as incorrect\nstyle.color='#721c24';style.borderColor='#f5c6cb';textPrefix='‚ö†Ô∏è ';break;default:// Neutral / no specific type\nstyle.backgroundColor='#e9ecef';style.color='#495057';style.borderColor='#ced4da';}// Apply visual indication for latinized text if necessary\nif(isLatinized&&typeof processedMessage==='string'&&typeof message==='string'&&processedMessage!==message){style.fontStyle='italic';// style.fontFamily = 'Arial, sans-serif'; // Example alternative font\n}return/*#__PURE__*/_jsxs(\"div\",{style:style,role:\"alert\",\"aria-live\":\"assertive\",children:[textPrefix,processedMessage]});};export default FeedbackDisplay;","map":{"version":3,"names":["React","useLatinizationContext","useLatinization","jsx","_jsx","jsxs","_jsxs","FeedbackDisplay","_ref","message","type","language","latinizedVersion","processedMessage","isLatinized","style","minHeight","margin","padding","borderRadius","textAlign","textPrefix","backgroundColor","color","borderColor","fontStyle","role","children"],"sources":["/workspaces/COSYlanguagesproject/src/components/Freestyle/FeedbackDisplay.js"],"sourcesContent":["import React from 'react';\r\nimport { useLatinizationContext } from '../../contexts/LatinizationContext';\r\nimport useLatinization from '../../hooks/useLatinization';\r\n\r\n/**\r\n * Displays feedback messages for exercises.\r\n * Props:\r\n * - message: string or React node - The feedback message.\r\n * - type: string (e.g., 'correct', 'incorrect', 'hint', 'info', 'error') - Determines styling.\r\n * - language: string (optional) - The language of the feedback message, for latinization.\r\n */\r\nconst FeedbackDisplay = ({ message, type, language }) => {\r\n  // Call the useLatinization hook unconditionally at the top level.\r\n  // Pass an empty string if message is not a string to prevent errors in the hook.\r\n  // The hook itself is expected to use LatinizationContext to determine if latinization is active.\r\n  const latinizedVersion = useLatinization(typeof message === 'string' ? message : '', language);\r\n\r\n  // Determine the actual message to display.\r\n  // If the original message was not a string, or no language was provided, use the original message.\r\n  // Otherwise, use the output from useLatinization (which respects the isLatinized context).\r\n  const processedMessage = (typeof message === 'string' && language)\r\n    ? latinizedVersion\r\n    : message;\r\n\r\n  // Get isLatinized from context, primarily for UI adjustments like font style,\r\n  // not for deciding whether to call useLatinization.\r\n  const { isLatinized } = useLatinizationContext();\r\n\r\n  if (!message) {\r\n    return <div style={{ minHeight: '24px', margin: '10px 0' }} aria-live=\"polite\"></div>; // Reserve space\r\n  }\r\n\r\n  let style = {\r\n    padding: '10px',\r\n    margin: '10px 0',\r\n    borderRadius: '4px',\r\n    textAlign: 'center',\r\n    minHeight: '24px', // Ensure it doesn't collapse when empty\r\n  };\r\n\r\n  let textPrefix = '';\r\n\r\n  switch (type) {\r\n    case 'correct':\r\n      style.backgroundColor = '#d4edda';\r\n      style.color = '#155724';\r\n      style.borderColor = '#c3e6cb';\r\n      textPrefix = '‚úÖ ';\r\n      break;\r\n    case 'incorrect':\r\n      style.backgroundColor = '#f8d7da';\r\n      style.color = '#721c24';\r\n      style.borderColor = '#f5c6cb';\r\n      textPrefix = '‚ùå ';\r\n      break;\r\n    case 'hint':\r\n      style.backgroundColor = '#fff3cd';\r\n      style.color = '#856404';\r\n      style.borderColor = '#ffeeba';\r\n      textPrefix = 'üí° ';\r\n      break;\r\n    case 'info':\r\n      style.backgroundColor = '#d1ecf1';\r\n      style.color = '#0c5460';\r\n      style.borderColor = '#bee5eb';\r\n      textPrefix = '‚ÑπÔ∏è ';\r\n      break;\r\n    case 'error':\r\n      style.backgroundColor = '#f8d7da'; // Same as incorrect\r\n      style.color = '#721c24';\r\n      style.borderColor = '#f5c6cb';\r\n      textPrefix = '‚ö†Ô∏è ';\r\n      break;\r\n    default: // Neutral / no specific type\r\n      style.backgroundColor = '#e9ecef';\r\n      style.color = '#495057';\r\n      style.borderColor = '#ced4da';\r\n  }\r\n  \r\n  // Apply visual indication for latinized text if necessary\r\n  if (isLatinized && typeof processedMessage === 'string' && typeof message === 'string' && processedMessage !== message) {\r\n    style.fontStyle = 'italic'; \r\n    // style.fontFamily = 'Arial, sans-serif'; // Example alternative font\r\n  }\r\n\r\n  return (\r\n    <div style={style} role=\"alert\" aria-live=\"assertive\">\r\n      {textPrefix}{processedMessage}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FeedbackDisplay;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}