{"ast":null,"code":"import _objectSpread from\"/workspaces/COSYlanguagesproject/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect,useCallback}from'react';import{loadVerbGrammarData,loadVocabularyData}from'../../../../utils/exerciseDataService';import{processVerbData,generateGrammarExerciseSentence,setGrammarGeneratorTranslations}from'../../../../utils/grammarSentenceGenerator';import{useLatinizationContext}from'../../../../contexts/LatinizationContext';import useLatinization from'../../../../hooks/useLatinization';import{shuffleArray}from'../../../../utils/arrayUtils';import{normalizeString}from'../../../../utils/stringUtils';import FeedbackDisplay from'../../FeedbackDisplay';import ExerciseControls from'../../ExerciseControls';import{useI18n}from'../../../../i18n/I18nContext';import{useProgress}from'../../../../contexts/ProgressContext';// Import useProgress\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const WordOrderExercise=_ref=>{let{language,days,exerciseKey}=_ref;const[exerciseData,setExerciseData]=useState(null);const[wordPool,setWordPool]=useState([]);const[constructedSentence,setConstructedSentence]=useState([]);const[feedback,setFeedback]=useState({message:'',type:''});const[isLoading,setIsLoading]=useState(true);const[error,setError]=useState(null);const[isRevealed,setIsRevealed]=useState(false);const[isCorrect,setIsCorrect]=useState(false);const{isLatinized}=useLatinizationContext();const getLatinizedText=useLatinization;const{t,allTranslations}=useI18n();const progress=useProgress();useEffect(()=>{if(allTranslations){setGrammarGeneratorTranslations(allTranslations);}},[allTranslations]);const setupNewExercise=useCallback(async()=>{setIsLoading(true);setError(null);setFeedback({message:'',type:''});setExerciseData(null);setWordPool([]);setConstructedSentence([]);setIsRevealed(false);setIsCorrect(false);try{const{data:rawVerbItems,error:verbError}=await loadVerbGrammarData(language,days);if(verbError)throw new Error(verbError.message||verbError.error||'Failed to load verb grammar data.');const{data:vocabItems,error:vocabError}=await loadVocabularyData(language,days);if(vocabError)console.warn(\"WordOrderExercise: Failed to load vocabulary data.\");if(rawVerbItems&&rawVerbItems.length>0){const processedVerbItems=processVerbData(rawVerbItems,language);if(!processedVerbItems||processedVerbItems.length===0){setError(t('errors.noProcessableVerbData','No processable verb items found.'));setIsLoading(false);return;}const sentenceDetails=await generateGrammarExerciseSentence(language,days,processedVerbItems,vocabItems||[]);if(sentenceDetails&&sentenceDetails.correctSentence){let components=sentenceDetails.sentenceComponents;if(!components||components.length===0){components=sentenceDetails.correctSentence.replace(/[.?]$/,\"\").split(' ');}setExerciseData({correctSentence:sentenceDetails.correctSentence,sentenceComponents:components});setWordPool(shuffleArray(components.map((word,index)=>({word,id:index}))));}else{setError(t('errors.couldNotGenerateSentence','Could not generate a word order exercise sentence.'));}}else{setError(t('errors.noVerbData','No verb grammar data found.'));}}catch(err){console.error(\"WordOrderExercise - Error setting up:\",err);setError(err.message||t('errors.unexpectedError','An unexpected error occurred.'));}finally{setIsLoading(false);}},[language,days,t]);useEffect(()=>{if(language&&days&&days.length>0)setupNewExercise();else{setIsLoading(false);setError(t('errors.selectLangDay',\"Please select a language and day(s).\"));}},[setupNewExercise,exerciseKey,language,days,t]);const handleTileClick=tile=>{if(isRevealed||isCorrect)return;setConstructedSentence(prev=>[...prev,tile]);setWordPool(prev=>prev.filter(item=>item.id!==tile.id));setFeedback({message:'',type:''});};const handleSlotClick=indexToRemove=>{if(isRevealed||isCorrect)return;const tileToReturn=constructedSentence[indexToRemove];setConstructedSentence(prev=>prev.filter((_,index)=>index!==indexToRemove));setWordPool(prev=>shuffleArray([...prev,tileToReturn]));setFeedback({message:'',type:''});};const checkAnswer=()=>{if(!exerciseData||isRevealed||isCorrect)return;const userAnswerSentence=constructedSentence.map(item=>item.word).join(' ').trim();const correctAnswerSentence=exerciseData.correctSentence.replace(/[.?]$/,\"\").trim();const itemId=\"wordorder_\".concat(normalizeString(correctAnswerSentence));if(normalizeString(userAnswerSentence)===normalizeString(correctAnswerSentence)){setFeedback({message:t('feedback.correct','Correct!'),type:'correct'});setIsCorrect(true);progress.awardCorrectAnswer(itemId,'grammar-wordorder');}else{setFeedback({message:t('feedback.incorrectWordOrder',\"Incorrect order. The correct sentence is: \\\"\".concat(getLatinizedText(exerciseData.correctSentence,language),\"\\\"\"),{correctSentence:getLatinizedText(exerciseData.correctSentence,language)}),type:'incorrect'});progress.awardIncorrectAnswer(itemId,'grammar-wordorder');}};const showHint=()=>{if(!exerciseData||isRevealed||isCorrect||constructedSentence.length>=exerciseData.sentenceComponents.length)return;const nextCorrectWordIndex=constructedSentence.length;const nextCorrectWordObject=exerciseData.sentenceComponents[nextCorrectWordIndex];setFeedback({message:t('feedback.hintWordOrder',\"Hint: The next word is \\\"\".concat(getLatinizedText(nextCorrectWordObject,language),\"\\\".\"),{word:getLatinizedText(nextCorrectWordObject,language)}),type:'hint'});};const revealTheAnswer=()=>{if(!exerciseData)return;const correctAnswerSentence=exerciseData.correctSentence.replace(/[.?]$/,\"\").trim();const itemId=\"wordorder_\".concat(normalizeString(correctAnswerSentence));setConstructedSentence(exerciseData.sentenceComponents.map((word,index)=>({word,id:index})));setWordPool([]);setFeedback({message:t('feedback.revealedWordOrder',\"The correct order is: \\\"\".concat(getLatinizedText(exerciseData.correctSentence,language),\"\\\"\"),{correctSentence:getLatinizedText(exerciseData.correctSentence,language)}),type:'info'});setIsRevealed(true);setIsCorrect(true);progress.scheduleReview(itemId,'grammar-wordorder',false);};const handleReset=()=>{if(!exerciseData)return;setConstructedSentence([]);setWordPool(shuffleArray(exerciseData.sentenceComponents.map((word,index)=>({word,id:index}))));setFeedback({message:'',type:''});setIsCorrect(false);setIsRevealed(false);};if(isLoading)return/*#__PURE__*/_jsx(\"p\",{children:t('loading.wordOrderExercise','Loading word order exercise...')});if(error)return/*#__PURE__*/_jsx(FeedbackDisplay,{message:error,type:\"error\"});if(!exerciseData&&!isLoading)return/*#__PURE__*/_jsx(FeedbackDisplay,{message:t('exercises.noData',\"No exercise data available.\"),type:\"info\"});const tileStyle={padding:'10px 15px',margin:'5px',border:'1px solid #ccc',borderRadius:'5px',cursor:'pointer',background:'#f0f0f0'};const slotAreaStyle={minHeight:'50px',border:'2px dashed #ddd',padding:'10px',marginBottom:'20px',display:'flex',flexWrap:'wrap',alignItems:'center'};return/*#__PURE__*/_jsxs(\"div\",{style:{textAlign:'center',padding:'20px',border:'1px solid #eee',borderRadius:'8px'},children:[/*#__PURE__*/_jsx(\"h3\",{children:t('titles.arrangeTheWords','Arrange the Words to Form a Sentence')}),/*#__PURE__*/_jsxs(\"div\",{style:_objectSpread(_objectSpread({},slotAreaStyle),{},{justifyContent:'flex-start',backgroundColor:'#e9ecef'}),children:[constructedSentence.map((item,index)=>/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleSlotClick(index),style:tileStyle,disabled:isRevealed||isCorrect,children:getLatinizedText(item.word,language)},\"slot-\".concat(item.id))),constructedSentence.length===0&&/*#__PURE__*/_jsx(\"span\",{style:{color:'#888'},children:t('labels.dropWordsHere','Click words from below to place them here')})]}),/*#__PURE__*/_jsxs(\"div\",{style:_objectSpread(_objectSpread({},slotAreaStyle),{},{justifyContent:'center',backgroundColor:'#fff'}),children:[wordPool.map(item=>/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleTileClick(item),style:tileStyle,disabled:isRevealed||isCorrect,children:getLatinizedText(item.word,language)},\"pool-\".concat(item.id))),wordPool.length===0&&constructedSentence.length>0&&/*#__PURE__*/_jsx(\"span\",{style:{color:'#888'},children:t('labels.allWordsPlaced','All words placed!')})]}),/*#__PURE__*/_jsx(FeedbackDisplay,{message:feedback.message,type:feedback.type,language:language}),/*#__PURE__*/_jsx(ExerciseControls,{onCheckAnswer:!isRevealed&&!isCorrect&&constructedSentence.length===exerciseData.sentenceComponents.length?checkAnswer:undefined,onShowHint:!isRevealed&&!isCorrect&&constructedSentence.length<exerciseData.sentenceComponents.length?showHint:undefined,onRevealAnswer:!isRevealed&&!isCorrect?revealTheAnswer:undefined,onNextExercise:setupNewExercise,config:{showCheck:!isRevealed&&!isCorrect&&constructedSentence.length===exerciseData.sentenceComponents.length,showHint:!isRevealed&&!isCorrect&&constructedSentence.length<exerciseData.sentenceComponents.length,showReveal:!isRevealed&&!isCorrect,showNext:true}}),/*#__PURE__*/_jsxs(\"button\",{onClick:handleReset,style:_objectSpread(_objectSpread({},tileStyle),{},{backgroundColor:'#6c757d',color:'white',marginTop:'10px'}),disabled:isRevealed||isCorrect,children:[\"\\uD83D\\uDD04 \",t('buttons.reset','Reset')]})]});};export default WordOrderExercise;","map":{"version":3,"names":["React","useState","useEffect","useCallback","loadVerbGrammarData","loadVocabularyData","processVerbData","generateGrammarExerciseSentence","setGrammarGeneratorTranslations","useLatinizationContext","useLatinization","shuffleArray","normalizeString","FeedbackDisplay","ExerciseControls","useI18n","useProgress","jsx","_jsx","jsxs","_jsxs","WordOrderExercise","_ref","language","days","exerciseKey","exerciseData","setExerciseData","wordPool","setWordPool","constructedSentence","setConstructedSentence","feedback","setFeedback","message","type","isLoading","setIsLoading","error","setError","isRevealed","setIsRevealed","isCorrect","setIsCorrect","isLatinized","getLatinizedText","t","allTranslations","progress","setupNewExercise","data","rawVerbItems","verbError","Error","vocabItems","vocabError","console","warn","length","processedVerbItems","sentenceDetails","correctSentence","components","sentenceComponents","replace","split","map","word","index","id","err","handleTileClick","tile","prev","filter","item","handleSlotClick","indexToRemove","tileToReturn","_","checkAnswer","userAnswerSentence","join","trim","correctAnswerSentence","itemId","concat","awardCorrectAnswer","awardIncorrectAnswer","showHint","nextCorrectWordIndex","nextCorrectWordObject","revealTheAnswer","scheduleReview","handleReset","children","tileStyle","padding","margin","border","borderRadius","cursor","background","slotAreaStyle","minHeight","marginBottom","display","flexWrap","alignItems","style","textAlign","_objectSpread","justifyContent","backgroundColor","onClick","disabled","color","onCheckAnswer","undefined","onShowHint","onRevealAnswer","onNextExercise","config","showCheck","showReveal","showNext","marginTop"],"sources":["/workspaces/COSYlanguagesproject/src/components/Freestyle/exercises/grammar/WordOrderExercise.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { loadVerbGrammarData, loadVocabularyData } from '../../../../utils/exerciseDataService';\r\nimport { processVerbData, generateGrammarExerciseSentence, setGrammarGeneratorTranslations } from '../../../../utils/grammarSentenceGenerator'; \r\nimport { useLatinizationContext } from '../../../../contexts/LatinizationContext';\r\nimport useLatinization from '../../../../hooks/useLatinization';\r\nimport { shuffleArray } from '../../../../utils/arrayUtils';\r\nimport { normalizeString } from '../../../../utils/stringUtils';\r\nimport FeedbackDisplay from '../../FeedbackDisplay';\r\nimport ExerciseControls from '../../ExerciseControls';\r\nimport { useI18n } from '../../../../i18n/I18nContext';\r\nimport { useProgress } from '../../../../contexts/ProgressContext'; // Import useProgress\r\n\r\nconst WordOrderExercise = ({ language, days, exerciseKey }) => {\r\n  const [exerciseData, setExerciseData] = useState(null); \r\n  const [wordPool, setWordPool] = useState([]); \r\n  const [constructedSentence, setConstructedSentence] = useState([]); \r\n  \r\n  const [feedback, setFeedback] = useState({ message: '', type: '' });\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [isRevealed, setIsRevealed] = useState(false);\r\n  const [isCorrect, setIsCorrect] = useState(false);\r\n\r\n  const { isLatinized } = useLatinizationContext();\r\n  const getLatinizedText = useLatinization;\r\n  const { t, allTranslations } = useI18n();\r\n  const progress = useProgress();\r\n\r\n  useEffect(() => {\r\n    if (allTranslations) {\r\n      setGrammarGeneratorTranslations(allTranslations);\r\n    }\r\n  }, [allTranslations]);\r\n\r\n  const setupNewExercise = useCallback(async () => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    setFeedback({ message: '', type: '' });\r\n    setExerciseData(null);\r\n    setWordPool([]);\r\n    setConstructedSentence([]);\r\n    setIsRevealed(false);\r\n    setIsCorrect(false);\r\n\r\n    try {\r\n      const { data: rawVerbItems, error: verbError } = await loadVerbGrammarData(language, days);\r\n      if (verbError) throw new Error(verbError.message || verbError.error || 'Failed to load verb grammar data.');\r\n      \r\n      const { data: vocabItems, error: vocabError } = await loadVocabularyData(language, days);\r\n      if (vocabError) console.warn(\"WordOrderExercise: Failed to load vocabulary data.\");\r\n\r\n      if (rawVerbItems && rawVerbItems.length > 0) {\r\n        const processedVerbItems = processVerbData(rawVerbItems, language);\r\n        if (!processedVerbItems || processedVerbItems.length === 0) {\r\n            setError(t('errors.noProcessableVerbData', 'No processable verb items found.'));\r\n            setIsLoading(false); return;\r\n        }\r\n        const sentenceDetails = await generateGrammarExerciseSentence(language, days, processedVerbItems, vocabItems || []);\r\n        \r\n        if (sentenceDetails && sentenceDetails.correctSentence) {\r\n          let components = sentenceDetails.sentenceComponents;\r\n          if (!components || components.length === 0) {\r\n            components = sentenceDetails.correctSentence.replace(/[.?]$/, \"\").split(' ');\r\n          }\r\n          setExerciseData({\r\n            correctSentence: sentenceDetails.correctSentence,\r\n            sentenceComponents: components\r\n          });\r\n          setWordPool(shuffleArray(components.map((word, index) => ({ word, id: index }))));\r\n        } else {\r\n          setError(t('errors.couldNotGenerateSentence', 'Could not generate a word order exercise sentence.'));\r\n        }\r\n      } else {\r\n        setError(t('errors.noVerbData', 'No verb grammar data found.'));\r\n      }\r\n    } catch (err) {\r\n      console.error(\"WordOrderExercise - Error setting up:\", err);\r\n      setError(err.message || t('errors.unexpectedError', 'An unexpected error occurred.'));\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [language, days, t]);\r\n\r\n  useEffect(() => {\r\n    if (language && days && days.length > 0) setupNewExercise();\r\n    else { setIsLoading(false); setError(t('errors.selectLangDay', \"Please select a language and day(s).\")); }\r\n  }, [setupNewExercise, exerciseKey, language, days, t]);\r\n\r\n  const handleTileClick = (tile) => {\r\n    if (isRevealed || isCorrect) return;\r\n    setConstructedSentence(prev => [...prev, tile]);\r\n    setWordPool(prev => prev.filter(item => item.id !== tile.id));\r\n    setFeedback({ message: '', type: '' });\r\n  };\r\n\r\n  const handleSlotClick = (indexToRemove) => {\r\n    if (isRevealed || isCorrect) return;\r\n    const tileToReturn = constructedSentence[indexToRemove];\r\n    setConstructedSentence(prev => prev.filter((_, index) => index !== indexToRemove));\r\n    setWordPool(prev => shuffleArray([...prev, tileToReturn])); \r\n    setFeedback({ message: '', type: '' });\r\n  };\r\n  \r\n  const checkAnswer = () => {\r\n    if (!exerciseData || isRevealed || isCorrect) return;\r\n    const userAnswerSentence = constructedSentence.map(item => item.word).join(' ').trim();\r\n    const correctAnswerSentence = exerciseData.correctSentence.replace(/[.?]$/, \"\").trim();\r\n    const itemId = `wordorder_${normalizeString(correctAnswerSentence)}`;\r\n\r\n    if (normalizeString(userAnswerSentence) === normalizeString(correctAnswerSentence)) {\r\n      setFeedback({ message: t('feedback.correct', 'Correct!'), type: 'correct' });\r\n      setIsCorrect(true);\r\n      progress.awardCorrectAnswer(itemId, 'grammar-wordorder');\r\n    } else {\r\n      setFeedback({ message: t('feedback.incorrectWordOrder', `Incorrect order. The correct sentence is: \"${getLatinizedText(exerciseData.correctSentence, language)}\"`, {correctSentence: getLatinizedText(exerciseData.correctSentence, language)}), type: 'incorrect' });\r\n      progress.awardIncorrectAnswer(itemId, 'grammar-wordorder');\r\n    }\r\n  };\r\n\r\n  const showHint = () => {\r\n    if (!exerciseData || isRevealed || isCorrect || constructedSentence.length >= exerciseData.sentenceComponents.length) return;\r\n    const nextCorrectWordIndex = constructedSentence.length;\r\n    const nextCorrectWordObject = exerciseData.sentenceComponents[nextCorrectWordIndex];\r\n    setFeedback({ message: t('feedback.hintWordOrder', `Hint: The next word is \"${getLatinizedText(nextCorrectWordObject, language)}\".`, {word: getLatinizedText(nextCorrectWordObject, language)}), type: 'hint' });\r\n  };\r\n\r\n  const revealTheAnswer = () => {\r\n    if (!exerciseData) return;\r\n    const correctAnswerSentence = exerciseData.correctSentence.replace(/[.?]$/, \"\").trim();\r\n    const itemId = `wordorder_${normalizeString(correctAnswerSentence)}`;\r\n    setConstructedSentence(exerciseData.sentenceComponents.map((word, index) => ({word, id: index})));\r\n    setWordPool([]);\r\n    setFeedback({ message: t('feedback.revealedWordOrder', `The correct order is: \"${getLatinizedText(exerciseData.correctSentence, language)}\"`, {correctSentence: getLatinizedText(exerciseData.correctSentence, language)}), type: 'info' });\r\n    setIsRevealed(true);\r\n    setIsCorrect(true);\r\n    progress.scheduleReview(itemId, 'grammar-wordorder', false);\r\n  };\r\n\r\n  const handleReset = () => {\r\n    if (!exerciseData) return;\r\n    setConstructedSentence([]);\r\n    setWordPool(shuffleArray(exerciseData.sentenceComponents.map((word, index) => ({ word, id: index }))));\r\n    setFeedback({ message: '', type: '' });\r\n    setIsCorrect(false);\r\n    setIsRevealed(false);\r\n  };\r\n\r\n  if (isLoading) return <p>{t('loading.wordOrderExercise', 'Loading word order exercise...')}</p>;\r\n  if (error) return <FeedbackDisplay message={error} type=\"error\" />;\r\n  if (!exerciseData && !isLoading) return <FeedbackDisplay message={t('exercises.noData', \"No exercise data available.\")} type=\"info\" />;\r\n\r\n  const tileStyle = { padding: '10px 15px', margin: '5px', border: '1px solid #ccc', borderRadius: '5px', cursor: 'pointer', background: '#f0f0f0'};\r\n  const slotAreaStyle = { minHeight: '50px', border: '2px dashed #ddd', padding: '10px', marginBottom: '20px', display: 'flex', flexWrap: 'wrap', alignItems: 'center' };\r\n\r\n  return (\r\n    <div style={{ textAlign: 'center', padding: '20px', border: '1px solid #eee', borderRadius: '8px' }}>\r\n      <h3>{t('titles.arrangeTheWords', 'Arrange the Words to Form a Sentence')}</h3>\r\n      \r\n      <div style={{...slotAreaStyle, justifyContent: 'flex-start', backgroundColor: '#e9ecef'}}>\r\n        {constructedSentence.map((item, index) => (\r\n          <button key={`slot-${item.id}`} onClick={() => handleSlotClick(index)} style={tileStyle} disabled={isRevealed || isCorrect}>\r\n            {getLatinizedText(item.word, language)}\r\n          </button>\r\n        ))}\r\n        {constructedSentence.length === 0 && <span style={{color: '#888'}}>{t('labels.dropWordsHere', 'Click words from below to place them here')}</span>}\r\n      </div>\r\n\r\n      <div style={{...slotAreaStyle, justifyContent: 'center', backgroundColor: '#fff'}}>\r\n        {wordPool.map(item => (\r\n          <button key={`pool-${item.id}`} onClick={() => handleTileClick(item)} style={tileStyle} disabled={isRevealed || isCorrect}>\r\n            {getLatinizedText(item.word, language)}\r\n          </button>\r\n        ))}\r\n        {wordPool.length === 0 && constructedSentence.length > 0 && <span style={{color: '#888'}}>{t('labels.allWordsPlaced', 'All words placed!')}</span>}\r\n      </div>\r\n      \r\n      <FeedbackDisplay message={feedback.message} type={feedback.type} language={language} />\r\n      \r\n      <ExerciseControls\r\n        onCheckAnswer={!isRevealed && !isCorrect && constructedSentence.length === exerciseData.sentenceComponents.length ? checkAnswer : undefined}\r\n        onShowHint={!isRevealed && !isCorrect && constructedSentence.length < exerciseData.sentenceComponents.length ? showHint : undefined}\r\n        onRevealAnswer={!isRevealed && !isCorrect ? revealTheAnswer : undefined}\r\n        onNextExercise={setupNewExercise}\r\n        config={{ \r\n            showCheck: !isRevealed && !isCorrect && constructedSentence.length === exerciseData.sentenceComponents.length, \r\n            showHint: !isRevealed && !isCorrect && constructedSentence.length < exerciseData.sentenceComponents.length, \r\n            showReveal: !isRevealed && !isCorrect,\r\n            showNext: true,\r\n        }}\r\n      />\r\n      <button onClick={handleReset} style={{...tileStyle, backgroundColor: '#6c757d', color: 'white', marginTop:'10px'}} disabled={isRevealed || isCorrect}>\r\n        🔄 {t('buttons.reset', 'Reset')}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WordOrderExercise;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}