{"ast":null,"code":"// Defines API functions related to fetching plan data (STATIC VERSION).\n/**\r\n * Fetches the user's plan data from a local mock JSON file.\r\n * @param {string} token - The authentication token (unused in static version).\r\n * @returns {Promise<object>} A promise that resolves to the plan data.\r\n * @throws {Error} If fetching or parsing the mock data fails.\r\n */export async function fetchPlan(token){// The token is no longer used to fetch, but kept for compatibility with PlanContext\nconsole.log('Fetching static plan data. Token (unused):',token);try{// In a React app created with Create React App, files in `public`\n// are served at the root. So, `public/data/mockPlanData.json`\n// can be fetched from `/data/mockPlanData.json`.\n// For gh-pages, if `homepage` is `https://user.github.io/repo/`, \n// then `%PUBLIC_URL%` becomes `/repo/`.\n// So the path should be `${process.env.PUBLIC_URL}/data/mockPlanData.json`\nconst response=await fetch(\"\".concat(process.env.PUBLIC_URL,\"/data/mockPlanData.json\"));if(!response.ok){throw new Error(\"Failed to fetch static plan data. Status: \".concat(response.status));}const data=await response.json();return data;}catch(error){console.error('Error fetching static plan data:',error);// Fallback to a very basic plan structure in case of error,\n// or rethrow the error if preferred.\n// This ensures the app doesn't completely break if the JSON is missing/malformed.\n// throw error; // Option to rethrow\nreturn{days:[{id:'error_day',title:'Error Loading Plan',sections:[]}],studySets:[{id:'error_set',name:'Error Loading Sets',itemCount:0}]};}}// Future API functions related to plans can be added here if they also use static data.\n// For example:\n// export async function updatePlanSection(sectionId, sectionData) { ... }","map":{"version":3,"names":["fetchPlan","token","console","log","response","fetch","concat","process","env","PUBLIC_URL","ok","Error","status","data","json","error","days","id","title","sections","studySets","name","itemCount"],"sources":["/workspaces/COSYlanguagesproject/src/api/plan.js"],"sourcesContent":["// Defines API functions related to fetching plan data (STATIC VERSION).\r\n\r\n/**\r\n * Fetches the user's plan data from a local mock JSON file.\r\n * @param {string} token - The authentication token (unused in static version).\r\n * @returns {Promise<object>} A promise that resolves to the plan data.\r\n * @throws {Error} If fetching or parsing the mock data fails.\r\n */\r\nexport async function fetchPlan(token) {\r\n    // The token is no longer used to fetch, but kept for compatibility with PlanContext\r\n    console.log('Fetching static plan data. Token (unused):', token); \r\n    try {\r\n        // In a React app created with Create React App, files in `public`\r\n        // are served at the root. So, `public/data/mockPlanData.json`\r\n        // can be fetched from `/data/mockPlanData.json`.\r\n        // For gh-pages, if `homepage` is `https://user.github.io/repo/`, \r\n        // then `%PUBLIC_URL%` becomes `/repo/`.\r\n        // So the path should be `${process.env.PUBLIC_URL}/data/mockPlanData.json`\r\n        const response = await fetch(`${process.env.PUBLIC_URL}/data/mockPlanData.json`);\r\n        if (!response.ok) {\r\n            throw new Error(`Failed to fetch static plan data. Status: ${response.status}`);\r\n        }\r\n        const data = await response.json();\r\n        return data;\r\n    } catch (error) {\r\n        console.error('Error fetching static plan data:', error);\r\n        // Fallback to a very basic plan structure in case of error,\r\n        // or rethrow the error if preferred.\r\n        // This ensures the app doesn't completely break if the JSON is missing/malformed.\r\n        // throw error; // Option to rethrow\r\n        return {\r\n            days: [{id: 'error_day', title: 'Error Loading Plan', sections: []}],\r\n            studySets: [{id: 'error_set', name: 'Error Loading Sets', itemCount: 0}]\r\n        };\r\n    }\r\n}\r\n\r\n// Future API functions related to plans can be added here if they also use static data.\r\n// For example:\r\n// export async function updatePlanSection(sectionId, sectionData) { ... }\r\n"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,eAAe,CAAAA,SAASA,CAACC,KAAK,CAAE,CACnC;AACAC,OAAO,CAACC,GAAG,CAAC,4CAA4C,CAAEF,KAAK,CAAC,CAChE,GAAI,CACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAM,CAAAG,QAAQ,CAAG,KAAM,CAAAC,KAAK,IAAAC,MAAA,CAAIC,OAAO,CAACC,GAAG,CAACC,UAAU,2BAAyB,CAAC,CAChF,GAAI,CAACL,QAAQ,CAACM,EAAE,CAAE,CACd,KAAM,IAAI,CAAAC,KAAK,8CAAAL,MAAA,CAA8CF,QAAQ,CAACQ,MAAM,CAAE,CAAC,CACnF,CACA,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAT,QAAQ,CAACU,IAAI,CAAC,CAAC,CAClC,MAAO,CAAAD,IAAI,CACf,CAAE,MAAOE,KAAK,CAAE,CACZb,OAAO,CAACa,KAAK,CAAC,kCAAkC,CAAEA,KAAK,CAAC,CACxD;AACA;AACA;AACA;AACA,MAAO,CACHC,IAAI,CAAE,CAAC,CAACC,EAAE,CAAE,WAAW,CAAEC,KAAK,CAAE,oBAAoB,CAAEC,QAAQ,CAAE,EAAE,CAAC,CAAC,CACpEC,SAAS,CAAE,CAAC,CAACH,EAAE,CAAE,WAAW,CAAEI,IAAI,CAAE,oBAAoB,CAAEC,SAAS,CAAE,CAAC,CAAC,CAC3E,CAAC,CACL,CACJ,CAEA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}