{"ast":null,"code":"// Defines API functions related to fetching plan data.\nconst BASE_URL='http://localhost:3001/api';// Define the base URL for the API\n/**\r\n * Fetches the user's plan data from the backend.\r\n * @param {string} token - The authentication token for the user.\r\n * @returns {Promise<object>} A promise that resolves to the plan data.\r\n * @throws {Error} If the network response is not ok.\r\n */export async function fetchPlan(token){const res=await fetch(\"\".concat(BASE_URL,\"/plan\"),{// Use BASE_URL\nheaders:{'Authorization':\"Bearer \".concat(token),'Content-Type':'application/json'// Good practice to include Content-Type\n}});if(!res.ok){// Attempt to parse error message from backend if available\nconst errorData=await res.json().catch(()=>({message:'Failed to fetch plan and error response is not valid JSON'}));throw new Error(errorData.message||\"Failed to fetch plan. Status: \".concat(res.status));}return await res.json();}// Future API functions related to plans can be added here.\n// For example:\n// export async function updatePlanSection(token, sectionId, sectionData) { ... }","map":{"version":3,"names":["BASE_URL","fetchPlan","token","res","fetch","concat","headers","ok","errorData","json","catch","message","Error","status"],"sources":["/workspaces/COSYlanguagesproject/src/api/plan.js"],"sourcesContent":["// Defines API functions related to fetching plan data.\r\n\r\nconst BASE_URL = 'http://localhost:3001/api'; // Define the base URL for the API\r\n\r\n/**\r\n * Fetches the user's plan data from the backend.\r\n * @param {string} token - The authentication token for the user.\r\n * @returns {Promise<object>} A promise that resolves to the plan data.\r\n * @throws {Error} If the network response is not ok.\r\n */\r\nexport async function fetchPlan(token) {\r\n    const res = await fetch(`${BASE_URL}/plan`, { // Use BASE_URL\r\n        headers: { \r\n            'Authorization': `Bearer ${token}`,\r\n            'Content-Type': 'application/json' // Good practice to include Content-Type\r\n        }\r\n    });\r\n    if (!res.ok) {\r\n        // Attempt to parse error message from backend if available\r\n        const errorData = await res.json().catch(() => ({ message: 'Failed to fetch plan and error response is not valid JSON' }));\r\n        throw new Error(errorData.message || `Failed to fetch plan. Status: ${res.status}`);\r\n    }\r\n    return await res.json();\r\n}\r\n\r\n// Future API functions related to plans can be added here.\r\n// For example:\r\n// export async function updatePlanSection(token, sectionId, sectionData) { ... }\r\n"],"mappings":"AAAA;AAEA,KAAM,CAAAA,QAAQ,CAAG,2BAA2B,CAAE;AAE9C;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,eAAe,CAAAC,SAASA,CAACC,KAAK,CAAE,CACnC,KAAM,CAAAC,GAAG,CAAG,KAAM,CAAAC,KAAK,IAAAC,MAAA,CAAIL,QAAQ,UAAS,CAAE;AAC1CM,OAAO,CAAE,CACL,eAAe,WAAAD,MAAA,CAAYH,KAAK,CAAE,CAClC,cAAc,CAAE,kBAAmB;AACvC,CACJ,CAAC,CAAC,CACF,GAAI,CAACC,GAAG,CAACI,EAAE,CAAE,CACT;AACA,KAAM,CAAAC,SAAS,CAAG,KAAM,CAAAL,GAAG,CAACM,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,KAAO,CAAEC,OAAO,CAAE,2DAA4D,CAAC,CAAC,CAAC,CAC1H,KAAM,IAAI,CAAAC,KAAK,CAACJ,SAAS,CAACG,OAAO,mCAAAN,MAAA,CAAqCF,GAAG,CAACU,MAAM,CAAE,CAAC,CACvF,CACA,MAAO,MAAM,CAAAV,GAAG,CAACM,IAAI,CAAC,CAAC,CAC3B,CAEA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}