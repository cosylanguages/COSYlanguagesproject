{"ast":null,"code":"var _jsxFileName = \"/workspaces/COSYlanguagesproject/src/components/Common/ToggleLatinizationButton.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useLatinizationContext } from '../../contexts/LatinizationContext';\nimport { useI18n } from '../../i18n/I18nContext'; // Assuming useI18n provides 't' function\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ToggleLatinizationButton = ({\n  currentDisplayLanguage\n}) => {\n  _s();\n  const {\n    isLatinized,\n    toggleLatinization,\n    latinizableLanguageIds\n  } = useLatinizationContext();\n  const {\n    t\n  } = useI18n(); // For button text localization\n\n  // Determine if the button should be visible\n  // Based on whether the currentDisplayLanguage (passed as prop) is in the latinizable list\n  const isCurrentLanguageLatinizable = latinizableLanguageIds.some(id => currentDisplayLanguage && (currentDisplayLanguage.toLowerCase().includes(id.toLowerCase()) || id === 'ΚΟΖΥελληνικά' && currentDisplayLanguage.toLowerCase().includes('greek') || id === 'ТАКОЙрусский' && currentDisplayLanguage.toLowerCase().includes('russian') || id === 'ԾՈՍՅհայկական' && currentDisplayLanguage.toLowerCase().includes('armenian')));\n  if (!isCurrentLanguageLatinizable) {\n    return null; // Don't render the button if the current language isn't latinizable\n  }\n  const buttonText = isLatinized ? t('buttons.showOriginal', 'Show Original') : t('buttons.showLatin', 'Show Latin');\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: toggleLatinization,\n    style: {\n      padding: '5px 10px',\n      fontSize: '0.9rem',\n      cursor: 'pointer',\n      backgroundColor: '#6c757d',\n      color: 'white',\n      border: '1px solid #5a6268',\n      borderRadius: '4px',\n      marginLeft: '10px' // Example styling\n    },\n    title: isLatinized ? t('tooltips.showOriginalScript', 'Show text in its original script') : t('tooltips.showLatinScript', 'Show text in Latin script (transliterated)'),\n    children: buttonText\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n_s(ToggleLatinizationButton, \"1BKeWLM0DEcQsI3OYSDDCfbEyPE=\", false, function () {\n  return [useLatinizationContext, useI18n];\n});\n_c = ToggleLatinizationButton;\nexport default ToggleLatinizationButton;\nvar _c;\n$RefreshReg$(_c, \"ToggleLatinizationButton\");","map":{"version":3,"names":["React","useLatinizationContext","useI18n","jsxDEV","_jsxDEV","ToggleLatinizationButton","currentDisplayLanguage","_s","isLatinized","toggleLatinization","latinizableLanguageIds","t","isCurrentLanguageLatinizable","some","id","toLowerCase","includes","buttonText","onClick","style","padding","fontSize","cursor","backgroundColor","color","border","borderRadius","marginLeft","title","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/workspaces/COSYlanguagesproject/src/components/Common/ToggleLatinizationButton.js"],"sourcesContent":["import React from 'react';\r\nimport { useLatinizationContext } from '../../contexts/LatinizationContext';\r\nimport { useI18n } from '../../i18n/I18nContext'; // Assuming useI18n provides 't' function\r\n\r\nconst ToggleLatinizationButton = ({ currentDisplayLanguage }) => {\r\n  const { isLatinized, toggleLatinization, latinizableLanguageIds } = useLatinizationContext();\r\n  const { t } = useI18n(); // For button text localization\r\n\r\n  // Determine if the button should be visible\r\n  // Based on whether the currentDisplayLanguage (passed as prop) is in the latinizable list\r\n  const isCurrentLanguageLatinizable = latinizableLanguageIds.some(id =>\r\n    currentDisplayLanguage && (\r\n      currentDisplayLanguage.toLowerCase().includes(id.toLowerCase()) ||\r\n      (id === 'ΚΟΖΥελληνικά' && currentDisplayLanguage.toLowerCase().includes('greek')) ||\r\n      (id === 'ТАКОЙрусский' && currentDisplayLanguage.toLowerCase().includes('russian')) ||\r\n      (id === 'ԾՈՍՅհայկական' && currentDisplayLanguage.toLowerCase().includes('armenian'))\r\n    )\r\n  );\r\n\r\n  if (!isCurrentLanguageLatinizable) {\r\n    return null; // Don't render the button if the current language isn't latinizable\r\n  }\r\n\r\n  const buttonText = isLatinized \r\n    ? (t('buttons.showOriginal', 'Show Original')) \r\n    : (t('buttons.showLatin', 'Show Latin'));\r\n\r\n  return (\r\n    <button\r\n      onClick={toggleLatinization}\r\n      style={{\r\n        padding: '5px 10px',\r\n        fontSize: '0.9rem',\r\n        cursor: 'pointer',\r\n        backgroundColor: '#6c757d',\r\n        color: 'white',\r\n        border: '1px solid #5a6268',\r\n        borderRadius: '4px',\r\n        marginLeft: '10px', // Example styling\r\n      }}\r\n      title={isLatinized ? t('tooltips.showOriginalScript', 'Show text in its original script') : t('tooltips.showLatinScript', 'Show text in Latin script (transliterated)')}\r\n    >\r\n      {buttonText}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default ToggleLatinizationButton;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,sBAAsB,QAAQ,oCAAoC;AAC3E,SAASC,OAAO,QAAQ,wBAAwB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAElD,MAAMC,wBAAwB,GAAGA,CAAC;EAAEC;AAAuB,CAAC,KAAK;EAAAC,EAAA;EAC/D,MAAM;IAAEC,WAAW;IAAEC,kBAAkB;IAAEC;EAAuB,CAAC,GAAGT,sBAAsB,CAAC,CAAC;EAC5F,MAAM;IAAEU;EAAE,CAAC,GAAGT,OAAO,CAAC,CAAC,CAAC,CAAC;;EAEzB;EACA;EACA,MAAMU,4BAA4B,GAAGF,sBAAsB,CAACG,IAAI,CAACC,EAAE,IACjER,sBAAsB,KACpBA,sBAAsB,CAACS,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACF,EAAE,CAACC,WAAW,CAAC,CAAC,CAAC,IAC9DD,EAAE,KAAK,cAAc,IAAIR,sBAAsB,CAACS,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,OAAO,CAAE,IAChFF,EAAE,KAAK,cAAc,IAAIR,sBAAsB,CAACS,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,SAAS,CAAE,IAClFF,EAAE,KAAK,cAAc,IAAIR,sBAAsB,CAACS,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,UAAU,CAAE,CAExF,CAAC;EAED,IAAI,CAACJ,4BAA4B,EAAE;IACjC,OAAO,IAAI,CAAC,CAAC;EACf;EAEA,MAAMK,UAAU,GAAGT,WAAW,GACzBG,CAAC,CAAC,sBAAsB,EAAE,eAAe,CAAC,GAC1CA,CAAC,CAAC,mBAAmB,EAAE,YAAY,CAAE;EAE1C,oBACEP,OAAA;IACEc,OAAO,EAAET,kBAAmB;IAC5BU,KAAK,EAAE;MACLC,OAAO,EAAE,UAAU;MACnBC,QAAQ,EAAE,QAAQ;MAClBC,MAAM,EAAE,SAAS;MACjBC,eAAe,EAAE,SAAS;MAC1BC,KAAK,EAAE,OAAO;MACdC,MAAM,EAAE,mBAAmB;MAC3BC,YAAY,EAAE,KAAK;MACnBC,UAAU,EAAE,MAAM,CAAE;IACtB,CAAE;IACFC,KAAK,EAAEpB,WAAW,GAAGG,CAAC,CAAC,6BAA6B,EAAE,kCAAkC,CAAC,GAAGA,CAAC,CAAC,0BAA0B,EAAE,4CAA4C,CAAE;IAAAkB,QAAA,EAEvKZ;EAAU;IAAAa,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEb,CAAC;AAAC1B,EAAA,CAzCIF,wBAAwB;EAAA,QACwCJ,sBAAsB,EAC5EC,OAAO;AAAA;AAAAgC,EAAA,GAFjB7B,wBAAwB;AA2C9B,eAAeA,wBAAwB;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}