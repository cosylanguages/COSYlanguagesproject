{"ast":null,"code":"import React from'react';import{useLatinizationContext}from'../../contexts/LatinizationContext';import{useI18n}from'../../i18n/I18nContext';// Assuming useI18n provides 't' function\nimport{jsx as _jsx}from\"react/jsx-runtime\";const ToggleLatinizationButton=_ref=>{let{currentDisplayLanguage}=_ref;const{isLatinized,toggleLatinization,latinizableLanguageIds}=useLatinizationContext();const{t}=useI18n();// For button text localization\n// Determine if the button should be visible\n// Based on whether the currentDisplayLanguage (passed as prop) is in the latinizable list\nconst isCurrentLanguageLatinizable=latinizableLanguageIds.some(id=>currentDisplayLanguage&&(currentDisplayLanguage.toLowerCase().includes(id.toLowerCase())||id==='ΚΟΖΥελληνικά'&&currentDisplayLanguage.toLowerCase().includes('greek')||id==='ТАКОЙрусский'&&currentDisplayLanguage.toLowerCase().includes('russian')||id==='ԾՈՍՅհայկական'&&currentDisplayLanguage.toLowerCase().includes('armenian')));if(!isCurrentLanguageLatinizable){return null;// Don't render the button if the current language isn't latinizable\n}const buttonText=isLatinized?t('buttons.showOriginal','Show Original'):t('buttons.showLatin','Show Latin');return/*#__PURE__*/_jsx(\"button\",{onClick:toggleLatinization,style:{padding:'5px 10px',fontSize:'0.9rem',cursor:'pointer',backgroundColor:'#6c757d',color:'white',border:'1px solid #5a6268',borderRadius:'4px',marginLeft:'10px'// Example styling\n},title:isLatinized?t('tooltips.showOriginalScript','Show text in its original script'):t('tooltips.showLatinScript','Show text in Latin script (transliterated)'),children:buttonText});};export default ToggleLatinizationButton;","map":{"version":3,"names":["React","useLatinizationContext","useI18n","jsx","_jsx","ToggleLatinizationButton","_ref","currentDisplayLanguage","isLatinized","toggleLatinization","latinizableLanguageIds","t","isCurrentLanguageLatinizable","some","id","toLowerCase","includes","buttonText","onClick","style","padding","fontSize","cursor","backgroundColor","color","border","borderRadius","marginLeft","title","children"],"sources":["/workspaces/COSYlanguagesproject/src/components/Common/ToggleLatinizationButton.js"],"sourcesContent":["import React from 'react';\r\nimport { useLatinizationContext } from '../../contexts/LatinizationContext';\r\nimport { useI18n } from '../../i18n/I18nContext'; // Assuming useI18n provides 't' function\r\n\r\nconst ToggleLatinizationButton = ({ currentDisplayLanguage }) => {\r\n  const { isLatinized, toggleLatinization, latinizableLanguageIds } = useLatinizationContext();\r\n  const { t } = useI18n(); // For button text localization\r\n\r\n  // Determine if the button should be visible\r\n  // Based on whether the currentDisplayLanguage (passed as prop) is in the latinizable list\r\n  const isCurrentLanguageLatinizable = latinizableLanguageIds.some(id =>\r\n    currentDisplayLanguage && (\r\n      currentDisplayLanguage.toLowerCase().includes(id.toLowerCase()) ||\r\n      (id === 'ΚΟΖΥελληνικά' && currentDisplayLanguage.toLowerCase().includes('greek')) ||\r\n      (id === 'ТАКОЙрусский' && currentDisplayLanguage.toLowerCase().includes('russian')) ||\r\n      (id === 'ԾՈՍՅհայկական' && currentDisplayLanguage.toLowerCase().includes('armenian'))\r\n    )\r\n  );\r\n\r\n  if (!isCurrentLanguageLatinizable) {\r\n    return null; // Don't render the button if the current language isn't latinizable\r\n  }\r\n\r\n  const buttonText = isLatinized \r\n    ? (t('buttons.showOriginal', 'Show Original')) \r\n    : (t('buttons.showLatin', 'Show Latin'));\r\n\r\n  return (\r\n    <button\r\n      onClick={toggleLatinization}\r\n      style={{\r\n        padding: '5px 10px',\r\n        fontSize: '0.9rem',\r\n        cursor: 'pointer',\r\n        backgroundColor: '#6c757d',\r\n        color: 'white',\r\n        border: '1px solid #5a6268',\r\n        borderRadius: '4px',\r\n        marginLeft: '10px', // Example styling\r\n      }}\r\n      title={isLatinized ? t('tooltips.showOriginalScript', 'Show text in its original script') : t('tooltips.showLatinScript', 'Show text in Latin script (transliterated)')}\r\n    >\r\n      {buttonText}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default ToggleLatinizationButton;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAASC,sBAAsB,KAAQ,oCAAoC,CAC3E,OAASC,OAAO,KAAQ,wBAAwB,CAAE;AAAA,OAAAC,GAAA,IAAAC,IAAA,yBAElD,KAAM,CAAAC,wBAAwB,CAAGC,IAAA,EAAgC,IAA/B,CAAEC,sBAAuB,CAAC,CAAAD,IAAA,CAC1D,KAAM,CAAEE,WAAW,CAAEC,kBAAkB,CAAEC,sBAAuB,CAAC,CAAGT,sBAAsB,CAAC,CAAC,CAC5F,KAAM,CAAEU,CAAE,CAAC,CAAGT,OAAO,CAAC,CAAC,CAAE;AAEzB;AACA;AACA,KAAM,CAAAU,4BAA4B,CAAGF,sBAAsB,CAACG,IAAI,CAACC,EAAE,EACjEP,sBAAsB,GACpBA,sBAAsB,CAACQ,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACF,EAAE,CAACC,WAAW,CAAC,CAAC,CAAC,EAC9DD,EAAE,GAAK,cAAc,EAAIP,sBAAsB,CAACQ,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,OAAO,CAAE,EAChFF,EAAE,GAAK,cAAc,EAAIP,sBAAsB,CAACQ,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,SAAS,CAAE,EAClFF,EAAE,GAAK,cAAc,EAAIP,sBAAsB,CAACQ,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,UAAU,CAAE,CAExF,CAAC,CAED,GAAI,CAACJ,4BAA4B,CAAE,CACjC,MAAO,KAAI,CAAE;AACf,CAEA,KAAM,CAAAK,UAAU,CAAGT,WAAW,CACzBG,CAAC,CAAC,sBAAsB,CAAE,eAAe,CAAC,CAC1CA,CAAC,CAAC,mBAAmB,CAAE,YAAY,CAAE,CAE1C,mBACEP,IAAA,WACEc,OAAO,CAAET,kBAAmB,CAC5BU,KAAK,CAAE,CACLC,OAAO,CAAE,UAAU,CACnBC,QAAQ,CAAE,QAAQ,CAClBC,MAAM,CAAE,SAAS,CACjBC,eAAe,CAAE,SAAS,CAC1BC,KAAK,CAAE,OAAO,CACdC,MAAM,CAAE,mBAAmB,CAC3BC,YAAY,CAAE,KAAK,CACnBC,UAAU,CAAE,MAAQ;AACtB,CAAE,CACFC,KAAK,CAAEpB,WAAW,CAAGG,CAAC,CAAC,6BAA6B,CAAE,kCAAkC,CAAC,CAAGA,CAAC,CAAC,0BAA0B,CAAE,4CAA4C,CAAE,CAAAkB,QAAA,CAEvKZ,UAAU,CACL,CAAC,CAEb,CAAC,CAED,cAAe,CAAAZ,wBAAwB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}