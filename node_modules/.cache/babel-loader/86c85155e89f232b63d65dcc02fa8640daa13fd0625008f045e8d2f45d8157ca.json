{"ast":null,"code":"var _jsxFileName = \"/workspaces/COSYlanguagesproject/src/components/LanguageSelector/LanguageSelector.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useI18n } from '../../i18n/I18nContext'; // Adjust path as needed\nimport './LanguageSelector.css'; // For styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LanguageSelector = () => {\n  _s();\n  const {\n    language,\n    changeLanguage,\n    allTranslations\n  } = useI18n();\n  const availableLanguages = Object.keys(allTranslations).map(langKey => {\n    var _allTranslations$lang, _allTranslations$lang2;\n    // Extract a more user-friendly name if possible, otherwise use the key\n    let name = ((_allTranslations$lang = allTranslations[langKey]) === null || _allTranslations$lang === void 0 ? void 0 : _allTranslations$lang.languageNameInEnglish) || langKey.replace('COSY', '').replace('ТАКОЙ', ''); // Basic cleanup\n    if (langKey === 'ΚΟΖΥελληνικά') name = 'Greek'; // Specific override if needed\n    else if (langKey === 'ТАКОЙрусский') name = 'Russian';else if (langKey === 'ԾՈՍՅհայկական') name = 'Armenian';\n\n    // Attempt to get native name if available in translations\n    const nativeName = (_allTranslations$lang2 = allTranslations[langKey]) === null || _allTranslations$lang2 === void 0 ? void 0 : _allTranslations$lang2.languageNameNative;\n    if (nativeName) {\n      name = `${nativeName} (${name})`;\n    }\n    return {\n      key: langKey,\n      name: name\n    };\n  });\n  const handleChange = event => {\n    changeLanguage(event.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"language-selector-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"language-select\",\n      className: \"language-select-label\",\n      children: \"\\uD83C\\uDF0E: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      id: \"language-select\",\n      value: language,\n      onChange: handleChange,\n      className: \"language-select-dropdown\",\n      children: availableLanguages.map(lang => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: lang.key,\n        children: lang.name\n      }, lang.key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n};\n_s(LanguageSelector, \"I1o+UZcjw1OuON7rDxupKrL7WBs=\", false, function () {\n  return [useI18n];\n});\n_c = LanguageSelector;\nexport default LanguageSelector;\nvar _c;\n$RefreshReg$(_c, \"LanguageSelector\");","map":{"version":3,"names":["React","useI18n","jsxDEV","_jsxDEV","LanguageSelector","_s","language","changeLanguage","allTranslations","availableLanguages","Object","keys","map","langKey","_allTranslations$lang","_allTranslations$lang2","name","languageNameInEnglish","replace","nativeName","languageNameNative","key","handleChange","event","target","value","className","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","id","onChange","lang","_c","$RefreshReg$"],"sources":["/workspaces/COSYlanguagesproject/src/components/LanguageSelector/LanguageSelector.js"],"sourcesContent":["import React from 'react';\r\nimport { useI18n } from '../../i18n/I18nContext'; // Adjust path as needed\r\nimport './LanguageSelector.css'; // For styling\r\n\r\nconst LanguageSelector = () => {\r\n    const { language, changeLanguage, allTranslations } = useI18n();\r\n\r\n    const availableLanguages = Object.keys(allTranslations).map(langKey => {\r\n        // Extract a more user-friendly name if possible, otherwise use the key\r\n        let name = allTranslations[langKey]?.languageNameInEnglish || \r\n                   langKey.replace('COSY', '').replace('ТАКОЙ', ''); // Basic cleanup\r\n        if (langKey === 'ΚΟΖΥελληνικά') name = 'Greek'; // Specific override if needed\r\n        else if (langKey === 'ТАКОЙрусский') name = 'Russian';\r\n        else if (langKey === 'ԾՈՍՅհայկական') name = 'Armenian';\r\n        \r\n        // Attempt to get native name if available in translations\r\n        const nativeName = allTranslations[langKey]?.languageNameNative;\r\n        if (nativeName) {\r\n            name = `${nativeName} (${name})`;\r\n        }\r\n\r\n        return { key: langKey, name: name };\r\n    });\r\n\r\n    const handleChange = (event) => {\r\n        changeLanguage(event.target.value);\r\n    };\r\n\r\n    return (\r\n        <div className=\"language-selector-container\">\r\n            <label htmlFor=\"language-select\" className=\"language-select-label\">\r\n                🌎: {/* Simple emoji label, could be translated too */}\r\n            </label>\r\n            <select id=\"language-select\" value={language} onChange={handleChange} className=\"language-select-dropdown\">\r\n                {availableLanguages.map(lang => (\r\n                    <option key={lang.key} value={lang.key}>\r\n                        {lang.name}\r\n                    </option>\r\n                ))}\r\n            </select>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LanguageSelector;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,QAAQ,wBAAwB,CAAC,CAAC;AAClD,OAAO,wBAAwB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEjC,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM;IAAEC,QAAQ;IAAEC,cAAc;IAAEC;EAAgB,CAAC,GAAGP,OAAO,CAAC,CAAC;EAE/D,MAAMQ,kBAAkB,GAAGC,MAAM,CAACC,IAAI,CAACH,eAAe,CAAC,CAACI,GAAG,CAACC,OAAO,IAAI;IAAA,IAAAC,qBAAA,EAAAC,sBAAA;IACnE;IACA,IAAIC,IAAI,GAAG,EAAAF,qBAAA,GAAAN,eAAe,CAACK,OAAO,CAAC,cAAAC,qBAAA,uBAAxBA,qBAAA,CAA0BG,qBAAqB,KAC/CJ,OAAO,CAACK,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC;IAC7D,IAAIL,OAAO,KAAK,cAAc,EAAEG,IAAI,GAAG,OAAO,CAAC,CAAC;IAAA,KAC3C,IAAIH,OAAO,KAAK,cAAc,EAAEG,IAAI,GAAG,SAAS,CAAC,KACjD,IAAIH,OAAO,KAAK,cAAc,EAAEG,IAAI,GAAG,UAAU;;IAEtD;IACA,MAAMG,UAAU,IAAAJ,sBAAA,GAAGP,eAAe,CAACK,OAAO,CAAC,cAAAE,sBAAA,uBAAxBA,sBAAA,CAA0BK,kBAAkB;IAC/D,IAAID,UAAU,EAAE;MACZH,IAAI,GAAG,GAAGG,UAAU,KAAKH,IAAI,GAAG;IACpC;IAEA,OAAO;MAAEK,GAAG,EAAER,OAAO;MAAEG,IAAI,EAAEA;IAAK,CAAC;EACvC,CAAC,CAAC;EAEF,MAAMM,YAAY,GAAIC,KAAK,IAAK;IAC5BhB,cAAc,CAACgB,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EACtC,CAAC;EAED,oBACItB,OAAA;IAAKuB,SAAS,EAAC,6BAA6B;IAAAC,QAAA,gBACxCxB,OAAA;MAAOyB,OAAO,EAAC,iBAAiB;MAACF,SAAS,EAAC,uBAAuB;MAAAC,QAAA,EAAC;IAC3D;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,eACR7B,OAAA;MAAQ8B,EAAE,EAAC,iBAAiB;MAACR,KAAK,EAAEnB,QAAS;MAAC4B,QAAQ,EAAEZ,YAAa;MAACI,SAAS,EAAC,0BAA0B;MAAAC,QAAA,EACrGlB,kBAAkB,CAACG,GAAG,CAACuB,IAAI,iBACxBhC,OAAA;QAAuBsB,KAAK,EAAEU,IAAI,CAACd,GAAI;QAAAM,QAAA,EAClCQ,IAAI,CAACnB;MAAI,GADDmB,IAAI,CAACd,GAAG;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEb,CACX;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACR,CAAC;AAEd,CAAC;AAAC3B,EAAA,CAtCID,gBAAgB;EAAA,QACoCH,OAAO;AAAA;AAAAmC,EAAA,GAD3DhC,gBAAgB;AAwCtB,eAAeA,gBAAgB;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}