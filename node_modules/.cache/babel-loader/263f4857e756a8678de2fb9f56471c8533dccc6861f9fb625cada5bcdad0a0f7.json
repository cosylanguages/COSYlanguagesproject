{"ast":null,"code":"var _jsxFileName = \"/workspaces/COSYlanguagesproject/src/components/Freestyle/exercises/writing/WritingQuestionExercise.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { loadSpeakingPromptsData } from '../../../../utils/exerciseDataService'; // Reusing speaking prompts\nimport { useLatinizationContext } from '../../../../contexts/LatinizationContext';\nimport useLatinization from '../../../../hooks/useLatinization';\nimport { shuffleArray } from '../../../../utils/arrayUtils';\nimport FeedbackDisplay from '../../FeedbackDisplay';\nimport ExerciseControls from '../../ExerciseControls';\nimport { useI18n } from '../../../../i18n/I18nContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WritingQuestionExercise = ({\n  language,\n  days,\n  exerciseKey\n}) => {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [writtenAnswer, setWrittenAnswer] = useState('');\n  const [feedback, setFeedback] = useState({\n    message: '',\n    type: ''\n  });\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const {\n    isLatinized\n  } = useLatinizationContext();\n  const getLatinizedText = useLatinization;\n  const {\n    t\n  } = useI18n();\n  const fetchQuestionsForWriting = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    setQuestions([]);\n    setCurrentQuestionIndex(0);\n    setWrittenAnswer('');\n    setFeedback({\n      message: '',\n      type: ''\n    });\n    try {\n      const {\n        data,\n        error: fetchError\n      } = await loadSpeakingPromptsData(language, days);\n      if (fetchError) {\n        throw new Error(fetchError.message || fetchError.error || 'Failed to load questions.');\n      }\n      if (data && data.length > 0) {\n        setQuestions(shuffleArray(data));\n      } else {\n        setError(t('exercises.noWritingQuestions', 'No questions found for writing practice for the selected criteria.'));\n      }\n    } catch (err) {\n      console.error(\"WritingQuestionExercise - Error fetching questions:\", err);\n      setError(err.message || t('errors.unexpectedError', 'An unexpected error occurred.'));\n    } finally {\n      setIsLoading(false);\n    }\n  }, [language, days, t]);\n  useEffect(() => {\n    if (language && days && days.length > 0) {\n      fetchQuestionsForWriting();\n    } else {\n      setIsLoading(false);\n      setError(t('errors.selectLangDay', \"Please select a language and day(s).\"));\n    }\n  }, [fetchQuestionsForWriting, exerciseKey, language, days, t]);\n  const handleAnswerChange = event => {\n    setWrittenAnswer(event.target.value);\n    if (feedback.message) setFeedback({\n      message: '',\n      type: ''\n    });\n  };\n  const handleSubmitAnswer = () => {\n    if (!writtenAnswer.trim()) {\n      setFeedback({\n        message: t('feedback.pleaseWriteAnswer', 'Please write an answer before submitting.'),\n        type: 'warning'\n      });\n      return;\n    }\n    // In a real app, this might submit to a backend or local storage.\n    // For now, just acknowledge submission.\n    setFeedback({\n      message: t('feedback.answerSubmittedWriting', 'Answer submitted. Remember to check for grammar and clarity.'),\n      type: 'success'\n    });\n    // Consider if the text area should be cleared or disabled after submission.\n    // For now, it remains editable for self-review.\n  };\n  const currentQuestionText = questions[currentQuestionIndex] || \"\";\n  const latinizedQuestion = getLatinizedText(currentQuestionText, language);\n  const goToNextQuestion = () => {\n    if (currentQuestionIndex < questions.length - 1) {\n      setCurrentQuestionIndex(prev => prev + 1);\n      setWrittenAnswer('');\n      setFeedback({\n        message: '',\n        type: ''\n      });\n    }\n  };\n  const goToPrevQuestion = () => {\n    if (currentQuestionIndex > 0) {\n      setCurrentQuestionIndex(prev => prev - 1);\n      setWrittenAnswer('');\n      setFeedback({\n        message: '',\n        type: ''\n      });\n    }\n  };\n  const showHint = () => {\n    const questionForHint = questions[currentQuestionIndex] || \"\";\n    setFeedback({\n      message: t('feedback.hintWritingQuestion', `Hint: Address all parts of the question. Structure your answer with an introduction, body, and conclusion if applicable. The question is: '${getLatinizedText(questionForHint, language)}'`, {\n        question: getLatinizedText(questionForHint, language)\n      }),\n      type: 'hint'\n    });\n  };\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: t('loading.writingExercise', 'Loading writing questions...')\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(FeedbackDisplay, {\n    message: error,\n    type: \"error\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 21\n  }, this);\n  if (questions.length === 0 && !isLoading) return /*#__PURE__*/_jsxDEV(FeedbackDisplay, {\n    message: t('exercises.noWritingQuestionsToDisplay', 'No questions to display for writing practice.'),\n    type: \"info\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 52\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px',\n      border: '1px solid #eee',\n      borderRadius: '8px',\n      maxWidth: '800px',\n      margin: '0 auto'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      style: {\n        textAlign: 'center'\n      },\n      children: t('titles.answerTheQuestionWriting', 'Answer the Question (Writing)')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        fontSize: '1.3em',\n        margin: '20px 0',\n        padding: '15px',\n        minHeight: '60px',\n        backgroundColor: '#f9f9f9',\n        borderLeft: '4px solid #007bff',\n        borderRadius: '4px',\n        ...(isLatinized && currentQuestionText !== latinizedQuestion && {\n          fontStyle: 'italic'\n        })\n      },\n      children: latinizedQuestion\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '20px',\n        textAlign: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: goToPrevQuestion,\n        disabled: currentQuestionIndex === 0,\n        style: {\n          marginRight: '10px'\n        },\n        children: [\"< \", t('buttons.previous', 'Previous')]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [currentQuestionIndex + 1, \" / \", questions.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: goToNextQuestion,\n        disabled: currentQuestionIndex === questions.length - 1,\n        style: {\n          marginLeft: '10px'\n        },\n        children: [t('buttons.next', 'Next'), \" >\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: writtenAnswer,\n      onChange: handleAnswerChange,\n      rows: \"10\",\n      spellCheck: \"true\",\n      placeholder: t('placeholders.typeYourAnswerHere', 'Type your answer here...'),\n      style: {\n        width: '100%',\n        padding: '10px',\n        marginBottom: '15px',\n        border: '1px solid #ccc',\n        borderRadius: '4px',\n        fontSize: '1em',\n        boxSizing: 'border-box'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FeedbackDisplay, {\n      message: feedback.message,\n      type: feedback.type\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ExerciseControls, {\n      onCheckAnswer: handleSubmitAnswer // \"Check\" button will act as \"Submit\"\n      ,\n      onShowHint: showHint,\n      onNextExercise: fetchQuestionsForWriting // To get a new set of questions\n      ,\n      config: {\n        showCheck: true,\n        checkButtonText: t('buttons.submitAnswer', 'Submit Answer'),\n        // Custom text for check button\n        showReveal: false,\n        // No direct answer to reveal for this type\n        showHint: true,\n        showNext: true // \"Next Exercise\" button to refresh all questions\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n_s(WritingQuestionExercise, \"VZfjBByMblk2qE0MtZxkIstLGnc=\", false, function () {\n  return [useLatinizationContext, useI18n];\n});\n_c = WritingQuestionExercise;\nexport default WritingQuestionExercise;\nvar _c;\n$RefreshReg$(_c, \"WritingQuestionExercise\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","loadSpeakingPromptsData","useLatinizationContext","useLatinization","shuffleArray","FeedbackDisplay","ExerciseControls","useI18n","jsxDEV","_jsxDEV","WritingQuestionExercise","language","days","exerciseKey","_s","questions","setQuestions","currentQuestionIndex","setCurrentQuestionIndex","writtenAnswer","setWrittenAnswer","feedback","setFeedback","message","type","isLoading","setIsLoading","error","setError","isLatinized","getLatinizedText","t","fetchQuestionsForWriting","data","fetchError","Error","length","err","console","handleAnswerChange","event","target","value","handleSubmitAnswer","trim","currentQuestionText","latinizedQuestion","goToNextQuestion","prev","goToPrevQuestion","showHint","questionForHint","question","children","fileName","_jsxFileName","lineNumber","columnNumber","style","padding","border","borderRadius","maxWidth","margin","textAlign","fontSize","minHeight","backgroundColor","borderLeft","fontStyle","marginBottom","onClick","disabled","marginRight","marginLeft","onChange","rows","spellCheck","placeholder","width","boxSizing","onCheckAnswer","onShowHint","onNextExercise","config","showCheck","checkButtonText","showReveal","showNext","_c","$RefreshReg$"],"sources":["/workspaces/COSYlanguagesproject/src/components/Freestyle/exercises/writing/WritingQuestionExercise.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { loadSpeakingPromptsData } from '../../../../utils/exerciseDataService'; // Reusing speaking prompts\r\nimport { useLatinizationContext } from '../../../../contexts/LatinizationContext';\r\nimport useLatinization from '../../../../hooks/useLatinization';\r\nimport { shuffleArray } from '../../../../utils/arrayUtils';\r\nimport FeedbackDisplay from '../../FeedbackDisplay';\r\nimport ExerciseControls from '../../ExerciseControls';\r\nimport { useI18n } from '../../../../i18n/I18nContext';\r\n\r\nconst WritingQuestionExercise = ({ language, days, exerciseKey }) => {\r\n  const [questions, setQuestions] = useState([]);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [writtenAnswer, setWrittenAnswer] = useState('');\r\n  const [feedback, setFeedback] = useState({ message: '', type: '' });\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  const { isLatinized } = useLatinizationContext();\r\n  const getLatinizedText = useLatinization;\r\n  const { t } = useI18n();\r\n\r\n  const fetchQuestionsForWriting = useCallback(async () => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    setQuestions([]);\r\n    setCurrentQuestionIndex(0);\r\n    setWrittenAnswer('');\r\n    setFeedback({ message: '', type: '' });\r\n\r\n    try {\r\n      const { data, error: fetchError } = await loadSpeakingPromptsData(language, days);\r\n      if (fetchError) {\r\n        throw new Error(fetchError.message || fetchError.error || 'Failed to load questions.');\r\n      }\r\n      if (data && data.length > 0) {\r\n        setQuestions(shuffleArray(data));\r\n      } else {\r\n        setError(t('exercises.noWritingQuestions', 'No questions found for writing practice for the selected criteria.'));\r\n      }\r\n    } catch (err) {\r\n      console.error(\"WritingQuestionExercise - Error fetching questions:\", err);\r\n      setError(err.message || t('errors.unexpectedError', 'An unexpected error occurred.'));\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [language, days, t]);\r\n\r\n  useEffect(() => {\r\n    if (language && days && days.length > 0) {\r\n      fetchQuestionsForWriting();\r\n    } else {\r\n      setIsLoading(false);\r\n      setError(t('errors.selectLangDay', \"Please select a language and day(s).\"));\r\n    }\r\n  }, [fetchQuestionsForWriting, exerciseKey, language, days, t]);\r\n\r\n  const handleAnswerChange = (event) => {\r\n    setWrittenAnswer(event.target.value);\r\n    if (feedback.message) setFeedback({message: '', type: ''});\r\n  };\r\n\r\n  const handleSubmitAnswer = () => {\r\n    if (!writtenAnswer.trim()) {\r\n      setFeedback({ message: t('feedback.pleaseWriteAnswer', 'Please write an answer before submitting.'), type: 'warning' });\r\n      return;\r\n    }\r\n    // In a real app, this might submit to a backend or local storage.\r\n    // For now, just acknowledge submission.\r\n    setFeedback({ message: t('feedback.answerSubmittedWriting', 'Answer submitted. Remember to check for grammar and clarity.'), type: 'success' });\r\n    // Consider if the text area should be cleared or disabled after submission.\r\n    // For now, it remains editable for self-review.\r\n  };\r\n  \r\n  const currentQuestionText = questions[currentQuestionIndex] || \"\";\r\n  const latinizedQuestion = getLatinizedText(currentQuestionText, language);\r\n\r\n  const goToNextQuestion = () => {\r\n    if (currentQuestionIndex < questions.length - 1) {\r\n      setCurrentQuestionIndex(prev => prev + 1);\r\n      setWrittenAnswer('');\r\n      setFeedback({ message: '', type: '' });\r\n    }\r\n  };\r\n\r\n  const goToPrevQuestion = () => {\r\n    if (currentQuestionIndex > 0) {\r\n      setCurrentQuestionIndex(prev => prev - 1);\r\n      setWrittenAnswer('');\r\n      setFeedback({ message: '', type: '' });\r\n    }\r\n  };\r\n  \r\n  const showHint = () => {\r\n     const questionForHint = questions[currentQuestionIndex] || \"\";\r\n     setFeedback({ message: t('feedback.hintWritingQuestion', `Hint: Address all parts of the question. Structure your answer with an introduction, body, and conclusion if applicable. The question is: '${getLatinizedText(questionForHint, language)}'`, {question: getLatinizedText(questionForHint, language)}), type: 'hint'});\r\n  };\r\n\r\n  if (isLoading) return <p>{t('loading.writingExercise', 'Loading writing questions...')}</p>;\r\n  if (error) return <FeedbackDisplay message={error} type=\"error\" />;\r\n  if (questions.length === 0 && !isLoading) return <FeedbackDisplay message={t('exercises.noWritingQuestionsToDisplay', 'No questions to display for writing practice.')} type=\"info\" />;\r\n\r\n  return (\r\n    <div style={{ padding: '20px', border: '1px solid #eee', borderRadius: '8px', maxWidth: '800px', margin: '0 auto' }}>\r\n      <h3 style={{textAlign: 'center'}}>{t('titles.answerTheQuestionWriting', 'Answer the Question (Writing)')}</h3>\r\n      <div style={{ \r\n          fontSize: '1.3em', margin: '20px 0', padding: '15px', \r\n          minHeight: '60px', backgroundColor: '#f9f9f9', \r\n          borderLeft: '4px solid #007bff', borderRadius: '4px',\r\n          ...(isLatinized && currentQuestionText !== latinizedQuestion && {fontStyle: 'italic'}) \r\n        }}>\r\n        {latinizedQuestion}\r\n      </div>\r\n      \r\n      <div style={{ marginBottom: '20px', textAlign: 'center' }}>\r\n        <button onClick={goToPrevQuestion} disabled={currentQuestionIndex === 0} style={{marginRight: '10px'}}>\r\n          &lt; {t('buttons.previous', 'Previous')}\r\n        </button>\r\n        <span>{currentQuestionIndex + 1} / {questions.length}</span>\r\n        <button onClick={goToNextQuestion} disabled={currentQuestionIndex === questions.length - 1} style={{marginLeft: '10px'}}>\r\n          {t('buttons.next', 'Next')} &gt;\r\n        </button>\r\n      </div>\r\n\r\n      <textarea \r\n        value={writtenAnswer}\r\n        onChange={handleAnswerChange}\r\n        rows=\"10\"\r\n        spellCheck=\"true\"\r\n        placeholder={t('placeholders.typeYourAnswerHere', 'Type your answer here...')}\r\n        style={{ width: '100%', padding: '10px', marginBottom: '15px', border: '1px solid #ccc', borderRadius: '4px', fontSize: '1em', boxSizing: 'border-box' }}\r\n      />\r\n      \r\n      <FeedbackDisplay message={feedback.message} type={feedback.type} />\r\n      \r\n      <ExerciseControls\r\n        onCheckAnswer={handleSubmitAnswer} // \"Check\" button will act as \"Submit\"\r\n        onShowHint={showHint}\r\n        onNextExercise={fetchQuestionsForWriting} // To get a new set of questions\r\n        config={{\r\n          showCheck: true, \r\n          checkButtonText: t('buttons.submitAnswer', 'Submit Answer'), // Custom text for check button\r\n          showReveal: false, // No direct answer to reveal for this type\r\n          showHint: true,\r\n          showNext: true, // \"Next Exercise\" button to refresh all questions\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WritingQuestionExercise;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}