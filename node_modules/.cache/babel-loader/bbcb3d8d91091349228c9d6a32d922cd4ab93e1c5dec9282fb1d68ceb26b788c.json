{"ast":null,"code":"import _objectSpread from\"/workspaces/COSYlanguagesproject/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{createContext,useContext,useState,useCallback,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const ProgressContext=/*#__PURE__*/createContext();const SRS_STORAGE_KEY='COSY_SRS_DATA';// Define SRS intervals (in days) for proficiency buckets 0 through N\n// Bucket 0: New item or incorrect, review very soon (e.g., a few hours or same day).\n// Bucket 1: Learned, review in 1 day.\n// Bucket 2: Review in 3 days.\n// Bucket 3: Review in 7 days.\n// Bucket 4: Review in 14 days.\n// Bucket 5: Review in 30 days (considered \"mastered\" for current cycle)\nconst SRS_INTERVALS=[0.1,1,3,7,14,30];// 0.1 for ~2.4 hours for new/incorrect items\nconst MAX_PROFICIENCY_BUCKET=SRS_INTERVALS.length-1;export const useProgress=()=>{const context=useContext(ProgressContext);if(!context){throw new Error('useProgress must be used within a ProgressProvider');}return context;};export const ProgressProvider=_ref=>{let{children}=_ref;const[learningItems,setLearningItems]=useState({});useEffect(()=>{try{const savedData=localStorage.getItem(SRS_STORAGE_KEY);if(savedData){setLearningItems(JSON.parse(savedData));}console.log(\"[ProgressContext] SRS data loaded from localStorage:\",savedData?JSON.parse(savedData):{});}catch(error){console.error(\"[ProgressContext] Error loading SRS data from localStorage:\",error);}},[]);useEffect(()=>{try{localStorage.setItem(SRS_STORAGE_KEY,JSON.stringify(learningItems));console.log(\"[ProgressContext] SRS data saved to localStorage:\",learningItems);}catch(error){console.error(\"[ProgressContext] Error saving SRS data to localStorage:\",error);}},[learningItems]);const getLearningItemKey=useCallback((itemId,itemType,language)=>{// Ensure consistent key generation, e.g., by lowercasing and trimming parts if necessary,\n// though for now, direct concatenation is used as per original GameState logic.\nreturn\"\".concat(String(language),\"_\").concat(String(itemType),\"_\").concat(String(itemId));},[]);const getLearningItem=useCallback((itemId,itemType,language)=>{const itemKey=getLearningItemKey(itemId,itemType,language);return learningItems[itemKey]||{itemId:String(itemId),itemType:String(itemType),language:String(language),proficiencyBucket:0,lastReviewedDate:null,nextReviewDate:new Date().toISOString(),// New items are due immediately\nconsecutiveCorrectAnswers:0,totalAttempts:0,totalCorrect:0};},[learningItems,getLearningItemKey]);const scheduleReview=useCallback((itemId,itemType,language,isCorrect)=>{setLearningItems(prevItems=>{const itemKey=getLearningItemKey(itemId,itemType,language);// Use the getLearningItem to ensure we have a base structure even if it's new\nconst currentItem=prevItems[itemKey]||getLearningItem(itemId,itemType,language);const newItemData=_objectSpread({},currentItem);newItemData.totalAttempts=(newItemData.totalAttempts||0)+1;newItemData.lastReviewedDate=new Date().toISOString();if(isCorrect){newItemData.totalCorrect=(newItemData.totalCorrect||0)+1;newItemData.consecutiveCorrectAnswers=(newItemData.consecutiveCorrectAnswers||0)+1;newItemData.proficiencyBucket=Math.min(MAX_PROFICIENCY_BUCKET,(currentItem.proficiencyBucket||0)+1);}else{newItemData.consecutiveCorrectAnswers=0;// For incorrect answers, move back one bucket, or to bucket 0\nnewItemData.proficiencyBucket=Math.max(0,(currentItem.proficiencyBucket||0)-1);}const intervalDays=SRS_INTERVALS[newItemData.proficiencyBucket];const nextReview=new Date();if(intervalDays<1){// Handle fractional days (hours)\nnextReview.setTime(nextReview.getTime()+intervalDays*24*60*60*1000);}else{nextReview.setDate(nextReview.getDate()+intervalDays);}newItemData.nextReviewDate=nextReview.toISOString();console.log(\"[ProgressContext] Processed review for: \".concat(itemKey,\", Correct: \").concat(isCorrect,\", New Bucket: \").concat(newItemData.proficiencyBucket,\", Next Review: \").concat(newItemData.nextReviewDate));return _objectSpread(_objectSpread({},prevItems),{},{[itemKey]:newItemData});});},[getLearningItem,getLearningItemKey]);const awardCorrectAnswer=useCallback((itemId,itemType,language)=>{console.log(\"[ProgressContext] Correct answer for: \".concat(itemType,\" - \").concat(itemId,\" in \").concat(language));scheduleReview(itemId,itemType,language,true);},[scheduleReview]);const awardIncorrectAnswer=useCallback((itemId,itemType,language)=>{console.log(\"[ProgressContext] Incorrect answer for: \".concat(itemType,\" - \").concat(itemId,\" in \").concat(language));scheduleReview(itemId,itemType,language,false);},[scheduleReview]);const getItemProficiency=useCallback((itemId,itemType,language)=>{const item=getLearningItem(itemId,itemType,language);return item.proficiencyBucket;},[getLearningItem]);const getDueReviewItems=useCallback(function(){let language=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;let itemType=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;let maxItems=arguments.length>2&&arguments[2]!==undefined?arguments[2]:10;const now=new Date().toISOString();const dueItems=Object.values(learningItems).filter(item=>{const langMatch=language?item.language===language:true;const typeMatch=itemType?item.itemType===itemType:true;// Ensure nextReviewDate exists and is not in the future\nconst isDue=item.nextReviewDate&&item.nextReviewDate<=now;return langMatch&&typeMatch&&isDue;}).sort((a,b)=>new Date(a.nextReviewDate)-new Date(b.nextReviewDate));// Oldest due first\nconsole.log(\"[ProgressContext] Getting due review items (lang: \".concat(language,\", type: \").concat(itemType,\"). Found: \").concat(dueItems.length,\" due out of \").concat(Object.keys(learningItems).length,\" total.\"));return dueItems.slice(0,maxItems);},[learningItems]);const resetAllSrsProgress=useCallback(()=>{setLearningItems({});// localStorage.removeItem(SRS_STORAGE_KEY); // Handled by useEffect for learningItems\nconsole.log(\"[ProgressContext] All SRS progress has been reset.\");},[]);const value={awardCorrectAnswer,awardIncorrectAnswer,scheduleReview,getItemProficiency,getDueReviewItems,learningItems,resetAllSrsProgress,getLearningItem// Exposing for potential direct use or inspection\n};return/*#__PURE__*/_jsx(ProgressContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useCallback","useEffect","jsx","_jsx","ProgressContext","SRS_STORAGE_KEY","SRS_INTERVALS","MAX_PROFICIENCY_BUCKET","length","useProgress","context","Error","ProgressProvider","_ref","children","learningItems","setLearningItems","savedData","localStorage","getItem","JSON","parse","console","log","error","setItem","stringify","getLearningItemKey","itemId","itemType","language","concat","String","getLearningItem","itemKey","proficiencyBucket","lastReviewedDate","nextReviewDate","Date","toISOString","consecutiveCorrectAnswers","totalAttempts","totalCorrect","scheduleReview","isCorrect","prevItems","currentItem","newItemData","_objectSpread","Math","min","max","intervalDays","nextReview","setTime","getTime","setDate","getDate","awardCorrectAnswer","awardIncorrectAnswer","getItemProficiency","item","getDueReviewItems","arguments","undefined","maxItems","now","dueItems","Object","values","filter","langMatch","typeMatch","isDue","sort","a","b","keys","slice","resetAllSrsProgress","value","Provider"],"sources":["/workspaces/COSYlanguagesproject/src/contexts/ProgressContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useCallback, useEffect } from 'react';\r\n\r\nconst ProgressContext = createContext();\r\nconst SRS_STORAGE_KEY = 'COSY_SRS_DATA';\r\n\r\n// Define SRS intervals (in days) for proficiency buckets 0 through N\r\n// Bucket 0: New item or incorrect, review very soon (e.g., a few hours or same day).\r\n// Bucket 1: Learned, review in 1 day.\r\n// Bucket 2: Review in 3 days.\r\n// Bucket 3: Review in 7 days.\r\n// Bucket 4: Review in 14 days.\r\n// Bucket 5: Review in 30 days (considered \"mastered\" for current cycle)\r\nconst SRS_INTERVALS = [0.1, 1, 3, 7, 14, 30]; // 0.1 for ~2.4 hours for new/incorrect items\r\nconst MAX_PROFICIENCY_BUCKET = SRS_INTERVALS.length - 1;\r\n\r\nexport const useProgress = () => {\r\n  const context = useContext(ProgressContext);\r\n  if (!context) {\r\n    throw new Error('useProgress must be used within a ProgressProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const ProgressProvider = ({ children }) => {\r\n  const [learningItems, setLearningItems] = useState({});\r\n\r\n  useEffect(() => {\r\n    try {\r\n      const savedData = localStorage.getItem(SRS_STORAGE_KEY);\r\n      if (savedData) {\r\n        setLearningItems(JSON.parse(savedData));\r\n      }\r\n      console.log(\"[ProgressContext] SRS data loaded from localStorage:\", savedData ? JSON.parse(savedData) : {});\r\n    } catch (error) {\r\n      console.error(\"[ProgressContext] Error loading SRS data from localStorage:\", error);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    try {\r\n      localStorage.setItem(SRS_STORAGE_KEY, JSON.stringify(learningItems));\r\n      console.log(\"[ProgressContext] SRS data saved to localStorage:\", learningItems);\r\n    } catch (error) {\r\n      console.error(\"[ProgressContext] Error saving SRS data to localStorage:\", error);\r\n    }\r\n  }, [learningItems]);\r\n\r\n  const getLearningItemKey = useCallback((itemId, itemType, language) => {\r\n    // Ensure consistent key generation, e.g., by lowercasing and trimming parts if necessary,\r\n    // though for now, direct concatenation is used as per original GameState logic.\r\n    return `${String(language)}_${String(itemType)}_${String(itemId)}`;\r\n  }, []);\r\n  \r\n  const getLearningItem = useCallback((itemId, itemType, language) => {\r\n    const itemKey = getLearningItemKey(itemId, itemType, language);\r\n    return learningItems[itemKey] || {\r\n      itemId: String(itemId),\r\n      itemType: String(itemType),\r\n      language: String(language),\r\n      proficiencyBucket: 0,\r\n      lastReviewedDate: null,\r\n      nextReviewDate: new Date().toISOString(), // New items are due immediately\r\n      consecutiveCorrectAnswers: 0,\r\n      totalAttempts: 0,\r\n      totalCorrect: 0,\r\n    };\r\n  }, [learningItems, getLearningItemKey]);\r\n\r\n  const scheduleReview = useCallback((itemId, itemType, language, isCorrect) => {\r\n    setLearningItems(prevItems => {\r\n      const itemKey = getLearningItemKey(itemId, itemType, language);\r\n      // Use the getLearningItem to ensure we have a base structure even if it's new\r\n      const currentItem = prevItems[itemKey] || getLearningItem(itemId, itemType, language);\r\n      \r\n      const newItemData = { ...currentItem };\r\n      newItemData.totalAttempts = (newItemData.totalAttempts || 0) + 1;\r\n      newItemData.lastReviewedDate = new Date().toISOString();\r\n\r\n      if (isCorrect) {\r\n        newItemData.totalCorrect = (newItemData.totalCorrect || 0) + 1;\r\n        newItemData.consecutiveCorrectAnswers = (newItemData.consecutiveCorrectAnswers || 0) + 1;\r\n        newItemData.proficiencyBucket = Math.min(MAX_PROFICIENCY_BUCKET, (currentItem.proficiencyBucket || 0) + 1);\r\n      } else {\r\n        newItemData.consecutiveCorrectAnswers = 0;\r\n        // For incorrect answers, move back one bucket, or to bucket 0\r\n        newItemData.proficiencyBucket = Math.max(0, (currentItem.proficiencyBucket || 0) - 1); \r\n      }\r\n      \r\n      const intervalDays = SRS_INTERVALS[newItemData.proficiencyBucket];\r\n      const nextReview = new Date();\r\n      if (intervalDays < 1) { // Handle fractional days (hours)\r\n        nextReview.setTime(nextReview.getTime() + intervalDays * 24 * 60 * 60 * 1000);\r\n      } else {\r\n        nextReview.setDate(nextReview.getDate() + intervalDays);\r\n      }\r\n      newItemData.nextReviewDate = nextReview.toISOString();\r\n\r\n      console.log(`[ProgressContext] Processed review for: ${itemKey}, Correct: ${isCorrect}, New Bucket: ${newItemData.proficiencyBucket}, Next Review: ${newItemData.nextReviewDate}`);\r\n      return {\r\n        ...prevItems,\r\n        [itemKey]: newItemData,\r\n      };\r\n    });\r\n  }, [getLearningItem, getLearningItemKey]);\r\n  \r\n  const awardCorrectAnswer = useCallback((itemId, itemType, language) => {\r\n    console.log(`[ProgressContext] Correct answer for: ${itemType} - ${itemId} in ${language}`);\r\n    scheduleReview(itemId, itemType, language, true);\r\n  }, [scheduleReview]);\r\n\r\n  const awardIncorrectAnswer = useCallback((itemId, itemType, language) => {\r\n    console.log(`[ProgressContext] Incorrect answer for: ${itemType} - ${itemId} in ${language}`);\r\n    scheduleReview(itemId, itemType, language, false);\r\n  }, [scheduleReview]);\r\n\r\n  const getItemProficiency = useCallback((itemId, itemType, language) => {\r\n    const item = getLearningItem(itemId, itemType, language);\r\n    return item.proficiencyBucket;\r\n  }, [getLearningItem]);\r\n\r\n  const getDueReviewItems = useCallback((language = null, itemType = null, maxItems = 10) => {\r\n    const now = new Date().toISOString();\r\n    const dueItems = Object.values(learningItems)\r\n      .filter(item => {\r\n        const langMatch = language ? item.language === language : true;\r\n        const typeMatch = itemType ? item.itemType === itemType : true;\r\n        // Ensure nextReviewDate exists and is not in the future\r\n        const isDue = item.nextReviewDate && item.nextReviewDate <= now;\r\n        return langMatch && typeMatch && isDue;\r\n      })\r\n      .sort((a, b) => new Date(a.nextReviewDate) - new Date(b.nextReviewDate)); // Oldest due first\r\n    \r\n    console.log(`[ProgressContext] Getting due review items (lang: ${language}, type: ${itemType}). Found: ${dueItems.length} due out of ${Object.keys(learningItems).length} total.`);\r\n    return dueItems.slice(0, maxItems);\r\n  }, [learningItems]);\r\n  \r\n  const resetAllSrsProgress = useCallback(() => {\r\n    setLearningItems({});\r\n    // localStorage.removeItem(SRS_STORAGE_KEY); // Handled by useEffect for learningItems\r\n    console.log(\"[ProgressContext] All SRS progress has been reset.\");\r\n  }, []);\r\n\r\n  const value = {\r\n    awardCorrectAnswer,\r\n    awardIncorrectAnswer,\r\n    scheduleReview, \r\n    getItemProficiency,\r\n    getDueReviewItems,\r\n    learningItems, \r\n    resetAllSrsProgress,\r\n    getLearningItem, // Exposing for potential direct use or inspection\r\n  };\r\n\r\n  return (\r\n    <ProgressContext.Provider value={value}>\r\n      {children}\r\n    </ProgressContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}