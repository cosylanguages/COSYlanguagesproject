{"ast":null,"code":"var _jsxFileName = \"/workspaces/COSYlanguagesproject/src/components/Freestyle/exercises/grammar/WordOrderExercise.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { loadVerbGrammarData, loadVocabularyData } from '../../../../utils/exerciseDataService';\nimport { processVerbData, generateGrammarExerciseSentence, setGrammarGeneratorTranslations } from '../../../../utils/grammarSentenceGenerator';\nimport { useLatinizationContext } from '../../../../contexts/LatinizationContext';\nimport useLatinization from '../../../../hooks/useLatinization';\nimport { shuffleArray } from '../../../../utils/arrayUtils';\nimport { normalizeString } from '../../../../utils/stringUtils';\nimport FeedbackDisplay from '../../FeedbackDisplay';\nimport ExerciseControls from '../../ExerciseControls';\nimport { useI18n } from '../../../../i18n/I18nContext';\nimport { useProgress } from '../../../../contexts/ProgressContext'; // Import useProgress\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WordOrderExercise = ({\n  language,\n  days,\n  exerciseKey\n}) => {\n  _s();\n  const [exerciseData, setExerciseData] = useState(null);\n  const [wordPool, setWordPool] = useState([]);\n  const [constructedSentence, setConstructedSentence] = useState([]);\n  const [feedback, setFeedback] = useState({\n    message: '',\n    type: ''\n  });\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [isRevealed, setIsRevealed] = useState(false);\n  const [isCorrect, setIsCorrect] = useState(false);\n  const {\n    isLatinized\n  } = useLatinizationContext();\n  const getLatinizedText = useLatinization;\n  const {\n    t,\n    allTranslations\n  } = useI18n();\n  const progress = useProgress();\n  useEffect(() => {\n    if (allTranslations) {\n      setGrammarGeneratorTranslations(allTranslations);\n    }\n  }, [allTranslations]);\n  const setupNewExercise = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    setFeedback({\n      message: '',\n      type: ''\n    });\n    setExerciseData(null);\n    setWordPool([]);\n    setConstructedSentence([]);\n    setIsRevealed(false);\n    setIsCorrect(false);\n    try {\n      const {\n        data: rawVerbItems,\n        error: verbError\n      } = await loadVerbGrammarData(language, days);\n      if (verbError) throw new Error(verbError.message || verbError.error || 'Failed to load verb grammar data.');\n      const {\n        data: vocabItems,\n        error: vocabError\n      } = await loadVocabularyData(language, days);\n      if (vocabError) console.warn(\"WordOrderExercise: Failed to load vocabulary data.\");\n      if (rawVerbItems && rawVerbItems.length > 0) {\n        const processedVerbItems = processVerbData(rawVerbItems, language);\n        if (!processedVerbItems || processedVerbItems.length === 0) {\n          setError(t('errors.noProcessableVerbData', 'No processable verb items found.'));\n          setIsLoading(false);\n          return;\n        }\n        const sentenceDetails = await generateGrammarExerciseSentence(language, days, processedVerbItems, vocabItems || []);\n        if (sentenceDetails && sentenceDetails.correctSentence) {\n          let components = sentenceDetails.sentenceComponents;\n          if (!components || components.length === 0) {\n            components = sentenceDetails.correctSentence.replace(/[.?]$/, \"\").split(' ');\n          }\n          setExerciseData({\n            correctSentence: sentenceDetails.correctSentence,\n            sentenceComponents: components\n          });\n          setWordPool(shuffleArray(components.map((word, index) => ({\n            word,\n            id: index\n          }))));\n        } else {\n          setError(t('errors.couldNotGenerateSentence', 'Could not generate a word order exercise sentence.'));\n        }\n      } else {\n        setError(t('errors.noVerbData', 'No verb grammar data found.'));\n      }\n    } catch (err) {\n      console.error(\"WordOrderExercise - Error setting up:\", err);\n      setError(err.message || t('errors.unexpectedError', 'An unexpected error occurred.'));\n    } finally {\n      setIsLoading(false);\n    }\n  }, [language, days, t]);\n  useEffect(() => {\n    if (language && days && days.length > 0) setupNewExercise();else {\n      setIsLoading(false);\n      setError(t('errors.selectLangDay', \"Please select a language and day(s).\"));\n    }\n  }, [setupNewExercise, exerciseKey, language, days, t]);\n  const handleTileClick = tile => {\n    if (isRevealed || isCorrect) return;\n    setConstructedSentence(prev => [...prev, tile]);\n    setWordPool(prev => prev.filter(item => item.id !== tile.id));\n    setFeedback({\n      message: '',\n      type: ''\n    });\n  };\n  const handleSlotClick = indexToRemove => {\n    if (isRevealed || isCorrect) return;\n    const tileToReturn = constructedSentence[indexToRemove];\n    setConstructedSentence(prev => prev.filter((_, index) => index !== indexToRemove));\n    setWordPool(prev => shuffleArray([...prev, tileToReturn]));\n    setFeedback({\n      message: '',\n      type: ''\n    });\n  };\n  const checkAnswer = () => {\n    if (!exerciseData || isRevealed || isCorrect) return;\n    const userAnswerSentence = constructedSentence.map(item => item.word).join(' ').trim();\n    const correctAnswerSentence = exerciseData.correctSentence.replace(/[.?]$/, \"\").trim();\n    const itemId = `wordorder_${normalizeString(correctAnswerSentence)}`;\n    if (normalizeString(userAnswerSentence) === normalizeString(correctAnswerSentence)) {\n      setFeedback({\n        message: t('feedback.correct', 'Correct!'),\n        type: 'correct'\n      });\n      setIsCorrect(true);\n      progress.awardCorrectAnswer(itemId, 'grammar-wordorder');\n    } else {\n      setFeedback({\n        message: t('feedback.incorrectWordOrder', `Incorrect order. The correct sentence is: \"${getLatinizedText(exerciseData.correctSentence, language)}\"`, {\n          correctSentence: getLatinizedText(exerciseData.correctSentence, language)\n        }),\n        type: 'incorrect'\n      });\n      progress.awardIncorrectAnswer(itemId, 'grammar-wordorder');\n    }\n  };\n  const showHint = () => {\n    if (!exerciseData || isRevealed || isCorrect || constructedSentence.length >= exerciseData.sentenceComponents.length) return;\n    const nextCorrectWordIndex = constructedSentence.length;\n    const nextCorrectWordObject = exerciseData.sentenceComponents[nextCorrectWordIndex];\n    setFeedback({\n      message: t('feedback.hintWordOrder', `Hint: The next word is \"${getLatinizedText(nextCorrectWordObject, language)}\".`, {\n        word: getLatinizedText(nextCorrectWordObject, language)\n      }),\n      type: 'hint'\n    });\n  };\n  const revealTheAnswer = () => {\n    if (!exerciseData) return;\n    const correctAnswerSentence = exerciseData.correctSentence.replace(/[.?]$/, \"\").trim();\n    const itemId = `wordorder_${normalizeString(correctAnswerSentence)}`;\n    setConstructedSentence(exerciseData.sentenceComponents.map((word, index) => ({\n      word,\n      id: index\n    })));\n    setWordPool([]);\n    setFeedback({\n      message: t('feedback.revealedWordOrder', `The correct order is: \"${getLatinizedText(exerciseData.correctSentence, language)}\"`, {\n        correctSentence: getLatinizedText(exerciseData.correctSentence, language)\n      }),\n      type: 'info'\n    });\n    setIsRevealed(true);\n    setIsCorrect(true);\n    progress.scheduleReview(itemId, 'grammar-wordorder', false);\n  };\n  const handleReset = () => {\n    if (!exerciseData) return;\n    setConstructedSentence([]);\n    setWordPool(shuffleArray(exerciseData.sentenceComponents.map((word, index) => ({\n      word,\n      id: index\n    }))));\n    setFeedback({\n      message: '',\n      type: ''\n    });\n    setIsCorrect(false);\n    setIsRevealed(false);\n  };\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: t('loading.wordOrderExercise', 'Loading word order exercise...')\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(FeedbackDisplay, {\n    message: error,\n    type: \"error\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 21\n  }, this);\n  if (!exerciseData && !isLoading) return /*#__PURE__*/_jsxDEV(FeedbackDisplay, {\n    message: t('exercises.noData', \"No exercise data available.\"),\n    type: \"info\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 43\n  }, this);\n  const tileStyle = {\n    padding: '10px 15px',\n    margin: '5px',\n    border: '1px solid #ccc',\n    borderRadius: '5px',\n    cursor: 'pointer',\n    background: '#f0f0f0'\n  };\n  const slotAreaStyle = {\n    minHeight: '50px',\n    border: '2px dashed #ddd',\n    padding: '10px',\n    marginBottom: '20px',\n    display: 'flex',\n    flexWrap: 'wrap',\n    alignItems: 'center'\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: 'center',\n      padding: '20px',\n      border: '1px solid #eee',\n      borderRadius: '8px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: t('titles.arrangeTheWords', 'Arrange the Words to Form a Sentence')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        ...slotAreaStyle,\n        justifyContent: 'flex-start',\n        backgroundColor: '#e9ecef'\n      },\n      children: [constructedSentence.map((item, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleSlotClick(index),\n        style: tileStyle,\n        disabled: isRevealed || isCorrect,\n        children: getLatinizedText(item.word, language)\n      }, `slot-${item.id}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 11\n      }, this)), constructedSentence.length === 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          color: '#888'\n        },\n        children: t('labels.dropWordsHere', 'Click words from below to place them here')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 46\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        ...slotAreaStyle,\n        justifyContent: 'center',\n        backgroundColor: '#fff'\n      },\n      children: [wordPool.map(item => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleTileClick(item),\n        style: tileStyle,\n        disabled: isRevealed || isCorrect,\n        children: getLatinizedText(item.word, language)\n      }, `pool-${item.id}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 11\n      }, this)), wordPool.length === 0 && constructedSentence.length > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          color: '#888'\n        },\n        children: t('labels.allWordsPlaced', 'All words placed!')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 69\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FeedbackDisplay, {\n      message: feedback.message,\n      type: feedback.type,\n      language: language\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ExerciseControls, {\n      onCheckAnswer: !isRevealed && !isCorrect && constructedSentence.length === exerciseData.sentenceComponents.length ? checkAnswer : undefined,\n      onShowHint: !isRevealed && !isCorrect && constructedSentence.length < exerciseData.sentenceComponents.length ? showHint : undefined,\n      onRevealAnswer: !isRevealed && !isCorrect ? revealTheAnswer : undefined,\n      onNextExercise: setupNewExercise,\n      config: {\n        showCheck: !isRevealed && !isCorrect && constructedSentence.length === exerciseData.sentenceComponents.length,\n        showHint: !isRevealed && !isCorrect && constructedSentence.length < exerciseData.sentenceComponents.length,\n        showReveal: !isRevealed && !isCorrect,\n        showNext: true\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleReset,\n      style: {\n        ...tileStyle,\n        backgroundColor: '#6c757d',\n        color: 'white',\n        marginTop: '10px'\n      },\n      disabled: isRevealed || isCorrect,\n      children: [\"\\uD83D\\uDD04 \", t('buttons.reset', 'Reset')]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 5\n  }, this);\n};\n_s(WordOrderExercise, \"+gvEbDS6QxRZFNVnkVRscF1Q7h0=\", false, function () {\n  return [useLatinizationContext, useI18n, useProgress];\n});\n_c = WordOrderExercise;\nexport default WordOrderExercise;\nvar _c;\n$RefreshReg$(_c, \"WordOrderExercise\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","loadVerbGrammarData","loadVocabularyData","processVerbData","generateGrammarExerciseSentence","setGrammarGeneratorTranslations","useLatinizationContext","useLatinization","shuffleArray","normalizeString","FeedbackDisplay","ExerciseControls","useI18n","useProgress","jsxDEV","_jsxDEV","WordOrderExercise","language","days","exerciseKey","_s","exerciseData","setExerciseData","wordPool","setWordPool","constructedSentence","setConstructedSentence","feedback","setFeedback","message","type","isLoading","setIsLoading","error","setError","isRevealed","setIsRevealed","isCorrect","setIsCorrect","isLatinized","getLatinizedText","t","allTranslations","progress","setupNewExercise","data","rawVerbItems","verbError","Error","vocabItems","vocabError","console","warn","length","processedVerbItems","sentenceDetails","correctSentence","components","sentenceComponents","replace","split","map","word","index","id","err","handleTileClick","tile","prev","filter","item","handleSlotClick","indexToRemove","tileToReturn","_","checkAnswer","userAnswerSentence","join","trim","correctAnswerSentence","itemId","awardCorrectAnswer","awardIncorrectAnswer","showHint","nextCorrectWordIndex","nextCorrectWordObject","revealTheAnswer","scheduleReview","handleReset","children","fileName","_jsxFileName","lineNumber","columnNumber","tileStyle","padding","margin","border","borderRadius","cursor","background","slotAreaStyle","minHeight","marginBottom","display","flexWrap","alignItems","style","textAlign","justifyContent","backgroundColor","onClick","disabled","color","onCheckAnswer","undefined","onShowHint","onRevealAnswer","onNextExercise","config","showCheck","showReveal","showNext","marginTop","_c","$RefreshReg$"],"sources":["/workspaces/COSYlanguagesproject/src/components/Freestyle/exercises/grammar/WordOrderExercise.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { loadVerbGrammarData, loadVocabularyData } from '../../../../utils/exerciseDataService';\r\nimport { processVerbData, generateGrammarExerciseSentence, setGrammarGeneratorTranslations } from '../../../../utils/grammarSentenceGenerator'; \r\nimport { useLatinizationContext } from '../../../../contexts/LatinizationContext';\r\nimport useLatinization from '../../../../hooks/useLatinization';\r\nimport { shuffleArray } from '../../../../utils/arrayUtils';\r\nimport { normalizeString } from '../../../../utils/stringUtils';\r\nimport FeedbackDisplay from '../../FeedbackDisplay';\r\nimport ExerciseControls from '../../ExerciseControls';\r\nimport { useI18n } from '../../../../i18n/I18nContext';\r\nimport { useProgress } from '../../../../contexts/ProgressContext'; // Import useProgress\r\n\r\nconst WordOrderExercise = ({ language, days, exerciseKey }) => {\r\n  const [exerciseData, setExerciseData] = useState(null); \r\n  const [wordPool, setWordPool] = useState([]); \r\n  const [constructedSentence, setConstructedSentence] = useState([]); \r\n  \r\n  const [feedback, setFeedback] = useState({ message: '', type: '' });\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [isRevealed, setIsRevealed] = useState(false);\r\n  const [isCorrect, setIsCorrect] = useState(false);\r\n\r\n  const { isLatinized } = useLatinizationContext();\r\n  const getLatinizedText = useLatinization;\r\n  const { t, allTranslations } = useI18n();\r\n  const progress = useProgress();\r\n\r\n  useEffect(() => {\r\n    if (allTranslations) {\r\n      setGrammarGeneratorTranslations(allTranslations);\r\n    }\r\n  }, [allTranslations]);\r\n\r\n  const setupNewExercise = useCallback(async () => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    setFeedback({ message: '', type: '' });\r\n    setExerciseData(null);\r\n    setWordPool([]);\r\n    setConstructedSentence([]);\r\n    setIsRevealed(false);\r\n    setIsCorrect(false);\r\n\r\n    try {\r\n      const { data: rawVerbItems, error: verbError } = await loadVerbGrammarData(language, days);\r\n      if (verbError) throw new Error(verbError.message || verbError.error || 'Failed to load verb grammar data.');\r\n      \r\n      const { data: vocabItems, error: vocabError } = await loadVocabularyData(language, days);\r\n      if (vocabError) console.warn(\"WordOrderExercise: Failed to load vocabulary data.\");\r\n\r\n      if (rawVerbItems && rawVerbItems.length > 0) {\r\n        const processedVerbItems = processVerbData(rawVerbItems, language);\r\n        if (!processedVerbItems || processedVerbItems.length === 0) {\r\n            setError(t('errors.noProcessableVerbData', 'No processable verb items found.'));\r\n            setIsLoading(false); return;\r\n        }\r\n        const sentenceDetails = await generateGrammarExerciseSentence(language, days, processedVerbItems, vocabItems || []);\r\n        \r\n        if (sentenceDetails && sentenceDetails.correctSentence) {\r\n          let components = sentenceDetails.sentenceComponents;\r\n          if (!components || components.length === 0) {\r\n            components = sentenceDetails.correctSentence.replace(/[.?]$/, \"\").split(' ');\r\n          }\r\n          setExerciseData({\r\n            correctSentence: sentenceDetails.correctSentence,\r\n            sentenceComponents: components\r\n          });\r\n          setWordPool(shuffleArray(components.map((word, index) => ({ word, id: index }))));\r\n        } else {\r\n          setError(t('errors.couldNotGenerateSentence', 'Could not generate a word order exercise sentence.'));\r\n        }\r\n      } else {\r\n        setError(t('errors.noVerbData', 'No verb grammar data found.'));\r\n      }\r\n    } catch (err) {\r\n      console.error(\"WordOrderExercise - Error setting up:\", err);\r\n      setError(err.message || t('errors.unexpectedError', 'An unexpected error occurred.'));\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [language, days, t]);\r\n\r\n  useEffect(() => {\r\n    if (language && days && days.length > 0) setupNewExercise();\r\n    else { setIsLoading(false); setError(t('errors.selectLangDay', \"Please select a language and day(s).\")); }\r\n  }, [setupNewExercise, exerciseKey, language, days, t]);\r\n\r\n  const handleTileClick = (tile) => {\r\n    if (isRevealed || isCorrect) return;\r\n    setConstructedSentence(prev => [...prev, tile]);\r\n    setWordPool(prev => prev.filter(item => item.id !== tile.id));\r\n    setFeedback({ message: '', type: '' });\r\n  };\r\n\r\n  const handleSlotClick = (indexToRemove) => {\r\n    if (isRevealed || isCorrect) return;\r\n    const tileToReturn = constructedSentence[indexToRemove];\r\n    setConstructedSentence(prev => prev.filter((_, index) => index !== indexToRemove));\r\n    setWordPool(prev => shuffleArray([...prev, tileToReturn])); \r\n    setFeedback({ message: '', type: '' });\r\n  };\r\n  \r\n  const checkAnswer = () => {\r\n    if (!exerciseData || isRevealed || isCorrect) return;\r\n    const userAnswerSentence = constructedSentence.map(item => item.word).join(' ').trim();\r\n    const correctAnswerSentence = exerciseData.correctSentence.replace(/[.?]$/, \"\").trim();\r\n    const itemId = `wordorder_${normalizeString(correctAnswerSentence)}`;\r\n\r\n    if (normalizeString(userAnswerSentence) === normalizeString(correctAnswerSentence)) {\r\n      setFeedback({ message: t('feedback.correct', 'Correct!'), type: 'correct' });\r\n      setIsCorrect(true);\r\n      progress.awardCorrectAnswer(itemId, 'grammar-wordorder');\r\n    } else {\r\n      setFeedback({ message: t('feedback.incorrectWordOrder', `Incorrect order. The correct sentence is: \"${getLatinizedText(exerciseData.correctSentence, language)}\"`, {correctSentence: getLatinizedText(exerciseData.correctSentence, language)}), type: 'incorrect' });\r\n      progress.awardIncorrectAnswer(itemId, 'grammar-wordorder');\r\n    }\r\n  };\r\n\r\n  const showHint = () => {\r\n    if (!exerciseData || isRevealed || isCorrect || constructedSentence.length >= exerciseData.sentenceComponents.length) return;\r\n    const nextCorrectWordIndex = constructedSentence.length;\r\n    const nextCorrectWordObject = exerciseData.sentenceComponents[nextCorrectWordIndex];\r\n    setFeedback({ message: t('feedback.hintWordOrder', `Hint: The next word is \"${getLatinizedText(nextCorrectWordObject, language)}\".`, {word: getLatinizedText(nextCorrectWordObject, language)}), type: 'hint' });\r\n  };\r\n\r\n  const revealTheAnswer = () => {\r\n    if (!exerciseData) return;\r\n    const correctAnswerSentence = exerciseData.correctSentence.replace(/[.?]$/, \"\").trim();\r\n    const itemId = `wordorder_${normalizeString(correctAnswerSentence)}`;\r\n    setConstructedSentence(exerciseData.sentenceComponents.map((word, index) => ({word, id: index})));\r\n    setWordPool([]);\r\n    setFeedback({ message: t('feedback.revealedWordOrder', `The correct order is: \"${getLatinizedText(exerciseData.correctSentence, language)}\"`, {correctSentence: getLatinizedText(exerciseData.correctSentence, language)}), type: 'info' });\r\n    setIsRevealed(true);\r\n    setIsCorrect(true);\r\n    progress.scheduleReview(itemId, 'grammar-wordorder', false);\r\n  };\r\n\r\n  const handleReset = () => {\r\n    if (!exerciseData) return;\r\n    setConstructedSentence([]);\r\n    setWordPool(shuffleArray(exerciseData.sentenceComponents.map((word, index) => ({ word, id: index }))));\r\n    setFeedback({ message: '', type: '' });\r\n    setIsCorrect(false);\r\n    setIsRevealed(false);\r\n  };\r\n\r\n  if (isLoading) return <p>{t('loading.wordOrderExercise', 'Loading word order exercise...')}</p>;\r\n  if (error) return <FeedbackDisplay message={error} type=\"error\" />;\r\n  if (!exerciseData && !isLoading) return <FeedbackDisplay message={t('exercises.noData', \"No exercise data available.\")} type=\"info\" />;\r\n\r\n  const tileStyle = { padding: '10px 15px', margin: '5px', border: '1px solid #ccc', borderRadius: '5px', cursor: 'pointer', background: '#f0f0f0'};\r\n  const slotAreaStyle = { minHeight: '50px', border: '2px dashed #ddd', padding: '10px', marginBottom: '20px', display: 'flex', flexWrap: 'wrap', alignItems: 'center' };\r\n\r\n  return (\r\n    <div style={{ textAlign: 'center', padding: '20px', border: '1px solid #eee', borderRadius: '8px' }}>\r\n      <h3>{t('titles.arrangeTheWords', 'Arrange the Words to Form a Sentence')}</h3>\r\n      \r\n      <div style={{...slotAreaStyle, justifyContent: 'flex-start', backgroundColor: '#e9ecef'}}>\r\n        {constructedSentence.map((item, index) => (\r\n          <button key={`slot-${item.id}`} onClick={() => handleSlotClick(index)} style={tileStyle} disabled={isRevealed || isCorrect}>\r\n            {getLatinizedText(item.word, language)}\r\n          </button>\r\n        ))}\r\n        {constructedSentence.length === 0 && <span style={{color: '#888'}}>{t('labels.dropWordsHere', 'Click words from below to place them here')}</span>}\r\n      </div>\r\n\r\n      <div style={{...slotAreaStyle, justifyContent: 'center', backgroundColor: '#fff'}}>\r\n        {wordPool.map(item => (\r\n          <button key={`pool-${item.id}`} onClick={() => handleTileClick(item)} style={tileStyle} disabled={isRevealed || isCorrect}>\r\n            {getLatinizedText(item.word, language)}\r\n          </button>\r\n        ))}\r\n        {wordPool.length === 0 && constructedSentence.length > 0 && <span style={{color: '#888'}}>{t('labels.allWordsPlaced', 'All words placed!')}</span>}\r\n      </div>\r\n      \r\n      <FeedbackDisplay message={feedback.message} type={feedback.type} language={language} />\r\n      \r\n      <ExerciseControls\r\n        onCheckAnswer={!isRevealed && !isCorrect && constructedSentence.length === exerciseData.sentenceComponents.length ? checkAnswer : undefined}\r\n        onShowHint={!isRevealed && !isCorrect && constructedSentence.length < exerciseData.sentenceComponents.length ? showHint : undefined}\r\n        onRevealAnswer={!isRevealed && !isCorrect ? revealTheAnswer : undefined}\r\n        onNextExercise={setupNewExercise}\r\n        config={{ \r\n            showCheck: !isRevealed && !isCorrect && constructedSentence.length === exerciseData.sentenceComponents.length, \r\n            showHint: !isRevealed && !isCorrect && constructedSentence.length < exerciseData.sentenceComponents.length, \r\n            showReveal: !isRevealed && !isCorrect,\r\n            showNext: true,\r\n        }}\r\n      />\r\n      <button onClick={handleReset} style={{...tileStyle, backgroundColor: '#6c757d', color: 'white', marginTop:'10px'}} disabled={isRevealed || isCorrect}>\r\n        🔄 {t('buttons.reset', 'Reset')}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WordOrderExercise;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAC/D,SAASC,mBAAmB,EAAEC,kBAAkB,QAAQ,uCAAuC;AAC/F,SAASC,eAAe,EAAEC,+BAA+B,EAAEC,+BAA+B,QAAQ,4CAA4C;AAC9I,SAASC,sBAAsB,QAAQ,0CAA0C;AACjF,OAAOC,eAAe,MAAM,mCAAmC;AAC/D,SAASC,YAAY,QAAQ,8BAA8B;AAC3D,SAASC,eAAe,QAAQ,+BAA+B;AAC/D,OAAOC,eAAe,MAAM,uBAAuB;AACnD,OAAOC,gBAAgB,MAAM,wBAAwB;AACrD,SAASC,OAAO,QAAQ,8BAA8B;AACtD,SAASC,WAAW,QAAQ,sCAAsC,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEpE,MAAMC,iBAAiB,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,IAAI;EAAEC;AAAY,CAAC,KAAK;EAAAC,EAAA;EAC7D,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGxB,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACyB,QAAQ,EAAEC,WAAW,CAAC,GAAG1B,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAAC2B,mBAAmB,EAAEC,sBAAsB,CAAC,GAAG5B,QAAQ,CAAC,EAAE,CAAC;EAElE,MAAM,CAAC6B,QAAQ,EAAEC,WAAW,CAAC,GAAG9B,QAAQ,CAAC;IAAE+B,OAAO,EAAE,EAAE;IAAEC,IAAI,EAAE;EAAG,CAAC,CAAC;EACnE,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGlC,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACmC,KAAK,EAAEC,QAAQ,CAAC,GAAGpC,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACqC,UAAU,EAAEC,aAAa,CAAC,GAAGtC,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACuC,SAAS,EAAEC,YAAY,CAAC,GAAGxC,QAAQ,CAAC,KAAK,CAAC;EAEjD,MAAM;IAAEyC;EAAY,CAAC,GAAGjC,sBAAsB,CAAC,CAAC;EAChD,MAAMkC,gBAAgB,GAAGjC,eAAe;EACxC,MAAM;IAAEkC,CAAC;IAAEC;EAAgB,CAAC,GAAG9B,OAAO,CAAC,CAAC;EACxC,MAAM+B,QAAQ,GAAG9B,WAAW,CAAC,CAAC;EAE9Bd,SAAS,CAAC,MAAM;IACd,IAAI2C,eAAe,EAAE;MACnBrC,+BAA+B,CAACqC,eAAe,CAAC;IAClD;EACF,CAAC,EAAE,CAACA,eAAe,CAAC,CAAC;EAErB,MAAME,gBAAgB,GAAG5C,WAAW,CAAC,YAAY;IAC/CgC,YAAY,CAAC,IAAI,CAAC;IAClBE,QAAQ,CAAC,IAAI,CAAC;IACdN,WAAW,CAAC;MAAEC,OAAO,EAAE,EAAE;MAAEC,IAAI,EAAE;IAAG,CAAC,CAAC;IACtCR,eAAe,CAAC,IAAI,CAAC;IACrBE,WAAW,CAAC,EAAE,CAAC;IACfE,sBAAsB,CAAC,EAAE,CAAC;IAC1BU,aAAa,CAAC,KAAK,CAAC;IACpBE,YAAY,CAAC,KAAK,CAAC;IAEnB,IAAI;MACF,MAAM;QAAEO,IAAI,EAAEC,YAAY;QAAEb,KAAK,EAAEc;MAAU,CAAC,GAAG,MAAM9C,mBAAmB,CAACgB,QAAQ,EAAEC,IAAI,CAAC;MAC1F,IAAI6B,SAAS,EAAE,MAAM,IAAIC,KAAK,CAACD,SAAS,CAAClB,OAAO,IAAIkB,SAAS,CAACd,KAAK,IAAI,mCAAmC,CAAC;MAE3G,MAAM;QAAEY,IAAI,EAAEI,UAAU;QAAEhB,KAAK,EAAEiB;MAAW,CAAC,GAAG,MAAMhD,kBAAkB,CAACe,QAAQ,EAAEC,IAAI,CAAC;MACxF,IAAIgC,UAAU,EAAEC,OAAO,CAACC,IAAI,CAAC,oDAAoD,CAAC;MAElF,IAAIN,YAAY,IAAIA,YAAY,CAACO,MAAM,GAAG,CAAC,EAAE;QAC3C,MAAMC,kBAAkB,GAAGnD,eAAe,CAAC2C,YAAY,EAAE7B,QAAQ,CAAC;QAClE,IAAI,CAACqC,kBAAkB,IAAIA,kBAAkB,CAACD,MAAM,KAAK,CAAC,EAAE;UACxDnB,QAAQ,CAACO,CAAC,CAAC,8BAA8B,EAAE,kCAAkC,CAAC,CAAC;UAC/ET,YAAY,CAAC,KAAK,CAAC;UAAE;QACzB;QACA,MAAMuB,eAAe,GAAG,MAAMnD,+BAA+B,CAACa,QAAQ,EAAEC,IAAI,EAAEoC,kBAAkB,EAAEL,UAAU,IAAI,EAAE,CAAC;QAEnH,IAAIM,eAAe,IAAIA,eAAe,CAACC,eAAe,EAAE;UACtD,IAAIC,UAAU,GAAGF,eAAe,CAACG,kBAAkB;UACnD,IAAI,CAACD,UAAU,IAAIA,UAAU,CAACJ,MAAM,KAAK,CAAC,EAAE;YAC1CI,UAAU,GAAGF,eAAe,CAACC,eAAe,CAACG,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC;UAC9E;UACAtC,eAAe,CAAC;YACdkC,eAAe,EAAED,eAAe,CAACC,eAAe;YAChDE,kBAAkB,EAAED;UACtB,CAAC,CAAC;UACFjC,WAAW,CAAChB,YAAY,CAACiD,UAAU,CAACI,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,MAAM;YAAED,IAAI;YAAEE,EAAE,EAAED;UAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QACnF,CAAC,MAAM;UACL7B,QAAQ,CAACO,CAAC,CAAC,iCAAiC,EAAE,oDAAoD,CAAC,CAAC;QACtG;MACF,CAAC,MAAM;QACLP,QAAQ,CAACO,CAAC,CAAC,mBAAmB,EAAE,6BAA6B,CAAC,CAAC;MACjE;IACF,CAAC,CAAC,OAAOwB,GAAG,EAAE;MACZd,OAAO,CAAClB,KAAK,CAAC,uCAAuC,EAAEgC,GAAG,CAAC;MAC3D/B,QAAQ,CAAC+B,GAAG,CAACpC,OAAO,IAAIY,CAAC,CAAC,wBAAwB,EAAE,+BAA+B,CAAC,CAAC;IACvF,CAAC,SAAS;MACRT,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC,EAAE,CAACf,QAAQ,EAAEC,IAAI,EAAEuB,CAAC,CAAC,CAAC;EAEvB1C,SAAS,CAAC,MAAM;IACd,IAAIkB,QAAQ,IAAIC,IAAI,IAAIA,IAAI,CAACmC,MAAM,GAAG,CAAC,EAAET,gBAAgB,CAAC,CAAC,CAAC,KACvD;MAAEZ,YAAY,CAAC,KAAK,CAAC;MAAEE,QAAQ,CAACO,CAAC,CAAC,sBAAsB,EAAE,sCAAsC,CAAC,CAAC;IAAE;EAC3G,CAAC,EAAE,CAACG,gBAAgB,EAAEzB,WAAW,EAAEF,QAAQ,EAAEC,IAAI,EAAEuB,CAAC,CAAC,CAAC;EAEtD,MAAMyB,eAAe,GAAIC,IAAI,IAAK;IAChC,IAAIhC,UAAU,IAAIE,SAAS,EAAE;IAC7BX,sBAAsB,CAAC0C,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAED,IAAI,CAAC,CAAC;IAC/C3C,WAAW,CAAC4C,IAAI,IAAIA,IAAI,CAACC,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACN,EAAE,KAAKG,IAAI,CAACH,EAAE,CAAC,CAAC;IAC7DpC,WAAW,CAAC;MAAEC,OAAO,EAAE,EAAE;MAAEC,IAAI,EAAE;IAAG,CAAC,CAAC;EACxC,CAAC;EAED,MAAMyC,eAAe,GAAIC,aAAa,IAAK;IACzC,IAAIrC,UAAU,IAAIE,SAAS,EAAE;IAC7B,MAAMoC,YAAY,GAAGhD,mBAAmB,CAAC+C,aAAa,CAAC;IACvD9C,sBAAsB,CAAC0C,IAAI,IAAIA,IAAI,CAACC,MAAM,CAAC,CAACK,CAAC,EAAEX,KAAK,KAAKA,KAAK,KAAKS,aAAa,CAAC,CAAC;IAClFhD,WAAW,CAAC4C,IAAI,IAAI5D,YAAY,CAAC,CAAC,GAAG4D,IAAI,EAAEK,YAAY,CAAC,CAAC,CAAC;IAC1D7C,WAAW,CAAC;MAAEC,OAAO,EAAE,EAAE;MAAEC,IAAI,EAAE;IAAG,CAAC,CAAC;EACxC,CAAC;EAED,MAAM6C,WAAW,GAAGA,CAAA,KAAM;IACxB,IAAI,CAACtD,YAAY,IAAIc,UAAU,IAAIE,SAAS,EAAE;IAC9C,MAAMuC,kBAAkB,GAAGnD,mBAAmB,CAACoC,GAAG,CAACS,IAAI,IAAIA,IAAI,CAACR,IAAI,CAAC,CAACe,IAAI,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,CAAC;IACtF,MAAMC,qBAAqB,GAAG1D,YAAY,CAACmC,eAAe,CAACG,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAACmB,IAAI,CAAC,CAAC;IACtF,MAAME,MAAM,GAAG,aAAavE,eAAe,CAACsE,qBAAqB,CAAC,EAAE;IAEpE,IAAItE,eAAe,CAACmE,kBAAkB,CAAC,KAAKnE,eAAe,CAACsE,qBAAqB,CAAC,EAAE;MAClFnD,WAAW,CAAC;QAAEC,OAAO,EAAEY,CAAC,CAAC,kBAAkB,EAAE,UAAU,CAAC;QAAEX,IAAI,EAAE;MAAU,CAAC,CAAC;MAC5EQ,YAAY,CAAC,IAAI,CAAC;MAClBK,QAAQ,CAACsC,kBAAkB,CAACD,MAAM,EAAE,mBAAmB,CAAC;IAC1D,CAAC,MAAM;MACLpD,WAAW,CAAC;QAAEC,OAAO,EAAEY,CAAC,CAAC,6BAA6B,EAAE,8CAA8CD,gBAAgB,CAACnB,YAAY,CAACmC,eAAe,EAAEvC,QAAQ,CAAC,GAAG,EAAE;UAACuC,eAAe,EAAEhB,gBAAgB,CAACnB,YAAY,CAACmC,eAAe,EAAEvC,QAAQ;QAAC,CAAC,CAAC;QAAEa,IAAI,EAAE;MAAY,CAAC,CAAC;MACrQa,QAAQ,CAACuC,oBAAoB,CAACF,MAAM,EAAE,mBAAmB,CAAC;IAC5D;EACF,CAAC;EAED,MAAMG,QAAQ,GAAGA,CAAA,KAAM;IACrB,IAAI,CAAC9D,YAAY,IAAIc,UAAU,IAAIE,SAAS,IAAIZ,mBAAmB,CAAC4B,MAAM,IAAIhC,YAAY,CAACqC,kBAAkB,CAACL,MAAM,EAAE;IACtH,MAAM+B,oBAAoB,GAAG3D,mBAAmB,CAAC4B,MAAM;IACvD,MAAMgC,qBAAqB,GAAGhE,YAAY,CAACqC,kBAAkB,CAAC0B,oBAAoB,CAAC;IACnFxD,WAAW,CAAC;MAAEC,OAAO,EAAEY,CAAC,CAAC,wBAAwB,EAAE,2BAA2BD,gBAAgB,CAAC6C,qBAAqB,EAAEpE,QAAQ,CAAC,IAAI,EAAE;QAAC6C,IAAI,EAAEtB,gBAAgB,CAAC6C,qBAAqB,EAAEpE,QAAQ;MAAC,CAAC,CAAC;MAAEa,IAAI,EAAE;IAAO,CAAC,CAAC;EAClN,CAAC;EAED,MAAMwD,eAAe,GAAGA,CAAA,KAAM;IAC5B,IAAI,CAACjE,YAAY,EAAE;IACnB,MAAM0D,qBAAqB,GAAG1D,YAAY,CAACmC,eAAe,CAACG,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAACmB,IAAI,CAAC,CAAC;IACtF,MAAME,MAAM,GAAG,aAAavE,eAAe,CAACsE,qBAAqB,CAAC,EAAE;IACpErD,sBAAsB,CAACL,YAAY,CAACqC,kBAAkB,CAACG,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,MAAM;MAACD,IAAI;MAAEE,EAAE,EAAED;IAAK,CAAC,CAAC,CAAC,CAAC;IACjGvC,WAAW,CAAC,EAAE,CAAC;IACfI,WAAW,CAAC;MAAEC,OAAO,EAAEY,CAAC,CAAC,4BAA4B,EAAE,0BAA0BD,gBAAgB,CAACnB,YAAY,CAACmC,eAAe,EAAEvC,QAAQ,CAAC,GAAG,EAAE;QAACuC,eAAe,EAAEhB,gBAAgB,CAACnB,YAAY,CAACmC,eAAe,EAAEvC,QAAQ;MAAC,CAAC,CAAC;MAAEa,IAAI,EAAE;IAAO,CAAC,CAAC;IAC3OM,aAAa,CAAC,IAAI,CAAC;IACnBE,YAAY,CAAC,IAAI,CAAC;IAClBK,QAAQ,CAAC4C,cAAc,CAACP,MAAM,EAAE,mBAAmB,EAAE,KAAK,CAAC;EAC7D,CAAC;EAED,MAAMQ,WAAW,GAAGA,CAAA,KAAM;IACxB,IAAI,CAACnE,YAAY,EAAE;IACnBK,sBAAsB,CAAC,EAAE,CAAC;IAC1BF,WAAW,CAAChB,YAAY,CAACa,YAAY,CAACqC,kBAAkB,CAACG,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,MAAM;MAAED,IAAI;MAAEE,EAAE,EAAED;IAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IACtGnC,WAAW,CAAC;MAAEC,OAAO,EAAE,EAAE;MAAEC,IAAI,EAAE;IAAG,CAAC,CAAC;IACtCQ,YAAY,CAAC,KAAK,CAAC;IACnBF,aAAa,CAAC,KAAK,CAAC;EACtB,CAAC;EAED,IAAIL,SAAS,EAAE,oBAAOhB,OAAA;IAAA0E,QAAA,EAAIhD,CAAC,CAAC,2BAA2B,EAAE,gCAAgC;EAAC;IAAAiD,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAI,CAAC;EAC/F,IAAI5D,KAAK,EAAE,oBAAOlB,OAAA,CAACL,eAAe;IAACmB,OAAO,EAAEI,KAAM;IAACH,IAAI,EAAC;EAAO;IAAA4D,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;EAClE,IAAI,CAACxE,YAAY,IAAI,CAACU,SAAS,EAAE,oBAAOhB,OAAA,CAACL,eAAe;IAACmB,OAAO,EAAEY,CAAC,CAAC,kBAAkB,EAAE,6BAA6B,CAAE;IAACX,IAAI,EAAC;EAAM;IAAA4D,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;EAEtI,MAAMC,SAAS,GAAG;IAAEC,OAAO,EAAE,WAAW;IAAEC,MAAM,EAAE,KAAK;IAAEC,MAAM,EAAE,gBAAgB;IAAEC,YAAY,EAAE,KAAK;IAAEC,MAAM,EAAE,SAAS;IAAEC,UAAU,EAAE;EAAS,CAAC;EACjJ,MAAMC,aAAa,GAAG;IAAEC,SAAS,EAAE,MAAM;IAAEL,MAAM,EAAE,iBAAiB;IAAEF,OAAO,EAAE,MAAM;IAAEQ,YAAY,EAAE,MAAM;IAAEC,OAAO,EAAE,MAAM;IAAEC,QAAQ,EAAE,MAAM;IAAEC,UAAU,EAAE;EAAS,CAAC;EAEtK,oBACE3F,OAAA;IAAK4F,KAAK,EAAE;MAAEC,SAAS,EAAE,QAAQ;MAAEb,OAAO,EAAE,MAAM;MAAEE,MAAM,EAAE,gBAAgB;MAAEC,YAAY,EAAE;IAAM,CAAE;IAAAT,QAAA,gBAClG1E,OAAA;MAAA0E,QAAA,EAAKhD,CAAC,CAAC,wBAAwB,EAAE,sCAAsC;IAAC;MAAAiD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAE9E9E,OAAA;MAAK4F,KAAK,EAAE;QAAC,GAAGN,aAAa;QAAEQ,cAAc,EAAE,YAAY;QAAEC,eAAe,EAAE;MAAS,CAAE;MAAArB,QAAA,GACtFhE,mBAAmB,CAACoC,GAAG,CAAC,CAACS,IAAI,EAAEP,KAAK,kBACnChD,OAAA;QAAgCgG,OAAO,EAAEA,CAAA,KAAMxC,eAAe,CAACR,KAAK,CAAE;QAAC4C,KAAK,EAAEb,SAAU;QAACkB,QAAQ,EAAE7E,UAAU,IAAIE,SAAU;QAAAoD,QAAA,EACxHjD,gBAAgB,CAAC8B,IAAI,CAACR,IAAI,EAAE7C,QAAQ;MAAC,GAD3B,QAAQqD,IAAI,CAACN,EAAE,EAAE;QAAA0B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEtB,CACT,CAAC,EACDpE,mBAAmB,CAAC4B,MAAM,KAAK,CAAC,iBAAItC,OAAA;QAAM4F,KAAK,EAAE;UAACM,KAAK,EAAE;QAAM,CAAE;QAAAxB,QAAA,EAAEhD,CAAC,CAAC,sBAAsB,EAAE,2CAA2C;MAAC;QAAAiD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/I,CAAC,eAEN9E,OAAA;MAAK4F,KAAK,EAAE;QAAC,GAAGN,aAAa;QAAEQ,cAAc,EAAE,QAAQ;QAAEC,eAAe,EAAE;MAAM,CAAE;MAAArB,QAAA,GAC/ElE,QAAQ,CAACsC,GAAG,CAACS,IAAI,iBAChBvD,OAAA;QAAgCgG,OAAO,EAAEA,CAAA,KAAM7C,eAAe,CAACI,IAAI,CAAE;QAACqC,KAAK,EAAEb,SAAU;QAACkB,QAAQ,EAAE7E,UAAU,IAAIE,SAAU;QAAAoD,QAAA,EACvHjD,gBAAgB,CAAC8B,IAAI,CAACR,IAAI,EAAE7C,QAAQ;MAAC,GAD3B,QAAQqD,IAAI,CAACN,EAAE,EAAE;QAAA0B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEtB,CACT,CAAC,EACDtE,QAAQ,CAAC8B,MAAM,KAAK,CAAC,IAAI5B,mBAAmB,CAAC4B,MAAM,GAAG,CAAC,iBAAItC,OAAA;QAAM4F,KAAK,EAAE;UAACM,KAAK,EAAE;QAAM,CAAE;QAAAxB,QAAA,EAAEhD,CAAC,CAAC,uBAAuB,EAAE,mBAAmB;MAAC;QAAAiD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/I,CAAC,eAEN9E,OAAA,CAACL,eAAe;MAACmB,OAAO,EAAEF,QAAQ,CAACE,OAAQ;MAACC,IAAI,EAAEH,QAAQ,CAACG,IAAK;MAACb,QAAQ,EAAEA;IAAS;MAAAyE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAEvF9E,OAAA,CAACJ,gBAAgB;MACfuG,aAAa,EAAE,CAAC/E,UAAU,IAAI,CAACE,SAAS,IAAIZ,mBAAmB,CAAC4B,MAAM,KAAKhC,YAAY,CAACqC,kBAAkB,CAACL,MAAM,GAAGsB,WAAW,GAAGwC,SAAU;MAC5IC,UAAU,EAAE,CAACjF,UAAU,IAAI,CAACE,SAAS,IAAIZ,mBAAmB,CAAC4B,MAAM,GAAGhC,YAAY,CAACqC,kBAAkB,CAACL,MAAM,GAAG8B,QAAQ,GAAGgC,SAAU;MACpIE,cAAc,EAAE,CAAClF,UAAU,IAAI,CAACE,SAAS,GAAGiD,eAAe,GAAG6B,SAAU;MACxEG,cAAc,EAAE1E,gBAAiB;MACjC2E,MAAM,EAAE;QACJC,SAAS,EAAE,CAACrF,UAAU,IAAI,CAACE,SAAS,IAAIZ,mBAAmB,CAAC4B,MAAM,KAAKhC,YAAY,CAACqC,kBAAkB,CAACL,MAAM;QAC7G8B,QAAQ,EAAE,CAAChD,UAAU,IAAI,CAACE,SAAS,IAAIZ,mBAAmB,CAAC4B,MAAM,GAAGhC,YAAY,CAACqC,kBAAkB,CAACL,MAAM;QAC1GoE,UAAU,EAAE,CAACtF,UAAU,IAAI,CAACE,SAAS;QACrCqF,QAAQ,EAAE;MACd;IAAE;MAAAhC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eACF9E,OAAA;MAAQgG,OAAO,EAAEvB,WAAY;MAACmB,KAAK,EAAE;QAAC,GAAGb,SAAS;QAAEgB,eAAe,EAAE,SAAS;QAAEG,KAAK,EAAE,OAAO;QAAEU,SAAS,EAAC;MAAM,CAAE;MAACX,QAAQ,EAAE7E,UAAU,IAAIE,SAAU;MAAAoD,QAAA,GAAC,eACjJ,EAAChD,CAAC,CAAC,eAAe,EAAE,OAAO,CAAC;IAAA;MAAAiD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV,CAAC;AAACzE,EAAA,CAvLIJ,iBAAiB;EAAA,QAWGV,sBAAsB,EAEfM,OAAO,EACrBC,WAAW;AAAA;AAAA+G,EAAA,GAdxB5G,iBAAiB;AAyLvB,eAAeA,iBAAiB;AAAC,IAAA4G,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}