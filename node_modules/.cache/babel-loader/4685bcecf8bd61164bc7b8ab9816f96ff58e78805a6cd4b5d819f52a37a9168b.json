{"ast":null,"code":"var _jsxFileName = \"/workspaces/COSYlanguagesproject/src/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useCallback, useEffect } from 'react';\nimport { loginTeacher as apiLoginTeacher, logoutUser as apiLogoutUser } from './api/auth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport function useAuth() {\n  _s();\n  return useContext(AuthContext);\n}\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport function AuthProvider({\n  children\n}) {\n  _s2();\n  const [authToken, setAuthToken] = useState(sessionStorage.getItem('authToken'));\n  const [currentUser, setCurrentUser] = useState(JSON.parse(sessionStorage.getItem('currentUser')));\n  const [authError, setAuthError] = useState(null);\n  const [loadingAuth, setLoadingAuth] = useState(false);\n\n  // Effect to update sessionStorage when authToken or currentUser changes\n  useEffect(() => {\n    if (authToken) {\n      sessionStorage.setItem('authToken', authToken);\n    } else {\n      sessionStorage.removeItem('authToken');\n    }\n  }, [authToken]);\n  useEffect(() => {\n    if (currentUser) {\n      sessionStorage.setItem('currentUser', JSON.stringify(currentUser));\n    } else {\n      sessionStorage.removeItem('currentUser');\n    }\n  }, [currentUser]);\n  const login = useCallback(async pin => {\n    setLoadingAuth(true);\n    setAuthError(null);\n    try {\n      const data = await apiLoginTeacher(pin);\n      setAuthToken(data.token);\n      setCurrentUser({\n        id: data.userId,\n        role: data.role,\n        username: data.username\n      }); // Assuming username might come from API\n      return true;\n    } catch (err) {\n      console.error(\"Error during login:\", err);\n      setAuthError(err.message || 'Failed to login');\n      setAuthToken(null);\n      setCurrentUser(null);\n      return false;\n    } finally {\n      setLoadingAuth(false);\n    }\n  }, []);\n  const logout = useCallback(async () => {\n    setLoadingAuth(true);\n    setAuthError(null);\n    if (authToken) {\n      try {\n        await apiLogoutUser(authToken);\n      } catch (err) {\n        // Log error but proceed with client-side logout anyway\n        console.error(\"Error during API logout:\", err);\n        setAuthError(err.message || 'Failed to logout from server, logged out locally.');\n      }\n    }\n    setAuthToken(null);\n    setCurrentUser(null);\n    sessionStorage.removeItem('authToken'); // Ensure removal\n    sessionStorage.removeItem('currentUser');\n    setLoadingAuth(false);\n    // Optionally, redirect to login or home page via useNavigate if used here\n  }, [authToken]);\n\n  // Check token validity on initial load (optional, depends on backend token check endpoint)\n  // For now, we rely on sessionStorage and assume token is valid if present.\n  // A more robust solution would verify the token with the backend here.\n\n  const value = {\n    authToken,\n    currentUser,\n    isAuthenticated: !!authToken && !!currentUser,\n    authError,\n    loadingAuth,\n    login,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 9\n  }, this);\n}\n_s2(AuthProvider, \"3KrqYLkZHT7VguaMaECntn7iVmI=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useCallback","useEffect","loginTeacher","apiLoginTeacher","logoutUser","apiLogoutUser","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","authToken","setAuthToken","sessionStorage","getItem","currentUser","setCurrentUser","JSON","parse","authError","setAuthError","loadingAuth","setLoadingAuth","setItem","removeItem","stringify","login","pin","data","token","id","userId","role","username","err","console","error","message","logout","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/workspaces/COSYlanguagesproject/src/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useCallback, useEffect } from 'react';\r\nimport { loginTeacher as apiLoginTeacher, logoutUser as apiLogoutUser } from './api/auth';\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport function useAuth() {\r\n    return useContext(AuthContext);\r\n}\r\n\r\nexport function AuthProvider({ children }) {\r\n    const [authToken, setAuthToken] = useState(sessionStorage.getItem('authToken'));\r\n    const [currentUser, setCurrentUser] = useState(JSON.parse(sessionStorage.getItem('currentUser')));\r\n    const [authError, setAuthError] = useState(null);\r\n    const [loadingAuth, setLoadingAuth] = useState(false);\r\n\r\n    // Effect to update sessionStorage when authToken or currentUser changes\r\n    useEffect(() => {\r\n        if (authToken) {\r\n            sessionStorage.setItem('authToken', authToken);\r\n        } else {\r\n            sessionStorage.removeItem('authToken');\r\n        }\r\n    }, [authToken]);\r\n\r\n    useEffect(() => {\r\n        if (currentUser) {\r\n            sessionStorage.setItem('currentUser', JSON.stringify(currentUser));\r\n        } else {\r\n            sessionStorage.removeItem('currentUser');\r\n        }\r\n    }, [currentUser]);\r\n\r\n    const login = useCallback(async (pin) => {\r\n        setLoadingAuth(true);\r\n        setAuthError(null);\r\n        try {\r\n            const data = await apiLoginTeacher(pin);\r\n            setAuthToken(data.token);\r\n            setCurrentUser({ id: data.userId, role: data.role, username: data.username }); // Assuming username might come from API\r\n            return true;\r\n        } catch (err) {\r\n            console.error(\"Error during login:\", err);\r\n            setAuthError(err.message || 'Failed to login');\r\n            setAuthToken(null);\r\n            setCurrentUser(null);\r\n            return false;\r\n        } finally {\r\n            setLoadingAuth(false);\r\n        }\r\n    }, []);\r\n\r\n    const logout = useCallback(async () => {\r\n        setLoadingAuth(true);\r\n        setAuthError(null);\r\n        if (authToken) {\r\n            try {\r\n                await apiLogoutUser(authToken);\r\n            } catch (err) {\r\n                // Log error but proceed with client-side logout anyway\r\n                console.error(\"Error during API logout:\", err);\r\n                setAuthError(err.message || 'Failed to logout from server, logged out locally.');\r\n            }\r\n        }\r\n        setAuthToken(null);\r\n        setCurrentUser(null);\r\n        sessionStorage.removeItem('authToken'); // Ensure removal\r\n        sessionStorage.removeItem('currentUser');\r\n        setLoadingAuth(false);\r\n        // Optionally, redirect to login or home page via useNavigate if used here\r\n    }, [authToken]);\r\n\r\n    // Check token validity on initial load (optional, depends on backend token check endpoint)\r\n    // For now, we rely on sessionStorage and assume token is valid if present.\r\n    // A more robust solution would verify the token with the backend here.\r\n\r\n    const value = {\r\n        authToken,\r\n        currentUser,\r\n        isAuthenticated: !!authToken && !!currentUser,\r\n        authError,\r\n        loadingAuth,\r\n        login,\r\n        logout,\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={value}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n}\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,WAAW,EAAEC,SAAS,QAAQ,OAAO;AAC1F,SAASC,YAAY,IAAIC,eAAe,EAAEC,UAAU,IAAIC,aAAa,QAAQ,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1F,OAAO,MAAMC,WAAW,gBAAGX,aAAa,CAAC,CAAC;AAE1C,OAAO,SAASY,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACtB,OAAOZ,UAAU,CAACU,WAAW,CAAC;AAClC;AAACE,EAAA,CAFeD,OAAO;AAIvB,OAAO,SAASE,YAAYA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,GAAA;EACvC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGhB,QAAQ,CAACiB,cAAc,CAACC,OAAO,CAAC,WAAW,CAAC,CAAC;EAC/E,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGpB,QAAQ,CAACqB,IAAI,CAACC,KAAK,CAACL,cAAc,CAACC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;EACjG,MAAM,CAACK,SAAS,EAAEC,YAAY,CAAC,GAAGxB,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACyB,WAAW,EAAEC,cAAc,CAAC,GAAG1B,QAAQ,CAAC,KAAK,CAAC;;EAErD;EACAE,SAAS,CAAC,MAAM;IACZ,IAAIa,SAAS,EAAE;MACXE,cAAc,CAACU,OAAO,CAAC,WAAW,EAAEZ,SAAS,CAAC;IAClD,CAAC,MAAM;MACHE,cAAc,CAACW,UAAU,CAAC,WAAW,CAAC;IAC1C;EACJ,CAAC,EAAE,CAACb,SAAS,CAAC,CAAC;EAEfb,SAAS,CAAC,MAAM;IACZ,IAAIiB,WAAW,EAAE;MACbF,cAAc,CAACU,OAAO,CAAC,aAAa,EAAEN,IAAI,CAACQ,SAAS,CAACV,WAAW,CAAC,CAAC;IACtE,CAAC,MAAM;MACHF,cAAc,CAACW,UAAU,CAAC,aAAa,CAAC;IAC5C;EACJ,CAAC,EAAE,CAACT,WAAW,CAAC,CAAC;EAEjB,MAAMW,KAAK,GAAG7B,WAAW,CAAC,MAAO8B,GAAG,IAAK;IACrCL,cAAc,CAAC,IAAI,CAAC;IACpBF,YAAY,CAAC,IAAI,CAAC;IAClB,IAAI;MACA,MAAMQ,IAAI,GAAG,MAAM5B,eAAe,CAAC2B,GAAG,CAAC;MACvCf,YAAY,CAACgB,IAAI,CAACC,KAAK,CAAC;MACxBb,cAAc,CAAC;QAAEc,EAAE,EAAEF,IAAI,CAACG,MAAM;QAAEC,IAAI,EAAEJ,IAAI,CAACI,IAAI;QAAEC,QAAQ,EAAEL,IAAI,CAACK;MAAS,CAAC,CAAC,CAAC,CAAC;MAC/E,OAAO,IAAI;IACf,CAAC,CAAC,OAAOC,GAAG,EAAE;MACVC,OAAO,CAACC,KAAK,CAAC,qBAAqB,EAAEF,GAAG,CAAC;MACzCd,YAAY,CAACc,GAAG,CAACG,OAAO,IAAI,iBAAiB,CAAC;MAC9CzB,YAAY,CAAC,IAAI,CAAC;MAClBI,cAAc,CAAC,IAAI,CAAC;MACpB,OAAO,KAAK;IAChB,CAAC,SAAS;MACNM,cAAc,CAAC,KAAK,CAAC;IACzB;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMgB,MAAM,GAAGzC,WAAW,CAAC,YAAY;IACnCyB,cAAc,CAAC,IAAI,CAAC;IACpBF,YAAY,CAAC,IAAI,CAAC;IAClB,IAAIT,SAAS,EAAE;MACX,IAAI;QACA,MAAMT,aAAa,CAACS,SAAS,CAAC;MAClC,CAAC,CAAC,OAAOuB,GAAG,EAAE;QACV;QACAC,OAAO,CAACC,KAAK,CAAC,0BAA0B,EAAEF,GAAG,CAAC;QAC9Cd,YAAY,CAACc,GAAG,CAACG,OAAO,IAAI,mDAAmD,CAAC;MACpF;IACJ;IACAzB,YAAY,CAAC,IAAI,CAAC;IAClBI,cAAc,CAAC,IAAI,CAAC;IACpBH,cAAc,CAACW,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC;IACxCX,cAAc,CAACW,UAAU,CAAC,aAAa,CAAC;IACxCF,cAAc,CAAC,KAAK,CAAC;IACrB;EACJ,CAAC,EAAE,CAACX,SAAS,CAAC,CAAC;;EAEf;EACA;EACA;;EAEA,MAAM4B,KAAK,GAAG;IACV5B,SAAS;IACTI,WAAW;IACXyB,eAAe,EAAE,CAAC,CAAC7B,SAAS,IAAI,CAAC,CAACI,WAAW;IAC7CI,SAAS;IACTE,WAAW;IACXK,KAAK;IACLY;EACJ,CAAC;EAED,oBACIlC,OAAA,CAACC,WAAW,CAACoC,QAAQ;IAACF,KAAK,EAAEA,KAAM;IAAA9B,QAAA,EAC9BA;EAAQ;IAAAiC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE/B;AAACnC,GAAA,CAjFeF,YAAY;AAAAsC,EAAA,GAAZtC,YAAY;AAAA,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}