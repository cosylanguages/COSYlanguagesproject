{"ast":null,"code":"import _objectSpread from\"/workspaces/COSYlanguagesproject/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect,useCallback}from'react';import{loadReadingData}from'../../../../utils/exerciseDataService';import{useLatinizationContext}from'../../../../contexts/LatinizationContext';import useLatinization from'../../../../hooks/useLatinization';import FeedbackDisplay from'../../FeedbackDisplay';import ExerciseControls from'../../ExerciseControls';import{useI18n}from'../../../../i18n/I18nContext';import{jsx as _jsx,Fragment as _Fragment,jsxs as _jsxs}from\"react/jsx-runtime\";const StoryReadingExercise=_ref=>{let{language,days,exerciseKey}=_ref;const[currentStory,setCurrentStory]=useState(null);// { title: string, paragraphs: string[] }\nconst[isLoading,setIsLoading]=useState(true);const[error,setError]=useState(null);const{isLatinized}=useLatinizationContext();const getLatinizedText=useLatinization;const{t}=useI18n();const fetchNewStory=useCallback(async()=>{setIsLoading(true);setError(null);setCurrentStory(null);try{const{data:stories,error:fetchError}=await loadReadingData(language,days);if(fetchError){throw new Error(fetchError.message||fetchError.error||'Failed to load reading data.');}if(stories&&stories.length>0){const randomIndex=Math.floor(Math.random()*stories.length);setCurrentStory(stories[randomIndex]);}else{setError(t('exercises.noStories','No stories found for the selected criteria.'));}}catch(err){console.error(\"StoryReadingExercise - Error fetching story:\",err);setError(err.message||t('errors.unexpectedError','An unexpected error occurred.'));}finally{setIsLoading(false);}},[language,days,t]);useEffect(()=>{if(language&&days&&days.length>0){fetchNewStory();}else{setIsLoading(false);setError(t('errors.selectLangDay',\"Please select a language and day(s).\"));}},[fetchNewStory,exerciseKey,language,days,t]);// For reading exercises, \"Hint\", \"Check Answer\", \"Reveal Answer\" might not be directly applicable\n// or would require more complex logic (e.g., comprehension questions, vocabulary popups).\n// For this migration, we'll focus on displaying the story and providing a \"Next\" button.\nif(isLoading)return/*#__PURE__*/_jsx(\"p\",{children:t('loading.readingExercise','Loading story...')});if(error)return/*#__PURE__*/_jsx(FeedbackDisplay,{message:error,type:\"error\"});if(!currentStory&&!isLoading)return/*#__PURE__*/_jsx(FeedbackDisplay,{message:t('exercises.noStoryToDisplay','No story to display. Try different selections.'),type:\"info\"});const storyTitle=currentStory?getLatinizedText(currentStory.title,language):\"\";return/*#__PURE__*/_jsxs(\"div\",{style:{padding:'20px',border:'1px solid #eee',borderRadius:'8px',maxWidth:'800px',margin:'0 auto'},children:[currentStory&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"h3\",{style:_objectSpread({textAlign:'center',marginBottom:'20px'},isLatinized&&currentStory.title!==storyTitle&&{fontStyle:'italic'}),children:storyTitle}),/*#__PURE__*/_jsx(\"div\",{style:{textAlign:'left',lineHeight:'1.8',fontSize:'1.1rem'},children:currentStory.paragraphs.map((paragraph,index)=>/*#__PURE__*/_jsx(\"p\",{style:_objectSpread({marginBottom:'1rem'},isLatinized&&paragraph!==getLatinizedText(paragraph,language)&&{fontStyle:'italic'}),children:getLatinizedText(paragraph,language)},index))})]}),/*#__PURE__*/_jsx(ExerciseControls,{onNextExercise:fetchNewStory,config:{showCheck:false,showHint:false,showReveal:false,showNext:true}})]});};export default StoryReadingExercise;","map":{"version":3,"names":["React","useState","useEffect","useCallback","loadReadingData","useLatinizationContext","useLatinization","FeedbackDisplay","ExerciseControls","useI18n","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","StoryReadingExercise","_ref","language","days","exerciseKey","currentStory","setCurrentStory","isLoading","setIsLoading","error","setError","isLatinized","getLatinizedText","t","fetchNewStory","data","stories","fetchError","Error","message","length","randomIndex","Math","floor","random","err","console","children","type","storyTitle","title","style","padding","border","borderRadius","maxWidth","margin","_objectSpread","textAlign","marginBottom","fontStyle","lineHeight","fontSize","paragraphs","map","paragraph","index","onNextExercise","config","showCheck","showHint","showReveal","showNext"],"sources":["/workspaces/COSYlanguagesproject/src/components/Freestyle/exercises/reading/StoryReadingExercise.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { loadReadingData } from '../../../../utils/exerciseDataService';\r\nimport { useLatinizationContext } from '../../../../contexts/LatinizationContext';\r\nimport useLatinization from '../../../../hooks/useLatinization';\r\nimport FeedbackDisplay from '../../FeedbackDisplay';\r\nimport ExerciseControls from '../../ExerciseControls';\r\nimport { useI18n } from '../../../../i18n/I18nContext';\r\n\r\nconst StoryReadingExercise = ({ language, days, exerciseKey }) => {\r\n  const [currentStory, setCurrentStory] = useState(null); // { title: string, paragraphs: string[] }\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  const { isLatinized } = useLatinizationContext();\r\n  const getLatinizedText = useLatinization;\r\n  const { t } = useI18n();\r\n\r\n  const fetchNewStory = useCallback(async () => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    setCurrentStory(null);\r\n\r\n    try {\r\n      const { data: stories, error: fetchError } = await loadReadingData(language, days);\r\n      if (fetchError) {\r\n        throw new Error(fetchError.message || fetchError.error || 'Failed to load reading data.');\r\n      }\r\n\r\n      if (stories && stories.length > 0) {\r\n        const randomIndex = Math.floor(Math.random() * stories.length);\r\n        setCurrentStory(stories[randomIndex]);\r\n      } else {\r\n        setError(t('exercises.noStories', 'No stories found for the selected criteria.'));\r\n      }\r\n    } catch (err) {\r\n      console.error(\"StoryReadingExercise - Error fetching story:\", err);\r\n      setError(err.message || t('errors.unexpectedError', 'An unexpected error occurred.'));\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [language, days, t]);\r\n\r\n  useEffect(() => {\r\n    if (language && days && days.length > 0) {\r\n      fetchNewStory();\r\n    } else {\r\n      setIsLoading(false);\r\n      setError(t('errors.selectLangDay', \"Please select a language and day(s).\"));\r\n    }\r\n  }, [fetchNewStory, exerciseKey, language, days, t]);\r\n\r\n  // For reading exercises, \"Hint\", \"Check Answer\", \"Reveal Answer\" might not be directly applicable\r\n  // or would require more complex logic (e.g., comprehension questions, vocabulary popups).\r\n  // For this migration, we'll focus on displaying the story and providing a \"Next\" button.\r\n\r\n  if (isLoading) return <p>{t('loading.readingExercise', 'Loading story...')}</p>;\r\n  if (error) return <FeedbackDisplay message={error} type=\"error\" />;\r\n  if (!currentStory && !isLoading) return <FeedbackDisplay message={t('exercises.noStoryToDisplay', 'No story to display. Try different selections.')} type=\"info\" />;\r\n  \r\n  const storyTitle = currentStory ? getLatinizedText(currentStory.title, language) : \"\";\r\n\r\n  return (\r\n    <div style={{ padding: '20px', border: '1px solid #eee', borderRadius: '8px', maxWidth: '800px', margin: '0 auto' }}>\r\n      {currentStory && (\r\n        <>\r\n          <h3 style={{ textAlign: 'center', marginBottom: '20px', ...(isLatinized && currentStory.title !== storyTitle && {fontStyle: 'italic'}) }}>\r\n            {storyTitle}\r\n          </h3>\r\n          <div style={{ textAlign: 'left', lineHeight: '1.8', fontSize: '1.1rem' }}>\r\n            {currentStory.paragraphs.map((paragraph, index) => (\r\n              <p key={index} style={{ marginBottom: '1rem', ...(isLatinized && paragraph !== getLatinizedText(paragraph, language) && {fontStyle: 'italic'}) }}>\r\n                {getLatinizedText(paragraph, language)}\r\n              </p>\r\n            ))}\r\n          </div>\r\n        </>\r\n      )}\r\n      <ExerciseControls\r\n        onNextExercise={fetchNewStory}\r\n        config={{\r\n          showCheck: false,\r\n          showHint: false, \r\n          showReveal: false,\r\n          showNext: true,\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StoryReadingExercise;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}