{"ast":null,"code":"import _objectSpread from\"/workspaces/COSYlanguagesproject/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect,useCallback}from'react';import{loadSpeakingPromptsData}from'../../../../utils/exerciseDataService';import{useLatinizationContext}from'../../../../contexts/LatinizationContext';import useLatinization from'../../../../hooks/useLatinization';import{mapLanguageToSpeechCode}from'../../../../utils/speechUtils';// For language mapping\nimport FeedbackDisplay from'../../FeedbackDisplay';import ExerciseControls from'../../ExerciseControls';import{useI18n}from'../../../../i18n/I18nContext';import{shuffleArray}from'../../../../utils/arrayUtils';// Import shuffleArray\n// TODO: Implement a proper useSpeechRecognition hook or service for STT\n// This mock function is a placeholder.\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const mockStartSpeechRecognition=_ref=>{let{language,onStart,onResult,onError,onEnd}=_ref;console.warn(\"Speech Recognition is mocked. Implement useSpeechRecognition hook.\");onStart();setTimeout(()=>{const mockTranscript=\"This is a mocked transcript.\";onResult(mockTranscript);// onError({ error: \"no-speech\" }); // Uncomment to test error handling\nonEnd();},2000);};const SpeakingQuestionExercise=_ref2=>{let{language,days,exerciseKey}=_ref2;const[questions,setQuestions]=useState([]);const[currentQuestionIndex,setCurrentQuestionIndex]=useState(0);const[transcript,setTranscript]=useState('');const[isRecording,setIsRecording]=useState(false);const[feedback,setFeedback]=useState({message:'',type:''});const[isLoading,setIsLoading]=useState(true);const[error,setError]=useState(null);const{isLatinized}=useLatinizationContext();const getLatinizedText=useLatinization;const{t}=useI18n();const fetchQuestions=useCallback(async()=>{setIsLoading(true);setError(null);setQuestions([]);setCurrentQuestionIndex(0);setTranscript('');setFeedback({message:'',type:''});try{const{data,error:fetchError}=await loadSpeakingPromptsData(language,days);if(fetchError){throw new Error(fetchError.message||fetchError.error||'Failed to load speaking questions.');}if(data&&data.length>0){setQuestions(shuffleArray(data));// Shuffle questions\n}else{setError(t('exercises.noSpeakingQuestions','No speaking questions found for the selected criteria.'));}}catch(err){console.error(\"SpeakingQuestionExercise - Error fetching questions:\",err);setError(err.message||t('errors.unexpectedError','An unexpected error occurred.'));}finally{setIsLoading(false);}},[language,days,t,shuffleArray]);// Added shuffleArray to dependencies\nuseEffect(()=>{if(language&&days&&days.length>0){fetchQuestions();}else{setIsLoading(false);setError(t('errors.selectLangDay',\"Please select a language and day(s).\"));}},[fetchQuestions,exerciseKey,language,days,t]);const handleRecord=()=>{if(isRecording){// TODO: Call a stop function from the speech recognition hook if it's active\nconsole.log(\"Stopping mocked recording (if applicable)\");setIsRecording(false);return;}setIsRecording(true);setTranscript('');setFeedback({message:t('feedback.listening','Listening...'),type:'info'});mockStartSpeechRecognition({language:mapLanguageToSpeechCode(language),onStart:()=>{console.log(\"Mocked STT started\");},onResult:text=>{setTranscript(text);// Basic feedback based on transcript length\nif(text.trim().length>0){setFeedback({message:t('feedback.answerRecorded','Answer recorded!'),type:'success'});}else{setFeedback({message:t('feedback.noSpeechDetectedShort','No speech detected.'),type:'warning'});}},onError:err=>{console.error(\"Mocked STT Error:\",err);let errorMsg=t('errors.recognitionError','Error during speech recognition.');if(err.error==='no-speech')errorMsg=t('errors.noSpeechDetailed','No speech was detected. You may need to speak louder or longer.');if(err.error==='audio-capture')errorMsg=t('errors.micError','No microphone was found. Ensure that a microphone is installed and that microphone settings are configured correctly.');if(err.error==='not-allowed')errorMsg=t('errors.micPermission','Permission to use microphone was denied.');setFeedback({message:errorMsg,type:'error'});setIsRecording(false);},onEnd:()=>{setIsRecording(false);console.log(\"Mocked STT ended\");}});};const currentQuestionText=questions[currentQuestionIndex]||\"\";const latinizedQuestion=getLatinizedText(currentQuestionText,language);const goToNextQuestion=()=>{if(currentQuestionIndex<questions.length-1){setCurrentQuestionIndex(prev=>prev+1);setTranscript('');setFeedback({message:'',type:''});}};const goToPrevQuestion=()=>{if(currentQuestionIndex>0){setCurrentQuestionIndex(prev=>prev-1);setTranscript('');setFeedback({message:'',type:''});}};const showHint=()=>{setFeedback({message:t('feedback.hintSpeaking','Try to understand the question fully. Use relevant vocabulary and aim for a complete sentence.'),type:'hint'});};if(isLoading)return/*#__PURE__*/_jsx(\"p\",{children:t('loading.speakingExercise','Loading speaking questions...')});if(error)return/*#__PURE__*/_jsx(FeedbackDisplay,{message:error,type:\"error\"});if(questions.length===0&&!isLoading)return/*#__PURE__*/_jsx(FeedbackDisplay,{message:t('exercises.noSpeakingQuestions','No speaking questions available.'),type:\"info\"});return/*#__PURE__*/_jsxs(\"div\",{style:{textAlign:'center',padding:'20px',border:'1px solid #eee',borderRadius:'8px'},children:[/*#__PURE__*/_jsx(\"h3\",{children:t('titles.answerTheQuestionSpeaking','Answer the Question (Speaking)')}),/*#__PURE__*/_jsx(\"div\",{style:_objectSpread({fontSize:'1.5rem',margin:'20px 0',minHeight:'50px'},isLatinized&&currentQuestionText!==latinizedQuestion&&{fontStyle:'italic'}),children:latinizedQuestion}),/*#__PURE__*/_jsxs(\"div\",{style:{marginBottom:'20px'},children:[/*#__PURE__*/_jsxs(\"button\",{onClick:goToPrevQuestion,disabled:currentQuestionIndex===0,children:[\"< \",t('buttons.previous','Previous')]}),/*#__PURE__*/_jsxs(\"span\",{style:{margin:'0 10px'},children:[currentQuestionIndex+1,\" / \",questions.length]}),/*#__PURE__*/_jsxs(\"button\",{onClick:goToNextQuestion,disabled:currentQuestionIndex===questions.length-1,children:[t('buttons.next','Next'),\" >\"]})]}),/*#__PURE__*/_jsx(\"button\",{onClick:handleRecord,disabled:isLoading,style:{fontSize:'2.5rem',padding:'10px 20px',marginBottom:'15px',lineHeight:1,cursor:'pointer',backgroundColor:isRecording?'#dc3545':'#007bff',color:'white',border:'none',borderRadius:'5px'},children:isRecording?t('buttons.stopRecording','Stop'):'ðŸŽ¤'}),transcript&&/*#__PURE__*/_jsxs(\"div\",{style:{marginTop:'10px',padding:'10px',border:'1px solid #eee',borderRadius:'4px',background:'#f9f9f9'},children:[/*#__PURE__*/_jsxs(\"strong\",{children:[t('labels.yourAnswer','Your answer'),\":\"]}),\" \",transcript]}),/*#__PURE__*/_jsx(FeedbackDisplay,{message:feedback.message,type:feedback.type}),/*#__PURE__*/_jsx(ExerciseControls,{onShowHint:showHint,onNextExercise:fetchQuestions// To get a new set of potentially different questions\n,config:{showCheck:false,// No explicit check, feedback is based on recording\nshowReveal:false,// No answer to reveal\nshowHint:true,showNext:true// \"Next Exercise\" button to refresh all questions\n}})]});};export default SpeakingQuestionExercise;","map":{"version":3,"names":["React","useState","useEffect","useCallback","loadSpeakingPromptsData","useLatinizationContext","useLatinization","mapLanguageToSpeechCode","FeedbackDisplay","ExerciseControls","useI18n","shuffleArray","jsx","_jsx","jsxs","_jsxs","mockStartSpeechRecognition","_ref","language","onStart","onResult","onError","onEnd","console","warn","setTimeout","mockTranscript","SpeakingQuestionExercise","_ref2","days","exerciseKey","questions","setQuestions","currentQuestionIndex","setCurrentQuestionIndex","transcript","setTranscript","isRecording","setIsRecording","feedback","setFeedback","message","type","isLoading","setIsLoading","error","setError","isLatinized","getLatinizedText","t","fetchQuestions","data","fetchError","Error","length","err","handleRecord","log","text","trim","errorMsg","currentQuestionText","latinizedQuestion","goToNextQuestion","prev","goToPrevQuestion","showHint","children","style","textAlign","padding","border","borderRadius","_objectSpread","fontSize","margin","minHeight","fontStyle","marginBottom","onClick","disabled","lineHeight","cursor","backgroundColor","color","marginTop","background","onShowHint","onNextExercise","config","showCheck","showReveal","showNext"],"sources":["/workspaces/COSYlanguagesproject/src/components/Freestyle/exercises/speaking/SpeakingQuestionExercise.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { loadSpeakingPromptsData } from '../../../../utils/exerciseDataService';\r\nimport { useLatinizationContext } from '../../../../contexts/LatinizationContext';\r\nimport useLatinization from '../../../../hooks/useLatinization';\r\nimport { mapLanguageToSpeechCode } from '../../../../utils/speechUtils'; // For language mapping\r\nimport FeedbackDisplay from '../../FeedbackDisplay';\r\nimport ExerciseControls from '../../ExerciseControls';\r\nimport { useI18n } from '../../../../i18n/I18nContext';\r\nimport { shuffleArray } from '../../../../utils/arrayUtils'; // Import shuffleArray\r\n\r\n// TODO: Implement a proper useSpeechRecognition hook or service for STT\r\n// This mock function is a placeholder.\r\nconst mockStartSpeechRecognition = ({\r\n  language,\r\n  onStart,\r\n  onResult,\r\n  onError,\r\n  onEnd\r\n}) => {\r\n  console.warn(\"Speech Recognition is mocked. Implement useSpeechRecognition hook.\");\r\n  onStart();\r\n  setTimeout(() => {\r\n    const mockTranscript = \"This is a mocked transcript.\";\r\n    onResult(mockTranscript);\r\n    // onError({ error: \"no-speech\" }); // Uncomment to test error handling\r\n    onEnd();\r\n  }, 2000);\r\n};\r\n\r\nconst SpeakingQuestionExercise = ({ language, days, exerciseKey }) => {\r\n  const [questions, setQuestions] = useState([]);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [transcript, setTranscript] = useState('');\r\n  const [isRecording, setIsRecording] = useState(false);\r\n  const [feedback, setFeedback] = useState({ message: '', type: '' });\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  const { isLatinized } = useLatinizationContext();\r\n  const getLatinizedText = useLatinization;\r\n  const { t } = useI18n();\r\n\r\n  const fetchQuestions = useCallback(async () => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    setQuestions([]);\r\n    setCurrentQuestionIndex(0);\r\n    setTranscript('');\r\n    setFeedback({ message: '', type: '' });\r\n\r\n    try {\r\n      const { data, error: fetchError } = await loadSpeakingPromptsData(language, days);\r\n      if (fetchError) {\r\n        throw new Error(fetchError.message || fetchError.error || 'Failed to load speaking questions.');\r\n      }\r\n      if (data && data.length > 0) {\r\n        setQuestions(shuffleArray(data)); // Shuffle questions\r\n      } else {\r\n        setError(t('exercises.noSpeakingQuestions', 'No speaking questions found for the selected criteria.'));\r\n      }\r\n    } catch (err) {\r\n      console.error(\"SpeakingQuestionExercise - Error fetching questions:\", err);\r\n      setError(err.message || t('errors.unexpectedError', 'An unexpected error occurred.'));\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [language, days, t, shuffleArray]); // Added shuffleArray to dependencies\r\n\r\n  useEffect(() => {\r\n    if (language && days && days.length > 0) {\r\n      fetchQuestions();\r\n    } else {\r\n      setIsLoading(false);\r\n      setError(t('errors.selectLangDay', \"Please select a language and day(s).\"));\r\n    }\r\n  }, [fetchQuestions, exerciseKey, language, days, t]);\r\n\r\n  const handleRecord = () => {\r\n    if (isRecording) {\r\n      // TODO: Call a stop function from the speech recognition hook if it's active\r\n      console.log(\"Stopping mocked recording (if applicable)\");\r\n      setIsRecording(false);\r\n      return;\r\n    }\r\n\r\n    setIsRecording(true);\r\n    setTranscript('');\r\n    setFeedback({ message: t('feedback.listening', 'Listening...'), type: 'info' });\r\n\r\n    mockStartSpeechRecognition({\r\n      language: mapLanguageToSpeechCode(language),\r\n      onStart: () => {\r\n        console.log(\"Mocked STT started\");\r\n      },\r\n      onResult: (text) => {\r\n        setTranscript(text);\r\n        // Basic feedback based on transcript length\r\n        if (text.trim().length > 0) {\r\n            setFeedback({ message: t('feedback.answerRecorded', 'Answer recorded!'), type: 'success' });\r\n        } else {\r\n            setFeedback({ message: t('feedback.noSpeechDetectedShort', 'No speech detected.'), type: 'warning' });\r\n        }\r\n      },\r\n      onError: (err) => {\r\n        console.error(\"Mocked STT Error:\", err);\r\n        let errorMsg = t('errors.recognitionError', 'Error during speech recognition.');\r\n        if (err.error === 'no-speech') errorMsg = t('errors.noSpeechDetailed', 'No speech was detected. You may need to speak louder or longer.');\r\n        if (err.error === 'audio-capture') errorMsg = t('errors.micError', 'No microphone was found. Ensure that a microphone is installed and that microphone settings are configured correctly.');\r\n        if (err.error === 'not-allowed') errorMsg = t('errors.micPermission', 'Permission to use microphone was denied.');\r\n        setFeedback({ message: errorMsg, type: 'error' });\r\n        setIsRecording(false);\r\n      },\r\n      onEnd: () => {\r\n        setIsRecording(false);\r\n         console.log(\"Mocked STT ended\");\r\n      }\r\n    });\r\n  };\r\n  \r\n  const currentQuestionText = questions[currentQuestionIndex] || \"\";\r\n  const latinizedQuestion = getLatinizedText(currentQuestionText, language);\r\n\r\n  const goToNextQuestion = () => {\r\n    if (currentQuestionIndex < questions.length - 1) {\r\n      setCurrentQuestionIndex(prev => prev + 1);\r\n      setTranscript('');\r\n      setFeedback({ message: '', type: '' });\r\n    }\r\n  };\r\n\r\n  const goToPrevQuestion = () => {\r\n    if (currentQuestionIndex > 0) {\r\n      setCurrentQuestionIndex(prev => prev - 1);\r\n      setTranscript('');\r\n      setFeedback({ message: '', type: '' });\r\n    }\r\n  };\r\n  \r\n  const showHint = () => {\r\n    setFeedback({ message: t('feedback.hintSpeaking', 'Try to understand the question fully. Use relevant vocabulary and aim for a complete sentence.'), type: 'hint'});\r\n  }\r\n\r\n  if (isLoading) return <p>{t('loading.speakingExercise', 'Loading speaking questions...')}</p>;\r\n  if (error) return <FeedbackDisplay message={error} type=\"error\" />;\r\n  if (questions.length === 0 && !isLoading) return <FeedbackDisplay message={t('exercises.noSpeakingQuestions', 'No speaking questions available.')} type=\"info\" />;\r\n\r\n  return (\r\n    <div style={{ textAlign: 'center', padding: '20px', border: '1px solid #eee', borderRadius: '8px' }}>\r\n      <h3>{t('titles.answerTheQuestionSpeaking', 'Answer the Question (Speaking)')}</h3>\r\n      <div style={{ fontSize: '1.5rem', margin: '20px 0', minHeight: '50px', ...(isLatinized && currentQuestionText !== latinizedQuestion && {fontStyle: 'italic'}) }}>\r\n        {latinizedQuestion}\r\n      </div>\r\n      \r\n      <div style={{ marginBottom: '20px' }}>\r\n        <button onClick={goToPrevQuestion} disabled={currentQuestionIndex === 0}>\r\n          &lt; {t('buttons.previous', 'Previous')}\r\n        </button>\r\n        <span style={{ margin: '0 10px' }}>{currentQuestionIndex + 1} / {questions.length}</span>\r\n        <button onClick={goToNextQuestion} disabled={currentQuestionIndex === questions.length - 1}>\r\n          {t('buttons.next', 'Next')} &gt;\r\n        </button>\r\n      </div>\r\n\r\n      <button onClick={handleRecord} disabled={isLoading} \r\n        style={{ fontSize: '2.5rem', padding: '10px 20px', marginBottom: '15px', lineHeight: 1, cursor: 'pointer', backgroundColor: isRecording ? '#dc3545' : '#007bff', color: 'white', border: 'none', borderRadius: '5px' }}\r\n      >\r\n        {isRecording ? t('buttons.stopRecording', 'Stop') : 'ðŸŽ¤'}\r\n      </button>\r\n      \r\n      {transcript && <div style={{ marginTop: '10px', padding: '10px', border: '1px solid #eee', borderRadius: '4px', background: '#f9f9f9' }}><strong>{t('labels.yourAnswer', 'Your answer')}:</strong> {transcript}</div>}\r\n      <FeedbackDisplay message={feedback.message} type={feedback.type} />\r\n\r\n      <ExerciseControls\r\n        onShowHint={showHint}\r\n        onNextExercise={fetchQuestions} // To get a new set of potentially different questions\r\n        config={{\r\n          showCheck: false, // No explicit check, feedback is based on recording\r\n          showReveal: false, // No answer to reveal\r\n          showHint: true,\r\n          showNext: true, // \"Next Exercise\" button to refresh all questions\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SpeakingQuestionExercise;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}