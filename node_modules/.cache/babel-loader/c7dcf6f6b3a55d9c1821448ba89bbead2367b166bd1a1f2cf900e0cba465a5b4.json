{"ast":null,"code":"var _jsxFileName = \"/workspaces/COSYlanguagesproject/src/components/Freestyle/exercises/speaking/SpeakingQuestionExercise.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { loadSpeakingPromptsData } from '../../../../utils/exerciseDataService';\nimport { useLatinizationContext } from '../../../../contexts/LatinizationContext';\nimport useLatinization from '../../../../hooks/useLatinization';\nimport { mapLanguageToSpeechCode } from '../../../../utils/speechUtils'; // For language mapping\nimport FeedbackDisplay from '../../FeedbackDisplay';\nimport ExerciseControls from '../../ExerciseControls';\nimport { useI18n } from '../../../../i18n/I18nContext';\nimport { shuffleArray } from '../../../../utils/arrayUtils'; // Import shuffleArray\n\n// TODO: Implement a proper useSpeechRecognition hook or service for STT\n// This mock function is a placeholder.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mockStartSpeechRecognition = ({\n  language,\n  onStart,\n  onResult,\n  onError,\n  onEnd\n}) => {\n  console.warn(\"Speech Recognition is mocked. Implement useSpeechRecognition hook.\");\n  onStart();\n  setTimeout(() => {\n    const mockTranscript = \"This is a mocked transcript.\";\n    onResult(mockTranscript);\n    // onError({ error: \"no-speech\" }); // Uncomment to test error handling\n    onEnd();\n  }, 2000);\n};\nconst SpeakingQuestionExercise = ({\n  language,\n  days,\n  exerciseKey\n}) => {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [transcript, setTranscript] = useState('');\n  const [isRecording, setIsRecording] = useState(false);\n  const [feedback, setFeedback] = useState({\n    message: '',\n    type: ''\n  });\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const {\n    isLatinized\n  } = useLatinizationContext();\n  const getLatinizedText = useLatinization;\n  const {\n    t\n  } = useI18n();\n  const fetchQuestions = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    setQuestions([]);\n    setCurrentQuestionIndex(0);\n    setTranscript('');\n    setFeedback({\n      message: '',\n      type: ''\n    });\n    try {\n      const {\n        data,\n        error: fetchError\n      } = await loadSpeakingPromptsData(language, days);\n      if (fetchError) {\n        throw new Error(fetchError.message || fetchError.error || 'Failed to load speaking questions.');\n      }\n      if (data && data.length > 0) {\n        setQuestions(shuffleArray(data)); // Shuffle questions\n      } else {\n        setError(t('exercises.noSpeakingQuestions', 'No speaking questions found for the selected criteria.'));\n      }\n    } catch (err) {\n      console.error(\"SpeakingQuestionExercise - Error fetching questions:\", err);\n      setError(err.message || t('errors.unexpectedError', 'An unexpected error occurred.'));\n    } finally {\n      setIsLoading(false);\n    }\n  }, [language, days, t, shuffleArray]); // Added shuffleArray to dependencies\n\n  useEffect(() => {\n    if (language && days && days.length > 0) {\n      fetchQuestions();\n    } else {\n      setIsLoading(false);\n      setError(t('errors.selectLangDay', \"Please select a language and day(s).\"));\n    }\n  }, [fetchQuestions, exerciseKey, language, days, t]);\n  const handleRecord = () => {\n    if (isRecording) {\n      // TODO: Call a stop function from the speech recognition hook if it's active\n      console.log(\"Stopping mocked recording (if applicable)\");\n      setIsRecording(false);\n      return;\n    }\n    setIsRecording(true);\n    setTranscript('');\n    setFeedback({\n      message: t('feedback.listening', 'Listening...'),\n      type: 'info'\n    });\n    mockStartSpeechRecognition({\n      language: mapLanguageToSpeechCode(language),\n      onStart: () => {\n        console.log(\"Mocked STT started\");\n      },\n      onResult: text => {\n        setTranscript(text);\n        // Basic feedback based on transcript length\n        if (text.trim().length > 0) {\n          setFeedback({\n            message: t('feedback.answerRecorded', 'Answer recorded!'),\n            type: 'success'\n          });\n        } else {\n          setFeedback({\n            message: t('feedback.noSpeechDetectedShort', 'No speech detected.'),\n            type: 'warning'\n          });\n        }\n      },\n      onError: err => {\n        console.error(\"Mocked STT Error:\", err);\n        let errorMsg = t('errors.recognitionError', 'Error during speech recognition.');\n        if (err.error === 'no-speech') errorMsg = t('errors.noSpeechDetailed', 'No speech was detected. You may need to speak louder or longer.');\n        if (err.error === 'audio-capture') errorMsg = t('errors.micError', 'No microphone was found. Ensure that a microphone is installed and that microphone settings are configured correctly.');\n        if (err.error === 'not-allowed') errorMsg = t('errors.micPermission', 'Permission to use microphone was denied.');\n        setFeedback({\n          message: errorMsg,\n          type: 'error'\n        });\n        setIsRecording(false);\n      },\n      onEnd: () => {\n        setIsRecording(false);\n        console.log(\"Mocked STT ended\");\n      }\n    });\n  };\n  const currentQuestionText = questions[currentQuestionIndex] || \"\";\n  const latinizedQuestion = getLatinizedText(currentQuestionText, language);\n  const goToNextQuestion = () => {\n    if (currentQuestionIndex < questions.length - 1) {\n      setCurrentQuestionIndex(prev => prev + 1);\n      setTranscript('');\n      setFeedback({\n        message: '',\n        type: ''\n      });\n    }\n  };\n  const goToPrevQuestion = () => {\n    if (currentQuestionIndex > 0) {\n      setCurrentQuestionIndex(prev => prev - 1);\n      setTranscript('');\n      setFeedback({\n        message: '',\n        type: ''\n      });\n    }\n  };\n  const showHint = () => {\n    setFeedback({\n      message: t('feedback.hintSpeaking', 'Try to understand the question fully. Use relevant vocabulary and aim for a complete sentence.'),\n      type: 'hint'\n    });\n  };\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: t('loading.speakingExercise', 'Loading speaking questions...')\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(FeedbackDisplay, {\n    message: error,\n    type: \"error\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 21\n  }, this);\n  if (questions.length === 0 && !isLoading) return /*#__PURE__*/_jsxDEV(FeedbackDisplay, {\n    message: t('exercises.noSpeakingQuestions', 'No speaking questions available.'),\n    type: \"info\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 52\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: 'center',\n      padding: '20px',\n      border: '1px solid #eee',\n      borderRadius: '8px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: t('titles.answerTheQuestionSpeaking', 'Answer the Question (Speaking)')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        fontSize: '1.5rem',\n        margin: '20px 0',\n        minHeight: '50px',\n        ...(isLatinized && currentQuestionText !== latinizedQuestion && {\n          fontStyle: 'italic'\n        })\n      },\n      children: latinizedQuestion\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: goToPrevQuestion,\n        disabled: currentQuestionIndex === 0,\n        children: [\"< \", t('buttons.previous', 'Previous')]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          margin: '0 10px'\n        },\n        children: [currentQuestionIndex + 1, \" / \", questions.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: goToNextQuestion,\n        disabled: currentQuestionIndex === questions.length - 1,\n        children: [t('buttons.next', 'Next'), \" >\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleRecord,\n      disabled: isLoading,\n      style: {\n        fontSize: '2.5rem',\n        padding: '10px 20px',\n        marginBottom: '15px',\n        lineHeight: 1,\n        cursor: 'pointer',\n        backgroundColor: isRecording ? '#dc3545' : '#007bff',\n        color: 'white',\n        border: 'none',\n        borderRadius: '5px'\n      },\n      children: isRecording ? t('buttons.stopRecording', 'Stop') : 'ðŸŽ¤'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this), transcript && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '10px',\n        padding: '10px',\n        border: '1px solid #eee',\n        borderRadius: '4px',\n        background: '#f9f9f9'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: [t('labels.yourAnswer', 'Your answer'), \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 144\n      }, this), \" \", transcript]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 22\n    }, this), /*#__PURE__*/_jsxDEV(FeedbackDisplay, {\n      message: feedback.message,\n      type: feedback.type\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ExerciseControls, {\n      onShowHint: showHint,\n      onNextExercise: fetchQuestions // To get a new set of potentially different questions\n      ,\n      config: {\n        showCheck: false,\n        // No explicit check, feedback is based on recording\n        showReveal: false,\n        // No answer to reveal\n        showHint: true,\n        showNext: true // \"Next Exercise\" button to refresh all questions\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 5\n  }, this);\n};\n_s(SpeakingQuestionExercise, \"U/I1e++UwnEcbeRPF06xeAEtOTc=\", false, function () {\n  return [useLatinizationContext, useI18n];\n});\n_c = SpeakingQuestionExercise;\nexport default SpeakingQuestionExercise;\nvar _c;\n$RefreshReg$(_c, \"SpeakingQuestionExercise\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","loadSpeakingPromptsData","useLatinizationContext","useLatinization","mapLanguageToSpeechCode","FeedbackDisplay","ExerciseControls","useI18n","shuffleArray","jsxDEV","_jsxDEV","mockStartSpeechRecognition","language","onStart","onResult","onError","onEnd","console","warn","setTimeout","mockTranscript","SpeakingQuestionExercise","days","exerciseKey","_s","questions","setQuestions","currentQuestionIndex","setCurrentQuestionIndex","transcript","setTranscript","isRecording","setIsRecording","feedback","setFeedback","message","type","isLoading","setIsLoading","error","setError","isLatinized","getLatinizedText","t","fetchQuestions","data","fetchError","Error","length","err","handleRecord","log","text","trim","errorMsg","currentQuestionText","latinizedQuestion","goToNextQuestion","prev","goToPrevQuestion","showHint","children","fileName","_jsxFileName","lineNumber","columnNumber","style","textAlign","padding","border","borderRadius","fontSize","margin","minHeight","fontStyle","marginBottom","onClick","disabled","lineHeight","cursor","backgroundColor","color","marginTop","background","onShowHint","onNextExercise","config","showCheck","showReveal","showNext","_c","$RefreshReg$"],"sources":["/workspaces/COSYlanguagesproject/src/components/Freestyle/exercises/speaking/SpeakingQuestionExercise.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { loadSpeakingPromptsData } from '../../../../utils/exerciseDataService';\r\nimport { useLatinizationContext } from '../../../../contexts/LatinizationContext';\r\nimport useLatinization from '../../../../hooks/useLatinization';\r\nimport { mapLanguageToSpeechCode } from '../../../../utils/speechUtils'; // For language mapping\r\nimport FeedbackDisplay from '../../FeedbackDisplay';\r\nimport ExerciseControls from '../../ExerciseControls';\r\nimport { useI18n } from '../../../../i18n/I18nContext';\r\nimport { shuffleArray } from '../../../../utils/arrayUtils'; // Import shuffleArray\r\n\r\n// TODO: Implement a proper useSpeechRecognition hook or service for STT\r\n// This mock function is a placeholder.\r\nconst mockStartSpeechRecognition = ({\r\n  language,\r\n  onStart,\r\n  onResult,\r\n  onError,\r\n  onEnd\r\n}) => {\r\n  console.warn(\"Speech Recognition is mocked. Implement useSpeechRecognition hook.\");\r\n  onStart();\r\n  setTimeout(() => {\r\n    const mockTranscript = \"This is a mocked transcript.\";\r\n    onResult(mockTranscript);\r\n    // onError({ error: \"no-speech\" }); // Uncomment to test error handling\r\n    onEnd();\r\n  }, 2000);\r\n};\r\n\r\nconst SpeakingQuestionExercise = ({ language, days, exerciseKey }) => {\r\n  const [questions, setQuestions] = useState([]);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [transcript, setTranscript] = useState('');\r\n  const [isRecording, setIsRecording] = useState(false);\r\n  const [feedback, setFeedback] = useState({ message: '', type: '' });\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  const { isLatinized } = useLatinizationContext();\r\n  const getLatinizedText = useLatinization;\r\n  const { t } = useI18n();\r\n\r\n  const fetchQuestions = useCallback(async () => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    setQuestions([]);\r\n    setCurrentQuestionIndex(0);\r\n    setTranscript('');\r\n    setFeedback({ message: '', type: '' });\r\n\r\n    try {\r\n      const { data, error: fetchError } = await loadSpeakingPromptsData(language, days);\r\n      if (fetchError) {\r\n        throw new Error(fetchError.message || fetchError.error || 'Failed to load speaking questions.');\r\n      }\r\n      if (data && data.length > 0) {\r\n        setQuestions(shuffleArray(data)); // Shuffle questions\r\n      } else {\r\n        setError(t('exercises.noSpeakingQuestions', 'No speaking questions found for the selected criteria.'));\r\n      }\r\n    } catch (err) {\r\n      console.error(\"SpeakingQuestionExercise - Error fetching questions:\", err);\r\n      setError(err.message || t('errors.unexpectedError', 'An unexpected error occurred.'));\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [language, days, t, shuffleArray]); // Added shuffleArray to dependencies\r\n\r\n  useEffect(() => {\r\n    if (language && days && days.length > 0) {\r\n      fetchQuestions();\r\n    } else {\r\n      setIsLoading(false);\r\n      setError(t('errors.selectLangDay', \"Please select a language and day(s).\"));\r\n    }\r\n  }, [fetchQuestions, exerciseKey, language, days, t]);\r\n\r\n  const handleRecord = () => {\r\n    if (isRecording) {\r\n      // TODO: Call a stop function from the speech recognition hook if it's active\r\n      console.log(\"Stopping mocked recording (if applicable)\");\r\n      setIsRecording(false);\r\n      return;\r\n    }\r\n\r\n    setIsRecording(true);\r\n    setTranscript('');\r\n    setFeedback({ message: t('feedback.listening', 'Listening...'), type: 'info' });\r\n\r\n    mockStartSpeechRecognition({\r\n      language: mapLanguageToSpeechCode(language),\r\n      onStart: () => {\r\n        console.log(\"Mocked STT started\");\r\n      },\r\n      onResult: (text) => {\r\n        setTranscript(text);\r\n        // Basic feedback based on transcript length\r\n        if (text.trim().length > 0) {\r\n            setFeedback({ message: t('feedback.answerRecorded', 'Answer recorded!'), type: 'success' });\r\n        } else {\r\n            setFeedback({ message: t('feedback.noSpeechDetectedShort', 'No speech detected.'), type: 'warning' });\r\n        }\r\n      },\r\n      onError: (err) => {\r\n        console.error(\"Mocked STT Error:\", err);\r\n        let errorMsg = t('errors.recognitionError', 'Error during speech recognition.');\r\n        if (err.error === 'no-speech') errorMsg = t('errors.noSpeechDetailed', 'No speech was detected. You may need to speak louder or longer.');\r\n        if (err.error === 'audio-capture') errorMsg = t('errors.micError', 'No microphone was found. Ensure that a microphone is installed and that microphone settings are configured correctly.');\r\n        if (err.error === 'not-allowed') errorMsg = t('errors.micPermission', 'Permission to use microphone was denied.');\r\n        setFeedback({ message: errorMsg, type: 'error' });\r\n        setIsRecording(false);\r\n      },\r\n      onEnd: () => {\r\n        setIsRecording(false);\r\n         console.log(\"Mocked STT ended\");\r\n      }\r\n    });\r\n  };\r\n  \r\n  const currentQuestionText = questions[currentQuestionIndex] || \"\";\r\n  const latinizedQuestion = getLatinizedText(currentQuestionText, language);\r\n\r\n  const goToNextQuestion = () => {\r\n    if (currentQuestionIndex < questions.length - 1) {\r\n      setCurrentQuestionIndex(prev => prev + 1);\r\n      setTranscript('');\r\n      setFeedback({ message: '', type: '' });\r\n    }\r\n  };\r\n\r\n  const goToPrevQuestion = () => {\r\n    if (currentQuestionIndex > 0) {\r\n      setCurrentQuestionIndex(prev => prev - 1);\r\n      setTranscript('');\r\n      setFeedback({ message: '', type: '' });\r\n    }\r\n  };\r\n  \r\n  const showHint = () => {\r\n    setFeedback({ message: t('feedback.hintSpeaking', 'Try to understand the question fully. Use relevant vocabulary and aim for a complete sentence.'), type: 'hint'});\r\n  }\r\n\r\n  if (isLoading) return <p>{t('loading.speakingExercise', 'Loading speaking questions...')}</p>;\r\n  if (error) return <FeedbackDisplay message={error} type=\"error\" />;\r\n  if (questions.length === 0 && !isLoading) return <FeedbackDisplay message={t('exercises.noSpeakingQuestions', 'No speaking questions available.')} type=\"info\" />;\r\n\r\n  return (\r\n    <div style={{ textAlign: 'center', padding: '20px', border: '1px solid #eee', borderRadius: '8px' }}>\r\n      <h3>{t('titles.answerTheQuestionSpeaking', 'Answer the Question (Speaking)')}</h3>\r\n      <div style={{ fontSize: '1.5rem', margin: '20px 0', minHeight: '50px', ...(isLatinized && currentQuestionText !== latinizedQuestion && {fontStyle: 'italic'}) }}>\r\n        {latinizedQuestion}\r\n      </div>\r\n      \r\n      <div style={{ marginBottom: '20px' }}>\r\n        <button onClick={goToPrevQuestion} disabled={currentQuestionIndex === 0}>\r\n          &lt; {t('buttons.previous', 'Previous')}\r\n        </button>\r\n        <span style={{ margin: '0 10px' }}>{currentQuestionIndex + 1} / {questions.length}</span>\r\n        <button onClick={goToNextQuestion} disabled={currentQuestionIndex === questions.length - 1}>\r\n          {t('buttons.next', 'Next')} &gt;\r\n        </button>\r\n      </div>\r\n\r\n      <button onClick={handleRecord} disabled={isLoading} \r\n        style={{ fontSize: '2.5rem', padding: '10px 20px', marginBottom: '15px', lineHeight: 1, cursor: 'pointer', backgroundColor: isRecording ? '#dc3545' : '#007bff', color: 'white', border: 'none', borderRadius: '5px' }}\r\n      >\r\n        {isRecording ? t('buttons.stopRecording', 'Stop') : 'ðŸŽ¤'}\r\n      </button>\r\n      \r\n      {transcript && <div style={{ marginTop: '10px', padding: '10px', border: '1px solid #eee', borderRadius: '4px', background: '#f9f9f9' }}><strong>{t('labels.yourAnswer', 'Your answer')}:</strong> {transcript}</div>}\r\n      <FeedbackDisplay message={feedback.message} type={feedback.type} />\r\n\r\n      <ExerciseControls\r\n        onShowHint={showHint}\r\n        onNextExercise={fetchQuestions} // To get a new set of potentially different questions\r\n        config={{\r\n          showCheck: false, // No explicit check, feedback is based on recording\r\n          showReveal: false, // No answer to reveal\r\n          showHint: true,\r\n          showNext: true, // \"Next Exercise\" button to refresh all questions\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SpeakingQuestionExercise;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}