{"ast":null,"code":"import React,{useState,useEffect,useCallback}from'react';import{loadVerbGrammarData,loadVocabularyData}from'../../../../utils/exerciseDataService';import{processVerbData,generateGrammarExerciseSentence,setGrammarGeneratorTranslations}from'../../../../utils/grammarSentenceGenerator';import{useLatinizationContext}from'../../../../contexts/LatinizationContext';import useLatinization from'../../../../hooks/useLatinization';import{normalizeString}from'../../../../utils/stringUtils';import FeedbackDisplay from'../../FeedbackDisplay';import ExerciseControls from'../../ExerciseControls';import{pronounceText}from'../../../../utils/speechUtils';import{useI18n}from'../../../../i18n/I18nContext';import{useProgress}from'../../../../contexts/ProgressContext';import{jsx as _jsx,Fragment as _Fragment,jsxs as _jsxs}from\"react/jsx-runtime\";const TypeVerbExercise=_ref=>{let{language,days,exerciseKey}=_ref;const[exerciseData,setExerciseData]=useState(null);const[userInput,setUserInput]=useState('');const[feedback,setFeedback]=useState({message:'',type:''});const[isLoading,setIsLoading]=useState(true);const[error,setError]=useState(null);const[isRevealed,setIsRevealed]=useState(false);const[isAnsweredCorrectly,setIsAnsweredCorrectly]=useState(false);const{isLatinized}=useLatinizationContext();const getLatinizedText=useLatinization;const{t,allTranslations}=useI18n();const progress=useProgress();useEffect(()=>{if(allTranslations){setGrammarGeneratorTranslations(allTranslations);}},[allTranslations]);const setupNewExercise=useCallback(async()=>{setIsLoading(true);setError(null);setFeedback({message:'',type:''});setUserInput('');setIsRevealed(false);setIsAnsweredCorrectly(false);setExerciseData(null);try{const{data:rawVerbItems,error:verbError}=await loadVerbGrammarData(language,days);if(verbError){throw new Error(verbError.message||verbError.error||'Failed to load verb grammar data.');}const{data:vocabItems,error:vocabError}=await loadVocabularyData(language,days);if(vocabError){console.warn(\"TypeVerbExercise: Failed to load vocabulary data for sentence objects. Proceeding without it, quality might be affected.\");}if(rawVerbItems&&rawVerbItems.length>0){const processedVerbItems=processVerbData(rawVerbItems,language);if(!processedVerbItems||processedVerbItems.length===0){setError(t('exercises.noProcessableVerbItems','No processable verb items found after initial load.'));setIsLoading(false);return;}const sentenceDetails=await generateGrammarExerciseSentence(language,days,processedVerbItems,vocabItems||[]);if(sentenceDetails&&sentenceDetails.questionPrompt&&sentenceDetails.answer){setExerciseData(sentenceDetails);}else{setError(t('exercises.generateVerbSentenceError','Could not generate a verb exercise sentence from processed data.'));}}else{setError(t('exercises.noVerbData','No verb grammar data found for the selected criteria.'));}}catch(err){console.error(\"TypeVerbExercise - Error setting up:\",err);setError(err.message||t('errors.unexpectedError','An unexpected error occurred.'));}finally{setIsLoading(false);}},[language,days,t]);useEffect(()=>{if(language&&days&&days.length>0){setupNewExercise();}else{setIsLoading(false);setError(t('errors.selectLangDay',\"Please select a language and day(s).\"));}},[setupNewExercise,exerciseKey,language,days,t]);const handleInputChange=e=>{setUserInput(e.target.value);if(feedback.message)setFeedback({message:'',type:''});};const checkAnswer=()=>{if(!exerciseData||isRevealed||isAnsweredCorrectly)return;const correctAnswer=exerciseData.answer;const latinizedCorrect=getLatinizedText(correctAnswer,language);const displayCorrect=isLatinized?latinizedCorrect:correctAnswer;let possibleAnswers=correctAnswer.split('/').map(ans=>normalizeString(ans.trim()));const itemId=\"verb_\".concat(normalizeString(exerciseData.verbInfinitive||exerciseData.correctSentence),\"_\").concat(normalizeString(correctAnswer));const isCorrectNow=possibleAnswers.includes(normalizeString(userInput));if(isCorrectNow){setFeedback({message:t('feedback.correct','Correct!'),type:'correct'});progress.awardCorrectAnswer(itemId,'grammar-type-verb',language);setIsAnsweredCorrectly(true);setTimeout(()=>{setupNewExercise();},1500);}else{setFeedback({message:t('feedback.incorrectVerb',\"Incorrect. The correct answer is: \".concat(displayCorrect,\". Full sentence: \").concat(getLatinizedText(exerciseData.correctSentence,language)),{correctAnswer:displayCorrect,correctSentence:getLatinizedText(exerciseData.correctSentence,language)}),type:'incorrect'});progress.awardIncorrectAnswer(itemId,'grammar-type-verb',language);}};const showHint=()=>{if(!exerciseData||isRevealed||isAnsweredCorrectly)return;const answerForHint=exerciseData.answer.split('/')[0].trim();let hintLetter='';if(answerForHint&&answerForHint.length>0){hintLetter=answerForHint[0];}setFeedback({message:t('feedback.hintVerb',\"Hint: The answer starts with '\".concat(getLatinizedText(hintLetter,language),\"'.\"),{letter:getLatinizedText(hintLetter,language)}),type:'hint'});};const revealTheAnswer=()=>{// Renamed from revealAnswer\nif(!exerciseData||isAnsweredCorrectly)return;const correctAnswer=exerciseData.answer.split('/')[0].trim();const latinizedCorrect=getLatinizedText(correctAnswer,language);const displayCorrect=isLatinized?latinizedCorrect:correctAnswer;const itemId=\"verb_\".concat(normalizeString(exerciseData.verbInfinitive||exerciseData.correctSentence),\"_\").concat(normalizeString(exerciseData.answer));setUserInput(correctAnswer);setFeedback({message:t('feedback.revealedVerb',\"The correct answer is: \".concat(displayCorrect,\". Full sentence: \").concat(getLatinizedText(exerciseData.correctSentence,language)),{correctAnswer:displayCorrect,correctSentence:getLatinizedText(exerciseData.correctSentence,language)}),type:'info'});setIsRevealed(true);setIsAnsweredCorrectly(true);// Consider revealed as \"done\" for progression\nprogress.scheduleReview(itemId,'grammar-type-verb',language,false);if(!isAnsweredCorrectly){// Only auto-progress if not already solved before reveal\nsetTimeout(()=>{setupNewExercise();},2000);}};const handlePronounceSentence=()=>{if(exerciseData&&exerciseData.correctSentence&&language){pronounceText(exerciseData.correctSentence,language).catch(err=>{console.error(\"Pronunciation error:\",err);setFeedback({message:t('errors.pronunciationError',\"Could not pronounce the sentence.\"),type:\"error\"});});}};if(isLoading)return/*#__PURE__*/_jsx(\"p\",{children:t('loading.verbExercise','Loading type verb exercise...')});if(error)return/*#__PURE__*/_jsx(FeedbackDisplay,{message:error,type:\"error\"});if(!exerciseData&&!isLoading)return/*#__PURE__*/_jsx(FeedbackDisplay,{message:t('exercises.noVerbExerciseData',\"No verb exercise data available. Try different selections.\"),type:\"info\"});const questionParts=exerciseData.questionPrompt.split('___');const questionDisplay=/*#__PURE__*/_jsxs(\"span\",{children:[getLatinizedText(questionParts[0],language),questionParts.length>1&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:userInput,onChange:handleInputChange,placeholder:t('placeholders.typeVerbForm',\"verb form\"),disabled:isRevealed||isAnsweredCorrectly,style:{margin:'0 5px',padding:'5px',fontSize:'inherit',width:'120px',border:'1px solid #ccc',borderRadius:'4px',textAlign:'center'},onKeyPress:event=>{if(event.key==='Enter'&&!isRevealed&&!isAnsweredCorrectly){checkAnswer();}}}),getLatinizedText(questionParts[1],language)]})]});return/*#__PURE__*/_jsxs(\"div\",{style:{textAlign:'center',padding:'20px',border:'1px solid #eee',borderRadius:'8px'},children:[/*#__PURE__*/_jsx(\"h3\",{children:t('titles.completeSentenceVerb','Complete the Sentence (Verb)')}),/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',justifyContent:'center',alignItems:'center',margin:'20px 0',fontSize:'1.3rem',lineHeight:'1.8',flexWrap:'wrap'},children:[/*#__PURE__*/_jsx(\"div\",{style:{textAlign:'center'},children:questionDisplay}),exerciseData.correctSentence&&/*#__PURE__*/_jsx(\"button\",{onClick:handlePronounceSentence,title:t('tooltips.pronounceSentence',\"Pronounce sentence\"),style:{background:'none',border:'none',fontSize:'1.5rem',cursor:'pointer',marginLeft:'10px'},children:\"\\uD83D\\uDD0A\"})]}),/*#__PURE__*/_jsx(FeedbackDisplay,{message:feedback.message,type:feedback.type,language:language}),/*#__PURE__*/_jsx(ExerciseControls,{onCheckAnswer:!isRevealed&&!isAnsweredCorrectly&&exerciseData?checkAnswer:undefined,onShowHint:!isRevealed&&!isAnsweredCorrectly&&exerciseData?showHint:undefined,onRevealAnswer:!isRevealed&&!isAnsweredCorrectly&&exerciseData?revealTheAnswer:undefined,onNextExercise:setupNewExercise,config:{showCheck:!isRevealed&&!isAnsweredCorrectly&&!!exerciseData,showHint:!isRevealed&&!isAnsweredCorrectly&&!!exerciseData,showReveal:!isRevealed&&!isAnsweredCorrectly&&!!exerciseData,showNext:true}})]});};export default TypeVerbExercise;","map":{"version":3,"names":["React","useState","useEffect","useCallback","loadVerbGrammarData","loadVocabularyData","processVerbData","generateGrammarExerciseSentence","setGrammarGeneratorTranslations","useLatinizationContext","useLatinization","normalizeString","FeedbackDisplay","ExerciseControls","pronounceText","useI18n","useProgress","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","TypeVerbExercise","_ref","language","days","exerciseKey","exerciseData","setExerciseData","userInput","setUserInput","feedback","setFeedback","message","type","isLoading","setIsLoading","error","setError","isRevealed","setIsRevealed","isAnsweredCorrectly","setIsAnsweredCorrectly","isLatinized","getLatinizedText","t","allTranslations","progress","setupNewExercise","data","rawVerbItems","verbError","Error","vocabItems","vocabError","console","warn","length","processedVerbItems","sentenceDetails","questionPrompt","answer","err","handleInputChange","e","target","value","checkAnswer","correctAnswer","latinizedCorrect","displayCorrect","possibleAnswers","split","map","ans","trim","itemId","concat","verbInfinitive","correctSentence","isCorrectNow","includes","awardCorrectAnswer","setTimeout","awardIncorrectAnswer","showHint","answerForHint","hintLetter","letter","revealTheAnswer","scheduleReview","handlePronounceSentence","catch","children","questionParts","questionDisplay","onChange","placeholder","disabled","style","margin","padding","fontSize","width","border","borderRadius","textAlign","onKeyPress","event","key","display","justifyContent","alignItems","lineHeight","flexWrap","onClick","title","background","cursor","marginLeft","onCheckAnswer","undefined","onShowHint","onRevealAnswer","onNextExercise","config","showCheck","showReveal","showNext"],"sources":["/workspaces/COSYlanguagesproject/src/components/Freestyle/exercises/grammar/TypeVerbExercise.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { loadVerbGrammarData, loadVocabularyData } from '../../../../utils/exerciseDataService';\r\nimport { processVerbData, generateGrammarExerciseSentence, setGrammarGeneratorTranslations } from '../../../../utils/grammarSentenceGenerator'; \r\nimport { useLatinizationContext } from '../../../../contexts/LatinizationContext';\r\nimport useLatinization from '../../../../hooks/useLatinization';\r\nimport { normalizeString } from '../../../../utils/stringUtils';\r\nimport FeedbackDisplay from '../../FeedbackDisplay';\r\nimport ExerciseControls from '../../ExerciseControls';\r\nimport { pronounceText } from '../../../../utils/speechUtils'; \r\nimport { useI18n } from '../../../../i18n/I18nContext';\r\nimport { useProgress } from '../../../../contexts/ProgressContext';\r\n\r\nconst TypeVerbExercise = ({ language, days, exerciseKey }) => {\r\n  const [exerciseData, setExerciseData] = useState(null); \r\n  const [userInput, setUserInput] = useState('');\r\n  const [feedback, setFeedback] = useState({ message: '', type: '' });\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [isRevealed, setIsRevealed] = useState(false);\r\n  const [isAnsweredCorrectly, setIsAnsweredCorrectly] = useState(false);\r\n\r\n  const { isLatinized } = useLatinizationContext();\r\n  const getLatinizedText = useLatinization;\r\n  const { t, allTranslations } = useI18n();\r\n  const progress = useProgress();\r\n\r\n  useEffect(() => {\r\n    if (allTranslations) {\r\n      setGrammarGeneratorTranslations(allTranslations);\r\n    }\r\n  }, [allTranslations]);\r\n\r\n  const setupNewExercise = useCallback(async () => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    setFeedback({ message: '', type: '' });\r\n    setUserInput('');\r\n    setIsRevealed(false);\r\n    setIsAnsweredCorrectly(false);\r\n    setExerciseData(null);\r\n\r\n    try {\r\n      const { data: rawVerbItems, error: verbError } = await loadVerbGrammarData(language, days);\r\n      if (verbError) {\r\n        throw new Error(verbError.message || verbError.error || 'Failed to load verb grammar data.');\r\n      }\r\n\r\n      const { data: vocabItems, error: vocabError } = await loadVocabularyData(language, days);\r\n      if (vocabError) {\r\n        console.warn(\"TypeVerbExercise: Failed to load vocabulary data for sentence objects. Proceeding without it, quality might be affected.\");\r\n      }\r\n      \r\n      if (rawVerbItems && rawVerbItems.length > 0) {\r\n        const processedVerbItems = processVerbData(rawVerbItems, language);\r\n        if (!processedVerbItems || processedVerbItems.length === 0) {\r\n            setError(t('exercises.noProcessableVerbItems', 'No processable verb items found after initial load.'));\r\n            setIsLoading(false);\r\n            return;\r\n        }\r\n\r\n        const sentenceDetails = await generateGrammarExerciseSentence(language, days, processedVerbItems, vocabItems || []);\r\n        \r\n        if (sentenceDetails && sentenceDetails.questionPrompt && sentenceDetails.answer) {\r\n          setExerciseData(sentenceDetails);\r\n        } else {\r\n          setError(t('exercises.generateVerbSentenceError','Could not generate a verb exercise sentence from processed data.'));\r\n        }\r\n      } else {\r\n        setError(t('exercises.noVerbData', 'No verb grammar data found for the selected criteria.'));\r\n      }\r\n    } catch (err) {\r\n      console.error(\"TypeVerbExercise - Error setting up:\", err);\r\n      setError(err.message || t('errors.unexpectedError', 'An unexpected error occurred.'));\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [language, days, t]); \r\n\r\n  useEffect(() => {\r\n    if (language && days && days.length > 0) {\r\n      setupNewExercise();\r\n    } else {\r\n      setIsLoading(false);\r\n      setError(t('errors.selectLangDay',\"Please select a language and day(s).\"));\r\n    }\r\n  }, [setupNewExercise, exerciseKey, language, days, t]);\r\n\r\n  const handleInputChange = (e) => {\r\n    setUserInput(e.target.value);\r\n    if (feedback.message) setFeedback({ message: '', type: '' });\r\n  };\r\n\r\n  const checkAnswer = () => {\r\n    if (!exerciseData || isRevealed || isAnsweredCorrectly) return;\r\n    \r\n    const correctAnswer = exerciseData.answer;\r\n    const latinizedCorrect = getLatinizedText(correctAnswer, language);\r\n    const displayCorrect = isLatinized ? latinizedCorrect : correctAnswer;\r\n    let possibleAnswers = correctAnswer.split('/').map(ans => normalizeString(ans.trim()));\r\n    const itemId = `verb_${normalizeString(exerciseData.verbInfinitive || exerciseData.correctSentence)}_${normalizeString(correctAnswer)}`;\r\n    const isCorrectNow = possibleAnswers.includes(normalizeString(userInput));\r\n\r\n    if (isCorrectNow) {\r\n      setFeedback({ message: t('feedback.correct', 'Correct!'), type: 'correct' });\r\n      progress.awardCorrectAnswer(itemId, 'grammar-type-verb', language);\r\n      setIsAnsweredCorrectly(true);\r\n      setTimeout(() => {\r\n        setupNewExercise();\r\n      }, 1500);\r\n    } else {\r\n      setFeedback({ \r\n        message: t('feedback.incorrectVerb', `Incorrect. The correct answer is: ${displayCorrect}. Full sentence: ${getLatinizedText(exerciseData.correctSentence, language)}`, { correctAnswer: displayCorrect, correctSentence: getLatinizedText(exerciseData.correctSentence, language) }), \r\n        type: 'incorrect' \r\n      });\r\n      progress.awardIncorrectAnswer(itemId, 'grammar-type-verb', language);\r\n    }\r\n  };\r\n\r\n  const showHint = () => {\r\n    if (!exerciseData || isRevealed || isAnsweredCorrectly) return;\r\n    const answerForHint = exerciseData.answer.split('/')[0].trim();\r\n    let hintLetter = '';\r\n    if (answerForHint && answerForHint.length > 0) {\r\n      hintLetter = answerForHint[0];\r\n    }\r\n    setFeedback({ message: t('feedback.hintVerb', `Hint: The answer starts with '${getLatinizedText(hintLetter, language)}'.`, { letter: getLatinizedText(hintLetter, language) }), type: 'hint' });\r\n  };\r\n\r\n  const revealTheAnswer = () => { // Renamed from revealAnswer\r\n    if (!exerciseData || isAnsweredCorrectly) return;\r\n    const correctAnswer = exerciseData.answer.split('/')[0].trim();\r\n    const latinizedCorrect = getLatinizedText(correctAnswer, language);\r\n    const displayCorrect = isLatinized ? latinizedCorrect : correctAnswer;\r\n    const itemId = `verb_${normalizeString(exerciseData.verbInfinitive || exerciseData.correctSentence)}_${normalizeString(exerciseData.answer)}`;\r\n\r\n    setUserInput(correctAnswer); \r\n    setFeedback({ \r\n      message: t('feedback.revealedVerb', `The correct answer is: ${displayCorrect}. Full sentence: ${getLatinizedText(exerciseData.correctSentence, language)}`, { correctAnswer: displayCorrect, correctSentence: getLatinizedText(exerciseData.correctSentence, language) }),\r\n      type: 'info' \r\n    });\r\n    setIsRevealed(true);\r\n    setIsAnsweredCorrectly(true); // Consider revealed as \"done\" for progression\r\n    progress.scheduleReview(itemId, 'grammar-type-verb', language, false);\r\n    \r\n    if(!isAnsweredCorrectly) { // Only auto-progress if not already solved before reveal\r\n        setTimeout(() => {\r\n            setupNewExercise();\r\n        }, 2000);\r\n    }\r\n  };\r\n  \r\n  const handlePronounceSentence = () => {\r\n    if (exerciseData && exerciseData.correctSentence && language) {\r\n        pronounceText(exerciseData.correctSentence, language).catch(err => {\r\n            console.error(\"Pronunciation error:\", err);\r\n            setFeedback({message: t('errors.pronunciationError', \"Could not pronounce the sentence.\"), type: \"error\"});\r\n        });\r\n    }\r\n  };\r\n\r\n  if (isLoading) return <p>{t('loading.verbExercise', 'Loading type verb exercise...')}</p>;\r\n  if (error) return <FeedbackDisplay message={error} type=\"error\" />;\r\n  if (!exerciseData && !isLoading) return <FeedbackDisplay message={t('exercises.noVerbExerciseData', \"No verb exercise data available. Try different selections.\")} type=\"info\" />;\r\n\r\n  const questionParts = exerciseData.questionPrompt.split('___');\r\n  const questionDisplay = (\r\n    <span>\r\n      {getLatinizedText(questionParts[0], language)}\r\n      {questionParts.length > 1 && (\r\n        <>\r\n          <input\r\n            type=\"text\"\r\n            value={userInput}\r\n            onChange={handleInputChange}\r\n            placeholder={t('placeholders.typeVerbForm', \"verb form\")}\r\n            disabled={isRevealed || isAnsweredCorrectly}\r\n            style={{ margin: '0 5px', padding: '5px', fontSize: 'inherit', width: '120px', border: '1px solid #ccc', borderRadius: '4px', textAlign: 'center' }}\r\n            onKeyPress={(event) => {\r\n                if (event.key === 'Enter' && !isRevealed && !isAnsweredCorrectly) {\r\n                  checkAnswer();\r\n                }\r\n            }}\r\n          />\r\n          {getLatinizedText(questionParts[1], language)}\r\n        </>\r\n      )}\r\n    </span>\r\n  );\r\n\r\n  return (\r\n    <div style={{ textAlign: 'center', padding: '20px', border: '1px solid #eee', borderRadius: '8px' }}>\r\n      <h3>{t('titles.completeSentenceVerb', 'Complete the Sentence (Verb)')}</h3>\r\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', margin: '20px 0', fontSize: '1.3rem', lineHeight: '1.8', flexWrap: 'wrap' }}>\r\n        <div style={{textAlign: 'center'}}>{questionDisplay}</div>\r\n        {exerciseData.correctSentence && (\r\n            <button \r\n                onClick={handlePronounceSentence} \r\n                title={t('tooltips.pronounceSentence',`Pronounce sentence`)}\r\n                style={{background:'none', border:'none', fontSize:'1.5rem', cursor:'pointer', marginLeft:'10px'}}\r\n            >\r\n            🔊\r\n          </button>\r\n        )}\r\n      </div>\r\n      \r\n      <FeedbackDisplay message={feedback.message} type={feedback.type} language={language} />\r\n      \r\n      <ExerciseControls\r\n        onCheckAnswer={!isRevealed && !isAnsweredCorrectly && exerciseData ? checkAnswer : undefined}\r\n        onShowHint={!isRevealed && !isAnsweredCorrectly && exerciseData ? showHint : undefined}\r\n        onRevealAnswer={!isRevealed && !isAnsweredCorrectly && exerciseData ? revealTheAnswer : undefined}\r\n        onNextExercise={setupNewExercise}\r\n        config={{ \r\n            showCheck: !isRevealed && !isAnsweredCorrectly && !!exerciseData, \r\n            showHint: !isRevealed && !isAnsweredCorrectly && !!exerciseData, \r\n            showReveal: !isRevealed && !isAnsweredCorrectly && !!exerciseData,\r\n            showNext: true,\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TypeVerbExercise;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}