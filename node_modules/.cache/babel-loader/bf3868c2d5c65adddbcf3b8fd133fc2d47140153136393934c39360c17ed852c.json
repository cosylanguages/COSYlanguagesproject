{"ast":null,"code":"var _jsxFileName = \"/workspaces/COSYlanguagesproject/src/PlanContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useCallback } from 'react';\nimport { fetchPlan as apiFetchPlan } from './api/plan'; // Import the centralized API function\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PlanContext = /*#__PURE__*/createContext();\nexport function usePlan() {\n  _s();\n  return useContext(PlanContext);\n}\n_s(usePlan, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport function PlanProvider({\n  children\n}) {\n  _s2();\n  const [plan, setPlan] = useState({\n    days: [],\n    studySets: []\n  });\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  // Renamed to avoid confusion if App.js still uses 'fetchPlan' prop name from an old state\n  const fetchPlanData = useCallback(async token => {\n    if (!token) {\n      setPlan({\n        days: [],\n        studySets: []\n      }); // Reset plan if no token\n      setError(null);\n      setLoading(false);\n      return;\n    }\n    setLoading(true);\n    setError(null);\n    try {\n      const data = await apiFetchPlan(token); // Use the imported API function\n      setPlan(data);\n    } catch (err) {\n      console.error(\"Error fetching plan in PlanContext:\", err);\n      setError(err.message || 'Failed to fetch plan');\n      setPlan({\n        days: [],\n        studySets: []\n      }); // Reset plan on error\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(PlanContext.Provider, {\n    value: {\n      plan,\n      fetchPlan: fetchPlanData,\n      loading,\n      error\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n}\n_s2(PlanProvider, \"BcWRKr74L4bwAcSdNCILyR/eEQI=\");\n_c = PlanProvider;\nvar _c;\n$RefreshReg$(_c, \"PlanProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useCallback","fetchPlan","apiFetchPlan","jsxDEV","_jsxDEV","PlanContext","usePlan","_s","PlanProvider","children","_s2","plan","setPlan","days","studySets","error","setError","loading","setLoading","fetchPlanData","token","data","err","console","message","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/workspaces/COSYlanguagesproject/src/PlanContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useCallback } from 'react';\r\nimport { fetchPlan as apiFetchPlan } from './api/plan'; // Import the centralized API function\r\n\r\nexport const PlanContext = createContext();\r\n\r\nexport function usePlan() {\r\n    return useContext(PlanContext);\r\n}\r\n\r\nexport function PlanProvider({ children }) {\r\n    const [plan, setPlan] = useState({ days: [], studySets: [] });\r\n    const [error, setError] = useState(null);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    // Renamed to avoid confusion if App.js still uses 'fetchPlan' prop name from an old state\r\n    const fetchPlanData = useCallback(async (token) => { \r\n        if (!token) {\r\n            setPlan({ days: [], studySets: [] }); // Reset plan if no token\r\n            setError(null);\r\n            setLoading(false);\r\n            return;\r\n        }\r\n        setLoading(true);\r\n        setError(null);\r\n        try {\r\n            const data = await apiFetchPlan(token); // Use the imported API function\r\n            setPlan(data);\r\n        } catch (err) {\r\n            console.error(\"Error fetching plan in PlanContext:\", err);\r\n            setError(err.message || 'Failed to fetch plan');\r\n            setPlan({ days: [], studySets: [] }); // Reset plan on error\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <PlanContext.Provider value={{ plan, fetchPlan: fetchPlanData, loading, error }}>\r\n            {children}\r\n        </PlanContext.Provider>\r\n    );\r\n}\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAC/E,SAASC,SAAS,IAAIC,YAAY,QAAQ,YAAY,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAExD,OAAO,MAAMC,WAAW,gBAAGR,aAAa,CAAC,CAAC;AAE1C,OAAO,SAASS,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACtB,OAAOT,UAAU,CAACO,WAAW,CAAC;AAClC;AAACE,EAAA,CAFeD,OAAO;AAIvB,OAAO,SAASE,YAAYA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,GAAA;EACvC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC;IAAEc,IAAI,EAAE,EAAE;IAAEC,SAAS,EAAE;EAAG,CAAC,CAAC;EAC7D,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACkB,OAAO,EAAEC,UAAU,CAAC,GAAGnB,QAAQ,CAAC,KAAK,CAAC;;EAE7C;EACA,MAAMoB,aAAa,GAAGnB,WAAW,CAAC,MAAOoB,KAAK,IAAK;IAC/C,IAAI,CAACA,KAAK,EAAE;MACRR,OAAO,CAAC;QAAEC,IAAI,EAAE,EAAE;QAAEC,SAAS,EAAE;MAAG,CAAC,CAAC,CAAC,CAAC;MACtCE,QAAQ,CAAC,IAAI,CAAC;MACdE,UAAU,CAAC,KAAK,CAAC;MACjB;IACJ;IACAA,UAAU,CAAC,IAAI,CAAC;IAChBF,QAAQ,CAAC,IAAI,CAAC;IACd,IAAI;MACA,MAAMK,IAAI,GAAG,MAAMnB,YAAY,CAACkB,KAAK,CAAC,CAAC,CAAC;MACxCR,OAAO,CAACS,IAAI,CAAC;IACjB,CAAC,CAAC,OAAOC,GAAG,EAAE;MACVC,OAAO,CAACR,KAAK,CAAC,qCAAqC,EAAEO,GAAG,CAAC;MACzDN,QAAQ,CAACM,GAAG,CAACE,OAAO,IAAI,sBAAsB,CAAC;MAC/CZ,OAAO,CAAC;QAAEC,IAAI,EAAE,EAAE;QAAEC,SAAS,EAAE;MAAG,CAAC,CAAC,CAAC,CAAC;IAC1C,CAAC,SAAS;MACNI,UAAU,CAAC,KAAK,CAAC;IACrB;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,oBACId,OAAA,CAACC,WAAW,CAACoB,QAAQ;IAACC,KAAK,EAAE;MAAEf,IAAI;MAAEV,SAAS,EAAEkB,aAAa;MAAEF,OAAO;MAAEF;IAAM,CAAE;IAAAN,QAAA,EAC3EA;EAAQ;IAAAkB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE/B;AAACpB,GAAA,CAhCeF,YAAY;AAAAuB,EAAA,GAAZvB,YAAY;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}