{"ast":null,"code":"// Defines API functions related to authentication.\n\nconst BASE_URL = 'http://localhost:3001/api'; // Matches the one in plan.js\n\n/**\r\n * Logs in a teacher user with a PIN.\r\n * @param {string} pin - The teacher's PIN.\r\n * @returns {Promise<object>} A promise that resolves to the auth data (token, userId, role).\r\n * @throws {Error} If the network response is not ok or login fails.\r\n */\nexport async function loginTeacher(pin) {\n  const res = await fetch(`${BASE_URL}/auth/login`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      pin\n    })\n  });\n  const data = await res.json(); // Attempt to parse JSON regardless of res.ok for error messages\n\n  if (!res.ok) {\n    throw new Error(data.message || `Login failed. Status: ${res.status}`);\n  }\n  return data; // Expected: { token, userId, role }\n}\n\n/**\r\n * Logs out a user.\r\n * @param {string} token - The authentication token of the user.\r\n * @returns {Promise<object>} A promise that resolves to the logout confirmation.\r\n * @throws {Error} If the network response is not ok.\r\n */\nexport async function logoutUser(token) {\n  const res = await fetch(`${BASE_URL}/auth/logout`, {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    }\n  });\n  const data = await res.json();\n  if (!res.ok) {\n    throw new Error(data.message || `Logout failed. Status: ${res.status}`);\n  }\n  return data;\n}","map":{"version":3,"names":["BASE_URL","loginTeacher","pin","res","fetch","method","headers","body","JSON","stringify","data","json","ok","Error","message","status","logoutUser","token"],"sources":["/workspaces/COSYlanguagesproject/src/api/auth.js"],"sourcesContent":["// Defines API functions related to authentication.\r\n\r\nconst BASE_URL = 'http://localhost:3001/api'; // Matches the one in plan.js\r\n\r\n/**\r\n * Logs in a teacher user with a PIN.\r\n * @param {string} pin - The teacher's PIN.\r\n * @returns {Promise<object>} A promise that resolves to the auth data (token, userId, role).\r\n * @throws {Error} If the network response is not ok or login fails.\r\n */\r\nexport async function loginTeacher(pin) {\r\n    const res = await fetch(`${BASE_URL}/auth/login`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ pin }),\r\n    });\r\n\r\n    const data = await res.json(); // Attempt to parse JSON regardless of res.ok for error messages\r\n\r\n    if (!res.ok) {\r\n        throw new Error(data.message || `Login failed. Status: ${res.status}`);\r\n    }\r\n    return data; // Expected: { token, userId, role }\r\n}\r\n\r\n/**\r\n * Logs out a user.\r\n * @param {string} token - The authentication token of the user.\r\n * @returns {Promise<object>} A promise that resolves to the logout confirmation.\r\n * @throws {Error} If the network response is not ok.\r\n */\r\nexport async function logoutUser(token) {\r\n    const res = await fetch(`${BASE_URL}/auth/logout`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Authorization': `Bearer ${token}`,\r\n            'Content-Type': 'application/json',\r\n        },\r\n    });\r\n\r\n    const data = await res.json();\r\n\r\n    if (!res.ok) {\r\n        throw new Error(data.message || `Logout failed. Status: ${res.status}`);\r\n    }\r\n    return data;\r\n}\r\n"],"mappings":"AAAA;;AAEA,MAAMA,QAAQ,GAAG,2BAA2B,CAAC,CAAC;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeC,YAAYA,CAACC,GAAG,EAAE;EACpC,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGJ,QAAQ,aAAa,EAAE;IAC9CK,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,cAAc,EAAE;IACpB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEP;IAAI,CAAC;EAChC,CAAC,CAAC;EAEF,MAAMQ,IAAI,GAAG,MAAMP,GAAG,CAACQ,IAAI,CAAC,CAAC,CAAC,CAAC;;EAE/B,IAAI,CAACR,GAAG,CAACS,EAAE,EAAE;IACT,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,OAAO,IAAI,yBAAyBX,GAAG,CAACY,MAAM,EAAE,CAAC;EAC1E;EACA,OAAOL,IAAI,CAAC,CAAC;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeM,UAAUA,CAACC,KAAK,EAAE;EACpC,MAAMd,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGJ,QAAQ,cAAc,EAAE;IAC/CK,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,eAAe,EAAE,UAAUW,KAAK,EAAE;MAClC,cAAc,EAAE;IACpB;EACJ,CAAC,CAAC;EAEF,MAAMP,IAAI,GAAG,MAAMP,GAAG,CAACQ,IAAI,CAAC,CAAC;EAE7B,IAAI,CAACR,GAAG,CAACS,EAAE,EAAE;IACT,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,OAAO,IAAI,0BAA0BX,GAAG,CAACY,MAAM,EAAE,CAAC;EAC3E;EACA,OAAOL,IAAI;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}