{"ast":null,"code":"// Defines API functions related to fetching plan data (STATIC VERSION).\n\n/**\r\n * Fetches the user's plan data from a local mock JSON file.\r\n * @param {string} token - The authentication token (unused in static version).\r\n * @returns {Promise<object>} A promise that resolves to the plan data.\r\n * @throws {Error} If fetching or parsing the mock data fails.\r\n */\nexport async function fetchPlan(token) {\n  // The token is no longer used to fetch, but kept for compatibility with PlanContext\n  console.log('Fetching static plan data. Token (unused):', token);\n  try {\n    // In a React app created with Create React App, files in `public`\n    // are served at the root. So, `public/data/mockPlanData.json`\n    // can be fetched from `/data/mockPlanData.json`.\n    // For gh-pages, if `homepage` is `https://user.github.io/repo/`, \n    // then `%PUBLIC_URL%` becomes `/repo/`.\n    // So the path should be `${process.env.PUBLIC_URL}/data/mockPlanData.json`\n    const response = await fetch(`${process.env.PUBLIC_URL}/data/mockPlanData.json`);\n    if (!response.ok) {\n      throw new Error(`Failed to fetch static plan data. Status: ${response.status}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching static plan data:', error);\n    // Fallback to a very basic plan structure in case of error,\n    // or rethrow the error if preferred.\n    // This ensures the app doesn't completely break if the JSON is missing/malformed.\n    // throw error; // Option to rethrow\n    return {\n      days: [{\n        id: 'error_day',\n        title: 'Error Loading Plan',\n        sections: []\n      }],\n      studySets: [{\n        id: 'error_set',\n        name: 'Error Loading Sets',\n        itemCount: 0\n      }]\n    };\n  }\n}\n\n// Future API functions related to plans can be added here if they also use static data.\n// For example:\n// export async function updatePlanSection(sectionId, sectionData) { ... }","map":{"version":3,"names":["fetchPlan","token","console","log","response","fetch","process","env","PUBLIC_URL","ok","Error","status","data","json","error","days","id","title","sections","studySets","name","itemCount"],"sources":["/workspaces/COSYlanguagesproject/src/api/plan.js"],"sourcesContent":["// Defines API functions related to fetching plan data (STATIC VERSION).\r\n\r\n/**\r\n * Fetches the user's plan data from a local mock JSON file.\r\n * @param {string} token - The authentication token (unused in static version).\r\n * @returns {Promise<object>} A promise that resolves to the plan data.\r\n * @throws {Error} If fetching or parsing the mock data fails.\r\n */\r\nexport async function fetchPlan(token) {\r\n    // The token is no longer used to fetch, but kept for compatibility with PlanContext\r\n    console.log('Fetching static plan data. Token (unused):', token); \r\n    try {\r\n        // In a React app created with Create React App, files in `public`\r\n        // are served at the root. So, `public/data/mockPlanData.json`\r\n        // can be fetched from `/data/mockPlanData.json`.\r\n        // For gh-pages, if `homepage` is `https://user.github.io/repo/`, \r\n        // then `%PUBLIC_URL%` becomes `/repo/`.\r\n        // So the path should be `${process.env.PUBLIC_URL}/data/mockPlanData.json`\r\n        const response = await fetch(`${process.env.PUBLIC_URL}/data/mockPlanData.json`);\r\n        if (!response.ok) {\r\n            throw new Error(`Failed to fetch static plan data. Status: ${response.status}`);\r\n        }\r\n        const data = await response.json();\r\n        return data;\r\n    } catch (error) {\r\n        console.error('Error fetching static plan data:', error);\r\n        // Fallback to a very basic plan structure in case of error,\r\n        // or rethrow the error if preferred.\r\n        // This ensures the app doesn't completely break if the JSON is missing/malformed.\r\n        // throw error; // Option to rethrow\r\n        return {\r\n            days: [{id: 'error_day', title: 'Error Loading Plan', sections: []}],\r\n            studySets: [{id: 'error_set', name: 'Error Loading Sets', itemCount: 0}]\r\n        };\r\n    }\r\n}\r\n\r\n// Future API functions related to plans can be added here if they also use static data.\r\n// For example:\r\n// export async function updatePlanSection(sectionId, sectionData) { ... }\r\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeA,SAASA,CAACC,KAAK,EAAE;EACnC;EACAC,OAAO,CAACC,GAAG,CAAC,4CAA4C,EAAEF,KAAK,CAAC;EAChE,IAAI;IACA;IACA;IACA;IACA;IACA;IACA;IACA,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGC,OAAO,CAACC,GAAG,CAACC,UAAU,yBAAyB,CAAC;IAChF,IAAI,CAACJ,QAAQ,CAACK,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,6CAA6CN,QAAQ,CAACO,MAAM,EAAE,CAAC;IACnF;IACA,MAAMC,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI;EACf,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZZ,OAAO,CAACY,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IACxD;IACA;IACA;IACA;IACA,OAAO;MACHC,IAAI,EAAE,CAAC;QAACC,EAAE,EAAE,WAAW;QAAEC,KAAK,EAAE,oBAAoB;QAAEC,QAAQ,EAAE;MAAE,CAAC,CAAC;MACpEC,SAAS,EAAE,CAAC;QAACH,EAAE,EAAE,WAAW;QAAEI,IAAI,EAAE,oBAAoB;QAAEC,SAAS,EAAE;MAAC,CAAC;IAC3E,CAAC;EACL;AACJ;;AAEA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}