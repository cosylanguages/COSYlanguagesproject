{"ast":null,"code":"var _jsxFileName = \"/workspaces/COSYlanguagesproject/src/components/Freestyle/exercises/vocabulary/MatchImageWordExercise.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { loadImageData } from '../../../../utils/exerciseDataService';\nimport FeedbackDisplay from '../../FeedbackDisplay';\nimport ExerciseControls from '../../ExerciseControls';\nimport { useLatinizationContext } from '../../../../contexts/LatinizationContext';\nimport useLatinization from '../../../../hooks/useLatinization';\nimport { shuffleArray } from '../../../../utils/arrayUtils';\nimport { useProgress } from '../../../../contexts/ProgressContext';\nimport { normalizeString } from '../../../../utils/stringUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MatchImageWordExercise = ({\n  language,\n  days,\n  exerciseKey\n}) => {\n  _s();\n  const [gameItems, setGameItems] = useState([]);\n  const [selectedItems, setSelectedItems] = useState([]); // Array of selected item objects\n  const [matchedPairs, setMatchedPairs] = useState({}); // { [pairId]: true }\n  const [feedback, setFeedback] = useState({\n    message: '',\n    type: ''\n  });\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [numPairs, setNumPairs] = useState(0);\n  const [isRevealed, setIsRevealed] = useState(false);\n  const [lines, setLines] = useState([]); // For drawing lines\n\n  const {\n    isLatinized\n  } = useLatinizationContext();\n  const getLatinizedText = useLatinization;\n  const progress = useProgress();\n  const itemRefs = useRef({}); // To store refs for each clickable item\n  const gridContainerRef = useRef(null); // Ref for the grid container\n\n  const NUM_PAIRS_FOR_GAME = 4;\n  const setupExercise = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    setFeedback({\n      message: '',\n      type: ''\n    });\n    setSelectedItems([]);\n    setMatchedPairs({});\n    setNumPairs(0);\n    setGameItems([]);\n    setLines([]); // Clear lines\n    setIsRevealed(false);\n    itemRefs.current = {}; // Clear old refs\n\n    try {\n      const {\n        data: imagesData,\n        error: fetchError\n      } = await loadImageData(language, days);\n      if (fetchError) {\n        throw new Error(fetchError.message || fetchError.error || 'Failed to load image data.');\n      }\n      if (!imagesData || imagesData.length < NUM_PAIRS_FOR_GAME) {\n        setError(`Not enough images for this exercise. Need at least ${NUM_PAIRS_FOR_GAME}. Found ${(imagesData === null || imagesData === void 0 ? void 0 : imagesData.length) || 0}.`);\n        setIsLoading(false);\n        return;\n      }\n      const selectedImages = shuffleArray(imagesData).slice(0, NUM_PAIRS_FOR_GAME);\n      setNumPairs(selectedImages.length);\n      let currentIdSuffix = 0;\n      const itemsToSet = [];\n      selectedImages.forEach(imgData => {\n        const word = imgData.translations[language] || imgData.word; // Fallback to imgData.word if translation missing\n        const pairId = `pair-${imgData.id || Date.now() + '-' + currentIdSuffix++}`;\n        itemsToSet.push({\n          type: 'image',\n          value: imgData.src,\n          id: `img-${pairId}`,\n          pairId: pairId,\n          src: imgData.src,\n          alt: word\n        });\n        itemsToSet.push({\n          type: 'word',\n          value: word,\n          id: `word-${pairId}`,\n          pairId: pairId\n        });\n      });\n      setGameItems(shuffleArray(itemsToSet));\n    } catch (err) {\n      console.error(\"MatchImageWordExercise - Error setting up:\", err);\n      setError(err.message || 'An unexpected error occurred.');\n    } finally {\n      setIsLoading(false);\n    }\n  }, [language, days, NUM_PAIRS_FOR_GAME]);\n  useEffect(() => {\n    if (language && days && days.length > 0) {\n      setupExercise();\n    } else {\n      setIsLoading(false);\n      setError(\"Please select a language and day(s).\");\n    }\n  }, [setupExercise, exerciseKey, language, days]);\n  const handleItemClick = item => {\n    if (isRevealed || matchedPairs[item.pairId] || selectedItems.find(sel => sel.id === item.id) || selectedItems.length >= 2) {\n      return;\n    }\n    const newSelectedItems = [...selectedItems, item];\n    setSelectedItems(newSelectedItems);\n    setFeedback({\n      message: '',\n      type: ''\n    });\n  };\n  const drawLineBetweenItems = useCallback((item1Id, item2Id) => {\n    const el1 = itemRefs.current[item1Id];\n    const el2 = itemRefs.current[item2Id];\n    if (!el1 || !el2 || !gridContainerRef.current) return;\n    const containerRect = gridContainerRef.current.getBoundingClientRect();\n    const rect1 = el1.getBoundingClientRect();\n    const rect2 = el2.getBoundingClientRect();\n    const x1 = rect1.left + rect1.width / 2 - containerRect.left + gridContainerRef.current.scrollLeft;\n    const y1 = rect1.top + rect1.height / 2 - containerRect.top + gridContainerRef.current.scrollTop;\n    const x2 = rect2.left + rect2.width / 2 - containerRect.left + gridContainerRef.current.scrollLeft;\n    const y2 = rect2.top + rect2.height / 2 - containerRect.top + gridContainerRef.current.scrollTop;\n    const lineKey = `line-${item1Id}-${item2Id}`;\n    // Avoid duplicate lines if already drawn (e.g. if logic re-triggers)\n    setLines(prevLines => {\n      if (prevLines.some(l => l.key === lineKey || l.key === `line-${item2Id}-${item1Id}`)) {\n        return prevLines;\n      }\n      return [...prevLines, {\n        x1,\n        y1,\n        x2,\n        y2,\n        key: lineKey\n      }];\n    });\n  }, []);\n  useEffect(() => {\n    if (selectedItems.length === 2) {\n      const [item1, item2] = selectedItems;\n      const wordItem = item1.type === 'word' ? item1 : item2.type === 'word' ? item2 : null;\n      const imageItem = item1.type === 'image' ? item1 : item2.type === 'image' ? item2 : null;\n      const itemIdForProgress = `matchimg_${imageItem ? normalizeString(imageItem.value) : 'unknownimg'}_${wordItem ? normalizeString(wordItem.value) : 'unknownword'}`;\n      if (item1.pairId === item2.pairId) {\n        setFeedback({\n          message: 'Correct Match!',\n          type: 'correct'\n        });\n        setMatchedPairs(prev => ({\n          ...prev,\n          [item1.pairId]: true\n        }));\n        drawLineBetweenItems(item1.id, item2.id);\n        progress.awardCorrectAnswer(itemIdForProgress, 'vocab-match-image-word', language);\n        setSelectedItems([]);\n      } else {\n        setFeedback({\n          message: 'Incorrect Match. Try again.',\n          type: 'incorrect'\n        });\n        progress.awardIncorrectAnswer(itemIdForProgress, 'vocab-match-image-word', language);\n        const el1 = itemRefs.current[item1.id];\n        const el2 = itemRefs.current[item2.id];\n        if (el1) el1.classList.add('incorrect-flash');\n        if (el2) el2.classList.add('incorrect-flash');\n        setTimeout(() => {\n          if (el1) el1.classList.remove('incorrect-flash');\n          if (el2) el2.classList.remove('incorrect-flash');\n          setSelectedItems([]);\n        }, 1000);\n      }\n    }\n  }, [selectedItems, progress, language, drawLineBetweenItems]);\n  useEffect(() => {\n    if (numPairs > 0 && Object.keys(matchedPairs).length === numPairs && !isRevealed) {\n      setFeedback({\n        message: 'All pairs matched! Well done!',\n        type: 'success'\n      });\n    }\n  }, [matchedPairs, numPairs, isRevealed]);\n  const showHint = () => {\n    if (isRevealed || Object.keys(matchedPairs).length >= numPairs) return;\n    // Find an unmatched pairId\n    const allPairIds = new Set(gameItems.map(item => item.pairId));\n    const matchedPairIds = new Set(Object.keys(matchedPairs));\n    let hintPairId = null;\n    for (const id of allPairIds) {\n      if (!matchedPairIds.has(id)) {\n        hintPairId = id;\n        break;\n      }\n    }\n    if (hintPairId) {\n      const pairHintItems = gameItems.filter(item => item.pairId === hintPairId);\n      if (pairHintItems.length === 2) {\n        const item1Text = pairHintItems[0].type === 'word' ? pairHintItems[0].value : `the image for \"${pairHintItems[0].alt}\"`;\n        const item2Text = pairHintItems[1].type === 'word' ? pairHintItems[1].value : `the image for \"${pairHintItems[1].alt}\"`;\n        setFeedback({\n          message: `Hint: Try matching ${getLatinizedText(item1Text, language)} with ${getLatinizedText(item2Text, language)}.`,\n          type: 'hint'\n        });\n      }\n    } else {\n      setFeedback({\n        message: \"No more hints available.\",\n        type: 'info'\n      });\n    }\n  };\n  const revealAllAnswers = () => {\n    setIsRevealed(true);\n    const allPairsRevealed = {};\n    const newLines = [];\n    const uniquePairIds = [...new Set(gameItems.map(item => item.pairId))];\n    uniquePairIds.forEach(pairId => {\n      allPairsRevealed[pairId] = true;\n      const itemsInPair = gameItems.filter(item => item.pairId === pairId);\n      if (itemsInPair.length === 2) {\n        drawLineBetweenItems(itemsInPair[0].id, itemsInPair[1].id);\n        const wordItem = itemsInPair.find(pi => pi.type === 'word');\n        const imageItem = itemsInPair.find(pi => pi.type === 'image');\n        if (wordItem && imageItem) {\n          const itemIdForProgress = `matchimg_${normalizeString(imageItem.value)}_${normalizeString(wordItem.value)}`;\n          progress.scheduleReview(itemIdForProgress, 'vocab-match-image-word', language, false);\n        }\n      }\n    });\n    setMatchedPairs(allPairsRevealed);\n    // setLines(newLines); // drawLineBetweenItems updates lines state directly\n    setFeedback({\n      message: \"All pairs revealed.\",\n      type: 'info'\n    });\n  };\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading match image & word exercise...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 208,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(FeedbackDisplay, {\n    message: error,\n    type: \"error\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 209,\n    columnNumber: 21\n  }, this);\n  if (gameItems.length === 0 && !isLoading) return /*#__PURE__*/_jsxDEV(FeedbackDisplay, {\n    message: \"No items available for this exercise.\",\n    type: \"info\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 210,\n    columnNumber: 52\n  }, this);\n  const getItemStyle = item => {\n    let style = {\n      padding: '10px',\n      margin: '5px',\n      border: '2px solid #ddd',\n      borderRadius: '8px',\n      cursor: 'pointer',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      minHeight: '80px',\n      minWidth: '100px',\n      backgroundColor: '#fff',\n      transition: 'all 0.2s ease-out',\n      boxSizing: 'border-box'\n    };\n    if (selectedItems.find(sel => sel.id === item.id) && !matchedPairs[item.pairId]) {\n      style.borderColor = '#007bff';\n      style.boxShadow = '0 0 5px rgba(0,123,255,0.5)';\n    }\n    if (matchedPairs[item.pairId]) {\n      style.backgroundColor = '#e6ffed';\n      style.borderColor = '#b7eac9';\n      style.cursor = 'default';\n    }\n    return style;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: 'center',\n      padding: '20px',\n      border: '1px solid #eee',\n      borderRadius: '8px',\n      maxWidth: '700px',\n      margin: 'auto'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Match Image with Word\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: gridContainerRef,\n      style: {\n        display: 'grid',\n        gridTemplateColumns: 'repeat(auto-fit, minmax(120px, 1fr))',\n        gap: '15px',\n        margin: '20px auto',\n        position: 'relative'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n        style: {\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          width: '100%',\n          height: '100%',\n          pointerEvents: 'none',\n          zIndex: 0\n        },\n        children: lines.map(line => /*#__PURE__*/_jsxDEV(\"line\", {\n          x1: line.x1,\n          y1: line.y1,\n          x2: line.x2,\n          y2: line.y2,\n          stroke: \"#28a745\",\n          strokeWidth: \"3\",\n          opacity: \"0.7\"\n        }, line.key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 9\n      }, this), gameItems.map(item => /*#__PURE__*/_jsxDEV(\"button\", {\n        ref: el => itemRefs.current[item.id] = el,\n        \"data-id\": item.id,\n        style: {\n          ...getItemStyle(item),\n          zIndex: 1\n        } // Ensure buttons are above SVG\n        ,\n        onClick: () => handleItemClick(item),\n        disabled: isRevealed || matchedPairs[item.pairId],\n        className: matchedPairs[item.pairId] ? 'matched' : selectedItems.find(sel => sel.id === item.id) ? 'selected-match-item' : '',\n        children: item.type === 'image' ? /*#__PURE__*/_jsxDEV(\"img\", {\n          src: item.src.startsWith('assets/') ? `/${item.src}` : item.src,\n          alt: item.alt || \"Match image\",\n          style: {\n            maxWidth: '80px',\n            maxHeight: '80px',\n            objectFit: 'contain'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            ...(isLatinized && item.value !== getLatinizedText(item.value, language) && {\n              fontStyle: 'italic'\n            })\n          },\n          children: getLatinizedText(item.value, language)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 15\n        }, this)\n      }, item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FeedbackDisplay, {\n      message: feedback.message,\n      type: feedback.type,\n      language: language\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ExerciseControls, {\n      onShowHint: !isRevealed && Object.keys(matchedPairs).length < numPairs ? showHint : undefined,\n      onRevealAnswer: !isRevealed && Object.keys(matchedPairs).length < numPairs ? revealAllAnswers : undefined,\n      onNextExercise: setupExercise,\n      config: {\n        showCheck: false,\n        showHint: !isRevealed && Object.keys(matchedPairs).length < numPairs && numPairs > 0,\n        showReveal: !isRevealed && Object.keys(matchedPairs).length < numPairs && numPairs > 0,\n        showNext: true\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 232,\n    columnNumber: 5\n  }, this);\n};\n_s(MatchImageWordExercise, \"IRrRlffDSex69FD6dcgpxRVVD9Q=\", false, function () {\n  return [useLatinizationContext, useProgress];\n});\n_c = MatchImageWordExercise;\nexport default MatchImageWordExercise;\nvar _c;\n$RefreshReg$(_c, \"MatchImageWordExercise\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","loadImageData","FeedbackDisplay","ExerciseControls","useLatinizationContext","useLatinization","shuffleArray","useProgress","normalizeString","jsxDEV","_jsxDEV","MatchImageWordExercise","language","days","exerciseKey","_s","gameItems","setGameItems","selectedItems","setSelectedItems","matchedPairs","setMatchedPairs","feedback","setFeedback","message","type","isLoading","setIsLoading","error","setError","numPairs","setNumPairs","isRevealed","setIsRevealed","lines","setLines","isLatinized","getLatinizedText","progress","itemRefs","gridContainerRef","NUM_PAIRS_FOR_GAME","setupExercise","current","data","imagesData","fetchError","Error","length","selectedImages","slice","currentIdSuffix","itemsToSet","forEach","imgData","word","translations","pairId","id","Date","now","push","value","src","alt","err","console","handleItemClick","item","find","sel","newSelectedItems","drawLineBetweenItems","item1Id","item2Id","el1","el2","containerRect","getBoundingClientRect","rect1","rect2","x1","left","width","scrollLeft","y1","top","height","scrollTop","x2","y2","lineKey","prevLines","some","l","key","item1","item2","wordItem","imageItem","itemIdForProgress","prev","awardCorrectAnswer","awardIncorrectAnswer","classList","add","setTimeout","remove","Object","keys","showHint","allPairIds","Set","map","matchedPairIds","hintPairId","has","pairHintItems","filter","item1Text","item2Text","revealAllAnswers","allPairsRevealed","newLines","uniquePairIds","itemsInPair","pi","scheduleReview","children","fileName","_jsxFileName","lineNumber","columnNumber","getItemStyle","style","padding","margin","border","borderRadius","cursor","display","justifyContent","alignItems","minHeight","minWidth","backgroundColor","transition","boxSizing","borderColor","boxShadow","textAlign","maxWidth","ref","gridTemplateColumns","gap","position","pointerEvents","zIndex","line","stroke","strokeWidth","opacity","el","onClick","disabled","className","startsWith","maxHeight","objectFit","fontStyle","onShowHint","undefined","onRevealAnswer","onNextExercise","config","showCheck","showReveal","showNext","_c","$RefreshReg$"],"sources":["/workspaces/COSYlanguagesproject/src/components/Freestyle/exercises/vocabulary/MatchImageWordExercise.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\r\nimport { loadImageData } from '../../../../utils/exerciseDataService';\r\nimport FeedbackDisplay from '../../FeedbackDisplay';\r\nimport ExerciseControls from '../../ExerciseControls';\r\nimport { useLatinizationContext } from '../../../../contexts/LatinizationContext';\r\nimport useLatinization from '../../../../hooks/useLatinization';\r\nimport { shuffleArray } from '../../../../utils/arrayUtils';\r\nimport { useProgress } from '../../../../contexts/ProgressContext';\r\nimport { normalizeString } from '../../../../utils/stringUtils';\r\n\r\nconst MatchImageWordExercise = ({ language, days, exerciseKey }) => {\r\n  const [gameItems, setGameItems] = useState([]);\r\n  const [selectedItems, setSelectedItems] = useState([]); // Array of selected item objects\r\n  const [matchedPairs, setMatchedPairs] = useState({}); // { [pairId]: true }\r\n  const [feedback, setFeedback] = useState({ message: '', type: '' });\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [numPairs, setNumPairs] = useState(0);\r\n  const [isRevealed, setIsRevealed] = useState(false);\r\n  const [lines, setLines] = useState([]); // For drawing lines\r\n\r\n  const { isLatinized } = useLatinizationContext();\r\n  const getLatinizedText = useLatinization;\r\n  const progress = useProgress();\r\n\r\n  const itemRefs = useRef({}); // To store refs for each clickable item\r\n  const gridContainerRef = useRef(null); // Ref for the grid container\r\n\r\n  const NUM_PAIRS_FOR_GAME = 4;\r\n\r\n  const setupExercise = useCallback(async () => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    setFeedback({ message: '', type: '' });\r\n    setSelectedItems([]);\r\n    setMatchedPairs({});\r\n    setNumPairs(0);\r\n    setGameItems([]);\r\n    setLines([]); // Clear lines\r\n    setIsRevealed(false);\r\n    itemRefs.current = {}; // Clear old refs\r\n\r\n    try {\r\n      const { data: imagesData, error: fetchError } = await loadImageData(language, days);\r\n      if (fetchError) {\r\n        throw new Error(fetchError.message || fetchError.error || 'Failed to load image data.');\r\n      }\r\n\r\n      if (!imagesData || imagesData.length < NUM_PAIRS_FOR_GAME) {\r\n        setError(`Not enough images for this exercise. Need at least ${NUM_PAIRS_FOR_GAME}. Found ${imagesData?.length || 0}.`);\r\n        setIsLoading(false);\r\n        return;\r\n      }\r\n\r\n      const selectedImages = shuffleArray(imagesData).slice(0, NUM_PAIRS_FOR_GAME);\r\n      setNumPairs(selectedImages.length);\r\n\r\n      let currentIdSuffix = 0;\r\n      const itemsToSet = [];\r\n      selectedImages.forEach((imgData) => {\r\n        const word = imgData.translations[language] || imgData.word; // Fallback to imgData.word if translation missing\r\n        const pairId = `pair-${imgData.id || Date.now() + '-' + (currentIdSuffix++)}`;\r\n        itemsToSet.push({ type: 'image', value: imgData.src, id: `img-${pairId}`, pairId: pairId, src: imgData.src, alt: word });\r\n        itemsToSet.push({ type: 'word', value: word, id: `word-${pairId}`, pairId: pairId });\r\n      });\r\n\r\n      setGameItems(shuffleArray(itemsToSet));\r\n\r\n    } catch (err) {\r\n      console.error(\"MatchImageWordExercise - Error setting up:\", err);\r\n      setError(err.message || 'An unexpected error occurred.');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [language, days, NUM_PAIRS_FOR_GAME]);\r\n\r\n  useEffect(() => {\r\n    if (language && days && days.length > 0) {\r\n      setupExercise();\r\n    } else {\r\n      setIsLoading(false);\r\n      setError(\"Please select a language and day(s).\");\r\n    }\r\n  }, [setupExercise, exerciseKey, language, days]);\r\n\r\n  const handleItemClick = (item) => {\r\n    if (isRevealed || matchedPairs[item.pairId] || selectedItems.find(sel => sel.id === item.id) || selectedItems.length >= 2) {\r\n      return;\r\n    }\r\n    const newSelectedItems = [...selectedItems, item];\r\n    setSelectedItems(newSelectedItems);\r\n    setFeedback({ message: '', type: '' });\r\n  };\r\n  \r\n  const drawLineBetweenItems = useCallback((item1Id, item2Id) => {\r\n    const el1 = itemRefs.current[item1Id];\r\n    const el2 = itemRefs.current[item2Id];\r\n\r\n    if (!el1 || !el2 || !gridContainerRef.current) return;\r\n\r\n    const containerRect = gridContainerRef.current.getBoundingClientRect();\r\n    const rect1 = el1.getBoundingClientRect();\r\n    const rect2 = el2.getBoundingClientRect();\r\n\r\n    const x1 = rect1.left + rect1.width / 2 - containerRect.left + gridContainerRef.current.scrollLeft;\r\n    const y1 = rect1.top + rect1.height / 2 - containerRect.top + gridContainerRef.current.scrollTop;\r\n    const x2 = rect2.left + rect2.width / 2 - containerRect.left + gridContainerRef.current.scrollLeft;\r\n    const y2 = rect2.top + rect2.height / 2 - containerRect.top + gridContainerRef.current.scrollTop;\r\n\r\n    const lineKey = `line-${item1Id}-${item2Id}`;\r\n    // Avoid duplicate lines if already drawn (e.g. if logic re-triggers)\r\n    setLines(prevLines => {\r\n        if (prevLines.some(l => l.key === lineKey || l.key === `line-${item2Id}-${item1Id}`)) {\r\n            return prevLines;\r\n        }\r\n        return [...prevLines, { x1, y1, x2, y2, key: lineKey }];\r\n    });\r\n  }, []);\r\n\r\n\r\n  useEffect(() => {\r\n    if (selectedItems.length === 2) {\r\n      const [item1, item2] = selectedItems;\r\n      const wordItem = item1.type === 'word' ? item1 : (item2.type === 'word' ? item2 : null);\r\n      const imageItem = item1.type === 'image' ? item1 : (item2.type === 'image' ? item2 : null);\r\n      const itemIdForProgress = `matchimg_${imageItem ? normalizeString(imageItem.value) : 'unknownimg'}_${wordItem ? normalizeString(wordItem.value) : 'unknownword'}`;\r\n\r\n      if (item1.pairId === item2.pairId) {\r\n        setFeedback({ message: 'Correct Match!', type: 'correct' });\r\n        setMatchedPairs(prev => ({ ...prev, [item1.pairId]: true }));\r\n        drawLineBetweenItems(item1.id, item2.id);\r\n        progress.awardCorrectAnswer(itemIdForProgress, 'vocab-match-image-word', language);\r\n        setSelectedItems([]);\r\n      } else {\r\n        setFeedback({ message: 'Incorrect Match. Try again.', type: 'incorrect' });\r\n        progress.awardIncorrectAnswer(itemIdForProgress, 'vocab-match-image-word', language);\r\n        \r\n        const el1 = itemRefs.current[item1.id];\r\n        const el2 = itemRefs.current[item2.id];\r\n        if(el1) el1.classList.add('incorrect-flash');\r\n        if(el2) el2.classList.add('incorrect-flash');\r\n\r\n        setTimeout(() => {\r\n          if(el1) el1.classList.remove('incorrect-flash');\r\n          if(el2) el2.classList.remove('incorrect-flash');\r\n          setSelectedItems([]);\r\n        }, 1000);\r\n      }\r\n    }\r\n  }, [selectedItems, progress, language, drawLineBetweenItems]);\r\n\r\n  useEffect(() => {\r\n    if (numPairs > 0 && Object.keys(matchedPairs).length === numPairs && !isRevealed) {\r\n      setFeedback({ message: 'All pairs matched! Well done!', type: 'success' });\r\n    }\r\n  }, [matchedPairs, numPairs, isRevealed]);\r\n\r\n  const showHint = () => {\r\n     if (isRevealed || Object.keys(matchedPairs).length >= numPairs) return;\r\n    // Find an unmatched pairId\r\n    const allPairIds = new Set(gameItems.map(item => item.pairId));\r\n    const matchedPairIds = new Set(Object.keys(matchedPairs));\r\n    let hintPairId = null;\r\n    for (const id of allPairIds) {\r\n        if (!matchedPairIds.has(id)) {\r\n            hintPairId = id;\r\n            break;\r\n        }\r\n    }\r\n\r\n    if (hintPairId) {\r\n        const pairHintItems = gameItems.filter(item => item.pairId === hintPairId);\r\n        if (pairHintItems.length === 2) {\r\n            const item1Text = pairHintItems[0].type === 'word' ? pairHintItems[0].value : `the image for \"${pairHintItems[0].alt}\"`;\r\n            const item2Text = pairHintItems[1].type === 'word' ? pairHintItems[1].value : `the image for \"${pairHintItems[1].alt}\"`;\r\n            setFeedback({ message: `Hint: Try matching ${getLatinizedText(item1Text, language)} with ${getLatinizedText(item2Text, language)}.`, type: 'hint' });\r\n        }\r\n    } else {\r\n        setFeedback({ message: \"No more hints available.\", type: 'info' });\r\n    }\r\n  };\r\n\r\n  const revealAllAnswers = () => {\r\n    setIsRevealed(true);\r\n    const allPairsRevealed = {};\r\n    const newLines = [];\r\n    const uniquePairIds = [...new Set(gameItems.map(item => item.pairId))];\r\n\r\n    uniquePairIds.forEach(pairId => {\r\n      allPairsRevealed[pairId] = true;\r\n      const itemsInPair = gameItems.filter(item => item.pairId === pairId);\r\n      if (itemsInPair.length === 2) {\r\n        drawLineBetweenItems(itemsInPair[0].id, itemsInPair[1].id);\r\n        \r\n        const wordItem = itemsInPair.find(pi => pi.type === 'word');\r\n        const imageItem = itemsInPair.find(pi => pi.type === 'image');\r\n        if(wordItem && imageItem){\r\n            const itemIdForProgress = `matchimg_${normalizeString(imageItem.value)}_${normalizeString(wordItem.value)}`;\r\n            progress.scheduleReview(itemIdForProgress, 'vocab-match-image-word', language, false);\r\n        }\r\n      }\r\n    });\r\n    setMatchedPairs(allPairsRevealed);\r\n    // setLines(newLines); // drawLineBetweenItems updates lines state directly\r\n    setFeedback({ message: \"All pairs revealed.\", type: 'info' });\r\n  };\r\n\r\n  if (isLoading) return <p>Loading match image & word exercise...</p>;\r\n  if (error) return <FeedbackDisplay message={error} type=\"error\" />;\r\n  if (gameItems.length === 0 && !isLoading) return <FeedbackDisplay message=\"No items available for this exercise.\" type=\"info\" />;\r\n\r\n  const getItemStyle = (item) => {\r\n    let style = {\r\n      padding: '10px', margin: '5px', border: '2px solid #ddd', borderRadius: '8px',\r\n      cursor: 'pointer', display: 'flex', justifyContent: 'center', alignItems: 'center',\r\n      minHeight: '80px', minWidth: '100px', backgroundColor: '#fff', transition: 'all 0.2s ease-out',\r\n      boxSizing: 'border-box',\r\n    };\r\n    if (selectedItems.find(sel => sel.id === item.id) && !matchedPairs[item.pairId]) {\r\n      style.borderColor = '#007bff';\r\n      style.boxShadow = '0 0 5px rgba(0,123,255,0.5)';\r\n    }\r\n    if (matchedPairs[item.pairId]) {\r\n      style.backgroundColor = '#e6ffed';\r\n      style.borderColor = '#b7eac9';\r\n      style.cursor = 'default';\r\n    }\r\n    return style;\r\n  };\r\n\r\n  return (\r\n    <div style={{ textAlign: 'center', padding: '20px', border: '1px solid #eee', borderRadius: '8px', maxWidth: '700px', margin: 'auto' }}>\r\n      <h3>Match Image with Word</h3>\r\n      <div \r\n        ref={gridContainerRef} \r\n        style={{ \r\n          display: 'grid', \r\n          gridTemplateColumns: 'repeat(auto-fit, minmax(120px, 1fr))', \r\n          gap: '15px', \r\n          margin: '20px auto', \r\n          position: 'relative' \r\n        }}\r\n      >\r\n        <svg \r\n          style={{ \r\n            position: 'absolute', top: 0, left: 0, \r\n            width: '100%', height: '100%', \r\n            pointerEvents: 'none', zIndex: 0 \r\n          }}\r\n        >\r\n          {lines.map(line => (\r\n            <line \r\n              key={line.key} \r\n              x1={line.x1} y1={line.y1} \r\n              x2={line.x2} y2={line.y2} \r\n              stroke=\"#28a745\" strokeWidth=\"3\" opacity=\"0.7\"\r\n            />\r\n          ))}\r\n        </svg>\r\n        {gameItems.map((item) => (\r\n          <button\r\n            key={item.id}\r\n            ref={el => itemRefs.current[item.id] = el}\r\n            data-id={item.id}\r\n            style={{...getItemStyle(item), zIndex: 1}} // Ensure buttons are above SVG\r\n            onClick={() => handleItemClick(item)}\r\n            disabled={isRevealed || matchedPairs[item.pairId]}\r\n            className={matchedPairs[item.pairId] ? 'matched' : (selectedItems.find(sel => sel.id === item.id) ? 'selected-match-item' : '')}\r\n          >\r\n            {item.type === 'image' ? (\r\n              <img src={item.src.startsWith('assets/') ? `/${item.src}` : item.src} alt={item.alt || \"Match image\"} style={{ maxWidth: '80px', maxHeight: '80px', objectFit: 'contain' }} />\r\n            ) : (\r\n              <span style={{...(isLatinized && item.value !== getLatinizedText(item.value, language) && {fontStyle:'italic'})}}>\r\n                {getLatinizedText(item.value, language)}\r\n              </span>\r\n            )}\r\n          </button>\r\n        ))}\r\n      </div>\r\n      <FeedbackDisplay message={feedback.message} type={feedback.type} language={language} />\r\n      <ExerciseControls\r\n        onShowHint={!isRevealed && Object.keys(matchedPairs).length < numPairs ? showHint : undefined}\r\n        onRevealAnswer={!isRevealed && Object.keys(matchedPairs).length < numPairs ? revealAllAnswers : undefined}\r\n        onNextExercise={setupExercise}\r\n        config={{\r\n          showCheck: false,\r\n          showHint: !isRevealed && Object.keys(matchedPairs).length < numPairs && numPairs > 0,\r\n          showReveal: !isRevealed && Object.keys(matchedPairs).length < numPairs && numPairs > 0,\r\n          showNext: true,\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MatchImageWordExercise;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}