{"ast":null,"code":"var _jsxFileName = \"/workspaces/COSYlanguagesproject/src/components/Freestyle/exercises/speaking/MonologueExercise.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport ExerciseControls from '../../ExerciseControls';\nimport FeedbackDisplay from '../../FeedbackDisplay';\nimport { useI18n } from '../../../../i18n/I18nContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MonologueExercise = ({\n  language,\n  days,\n  exerciseKey\n}) => {\n  _s();\n  const {\n    t\n  } = useI18n();\n\n  // In a real implementation, this would involve:\n  // - Potentially fetching a prompt or topic.\n  // - Speech recognition for recording the monologue.\n  // - Displaying the transcript.\n  // - Maybe some basic feedback on duration or fluency (advanced).\n\n  const handleNewExercise = () => {\n    // For now, just a conceptual reset. A real version might fetch a new prompt.\n    console.log(\"New Monologue exercise requested.\");\n    // In a stateful component, you'd reset relevant states here.\n  };\n  const showHint = () => {\n    // Example hint\n    alert(t('feedback.hintMonologueGeneric', 'Organize your thoughts before speaking. Use varied vocabulary and try to speak fluently.'));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px',\n      border: '1px solid #ddd',\n      borderRadius: '5px',\n      backgroundColor: '#f9f9f9',\n      textAlign: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: t('titles.monologuePractice', 'Monologue Practice')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: t('exercises.monologueNotImplemented', 'This monologue exercise is a placeholder.')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: t('exercises.imagineMonologue', 'Imagine you can record a monologue here on a given topic or freely.')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: '20px 0'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          fontSize: '2rem',\n          padding: '10px',\n          cursor: 'not-allowed'\n        },\n        disabled: true,\n        children: \"\\uD83C\\uDFA4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          marginTop: '10px',\n          fontStyle: 'italic'\n        },\n        children: t('labels.recordingControlsHere', '(Recording controls and transcript would appear here)')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FeedbackDisplay, {\n      message: \"\",\n      type: \"info\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ExerciseControls, {\n      onNextExercise: handleNewExercise // Placeholder for fetching new prompt/resetting\n      ,\n      onShowHint: showHint,\n      config: {\n        showCheck: false,\n        showReveal: false,\n        showHint: true,\n        showNext: true\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_s(MonologueExercise, \"82N5KF9nLzZ6+2WH7KIjzIXRkLw=\", false, function () {\n  return [useI18n];\n});\n_c = MonologueExercise;\nexport default MonologueExercise;\nvar _c;\n$RefreshReg$(_c, \"MonologueExercise\");","map":{"version":3,"names":["React","ExerciseControls","FeedbackDisplay","useI18n","jsxDEV","_jsxDEV","MonologueExercise","language","days","exerciseKey","_s","t","handleNewExercise","console","log","showHint","alert","style","padding","border","borderRadius","backgroundColor","textAlign","children","fileName","_jsxFileName","lineNumber","columnNumber","margin","fontSize","cursor","disabled","marginTop","fontStyle","message","type","onNextExercise","onShowHint","config","showCheck","showReveal","showNext","_c","$RefreshReg$"],"sources":["/workspaces/COSYlanguagesproject/src/components/Freestyle/exercises/speaking/MonologueExercise.js"],"sourcesContent":["import React from 'react';\r\nimport ExerciseControls from '../../ExerciseControls';\r\nimport FeedbackDisplay from '../../FeedbackDisplay';\r\nimport { useI18n } from '../../../../i18n/I18nContext';\r\n\r\nconst MonologueExercise = ({ language, days, exerciseKey }) => {\r\n  const { t } = useI18n();\r\n\r\n  // In a real implementation, this would involve:\r\n  // - Potentially fetching a prompt or topic.\r\n  // - Speech recognition for recording the monologue.\r\n  // - Displaying the transcript.\r\n  // - Maybe some basic feedback on duration or fluency (advanced).\r\n\r\n  const handleNewExercise = () => {\r\n    // For now, just a conceptual reset. A real version might fetch a new prompt.\r\n    console.log(\"New Monologue exercise requested.\");\r\n    // In a stateful component, you'd reset relevant states here.\r\n  };\r\n  \r\n  const showHint = () => {\r\n     // Example hint\r\n     alert(t('feedback.hintMonologueGeneric', 'Organize your thoughts before speaking. Use varied vocabulary and try to speak fluently.'));\r\n  };\r\n\r\n\r\n  return (\r\n    <div style={{ padding: '20px', border: '1px solid #ddd', borderRadius: '5px', backgroundColor: '#f9f9f9', textAlign: 'center' }}>\r\n      <h3>{t('titles.monologuePractice', 'Monologue Practice')}</h3>\r\n      <p>{t('exercises.monologueNotImplemented', 'This monologue exercise is a placeholder.')}</p>\r\n      <p>{t('exercises.imagineMonologue', 'Imagine you can record a monologue here on a given topic or freely.')}</p>\r\n      \r\n      {/* Placeholder for recording button and transcript display */}\r\n      <div style={{ margin: '20px 0' }}>\r\n        <button style={{fontSize: '2rem', padding: '10px', cursor: 'not-allowed'}} disabled>ðŸŽ¤</button>\r\n        <p style={{marginTop: '10px', fontStyle: 'italic'}}>{t('labels.recordingControlsHere', '(Recording controls and transcript would appear here)')}</p>\r\n      </div>\r\n\r\n      <FeedbackDisplay message=\"\" type=\"info\" /> \r\n      <ExerciseControls\r\n        onNextExercise={handleNewExercise} // Placeholder for fetching new prompt/resetting\r\n        onShowHint={showHint}\r\n        config={{\r\n          showCheck: false,\r\n          showReveal: false,\r\n          showHint: true,\r\n          showNext: true,\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MonologueExercise;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}