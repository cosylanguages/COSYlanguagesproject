{"ast":null,"code":"var _jsxFileName = \"/workspaces/COSYlanguagesproject/src/contexts/UserProfileContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useCallback, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserProfileContext = /*#__PURE__*/createContext();\nconst USER_PROFILE_STORAGE_KEY = 'COSY_USER_PROFILE';\n\n// Example: Achievements could be loaded from a JSON or defined here\n// For simplicity, defining a basic structure. Real one would be in a separate file.\nconst ALL_ACHIEVEMENTS = {\n  STREAK_3_DAYS: {\n    id: 'STREAK_3_DAYS',\n    name: '3-Day Streak!',\n    description: 'Maintained a 3-day learning streak.',\n    criteria: {\n      type: 'streak',\n      value: 3\n    },\n    icon: 'ðŸ”¥'\n  },\n  LEVEL_5: {\n    id: 'LEVEL_5',\n    name: 'Level 5 Reached',\n    description: 'Reached learning level 5.',\n    criteria: {\n      type: 'level',\n      value: 5\n    },\n    icon: 'ðŸŒŸ'\n  }\n  // Add more achievements as defined in the old achievements-data.js\n};\nexport const useUserProfile = () => {\n  _s();\n  const context = useContext(UserProfileContext);\n  if (!context) {\n    throw new Error('useUserProfile must be used within a UserProfileProvider');\n  }\n  return context;\n};\n_s(useUserProfile, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const UserProfileProvider = ({\n  children\n}) => {\n  _s2();\n  const [xp, setXp] = useState(0);\n  const [level, setLevel] = useState(1);\n  const [streak, setStreak] = useState(0);\n  const [lastActiveDate, setLastActiveDate] = useState(null); // Store as YYYY-MM-DD string\n  const [achievements, setAchievements] = useState([]); // Array of achievement IDs awarded\n\n  // Load profile from localStorage\n  useEffect(() => {\n    try {\n      const savedProfile = localStorage.getItem(USER_PROFILE_STORAGE_KEY);\n      if (savedProfile) {\n        const profile = JSON.parse(savedProfile);\n        setXp(profile.xp || 0);\n        setLevel(profile.level || 1);\n        setStreak(profile.streak || 0);\n        setLastActiveDate(profile.lastActiveDate || null);\n        setAchievements(profile.achievements || []);\n      }\n      console.log(\"[UserProfileContext] Profile loaded:\", savedProfile ? JSON.parse(savedProfile) : {});\n    } catch (error) {\n      console.error(\"[UserProfileContext] Error loading user profile:\", error);\n    }\n  }, []);\n\n  // Save profile to localStorage\n  useEffect(() => {\n    try {\n      const profileData = {\n        xp,\n        level,\n        streak,\n        lastActiveDate,\n        achievements\n      };\n      localStorage.setItem(USER_PROFILE_STORAGE_KEY, JSON.stringify(profileData));\n      console.log(\"[UserProfileContext] Profile saved:\", profileData);\n    } catch (error) {\n      console.error(\"[UserProfileContext] Error saving user profile:\", error);\n    }\n  }, [xp, level, streak, lastActiveDate, achievements]);\n\n  // Update level whenever XP changes\n  useEffect(() => {\n    const newLevel = Math.floor(xp / 50) + 1; // As per old GameState logic\n    if (newLevel !== level) {\n      setLevel(newLevel);\n      // Potentially trigger level up notification or check for level-based achievements\n      console.log(`[UserProfileContext] Level up! New level: ${newLevel}`);\n      // checkAndAwardAchievement('LEVEL_UP', newLevel); // Example call\n    }\n  }, [xp, level]);\n  const addXP = useCallback(amount => {\n    setXp(prevXp => prevXp + amount);\n  }, []);\n  const reduceXP = useCallback(amount => {\n    setXp(prevXp => Math.max(0, prevXp - amount));\n  }, []);\n  const updateStreak = useCallback(() => {\n    const today = new Date();\n    const todayStr = today.toISOString().split('T')[0]; // YYYY-MM-DD\n\n    if (lastActiveDate === todayStr) {\n      console.log(\"[UserProfileContext] Already active today, streak maintained.\");\n      return; // Already active today\n    }\n    const yesterday = new Date(today);\n    yesterday.setDate(today.getDate() - 1);\n    const yesterdayStr = yesterday.toISOString().split('T')[0];\n    setLastActiveDate(todayStr);\n    if (lastActiveDate === yesterdayStr) {\n      setStreak(prevStreak => {\n        const newStreak = prevStreak + 1;\n        // checkAndAwardAchievement('STREAK', newStreak); // Example\n        console.log(`[UserProfileContext] Streak extended to ${newStreak} days.`);\n        return newStreak;\n      });\n    } else {\n      console.log(\"[UserProfileContext] Streak reset to 1 day.\");\n      setStreak(1); // Reset streak to 1 if not consecutive\n      // checkAndAwardAchievement('STREAK', 1); // Example\n    }\n  }, [lastActiveDate]);\n  const checkAndAwardAchievement = useCallback(achievementId => {\n    const achievement = ALL_ACHIEVEMENTS[achievementId];\n    if (!achievement || achievements.includes(achievementId)) {\n      return; // Achievement doesn't exist or already awarded\n    }\n    let criteriaMet = false;\n    if (achievement.criteria.type === 'level' && level >= achievement.criteria.value) {\n      criteriaMet = true;\n    } else if (achievement.criteria.type === 'streak' && streak >= achievement.criteria.value) {\n      criteriaMet = true;\n    }\n    // Add other criteria types: lessons completed, items mastered (from SRS context) etc.\n\n    if (criteriaMet) {\n      setAchievements(prevAchievements => {\n        if (!prevAchievements.includes(achievementId)) {\n          console.log(`[UserProfileContext] Achievement Unlocked: ${achievement.name}`);\n          // TODO: Trigger a notification to the user\n          return [...prevAchievements, achievementId];\n        }\n        return prevAchievements;\n      });\n    }\n  }, [achievements, level, streak]);\n\n  // Periodically check for achievements that might be met by current state\n  useEffect(() => {\n    Object.keys(ALL_ACHIEVEMENTS).forEach(achId => {\n      checkAndAwardAchievement(achId);\n    });\n  }, [level, streak, checkAndAwardAchievement]);\n  const value = {\n    xp,\n    level,\n    streak,\n    lastActiveDate,\n    achievements,\n    // Awarded achievement IDs\n    allAchievementDefinitions: ALL_ACHIEVEMENTS,\n    // All possible achievements\n    addXP,\n    reduceXP,\n    updateStreak,\n    // Call this when the app becomes active or a key daily action is performed\n    checkAndAwardAchievement // Can be called explicitly too\n  };\n  return /*#__PURE__*/_jsxDEV(UserProfileContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 5\n  }, this);\n};\n_s2(UserProfileProvider, \"KtPSrRkLSZEPNcb4YkVOLPnipSE=\");\n_c = UserProfileProvider;\nvar _c;\n$RefreshReg$(_c, \"UserProfileProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useCallback","useEffect","jsxDEV","_jsxDEV","UserProfileContext","USER_PROFILE_STORAGE_KEY","ALL_ACHIEVEMENTS","STREAK_3_DAYS","id","name","description","criteria","type","value","icon","LEVEL_5","useUserProfile","_s","context","Error","UserProfileProvider","children","_s2","xp","setXp","level","setLevel","streak","setStreak","lastActiveDate","setLastActiveDate","achievements","setAchievements","savedProfile","localStorage","getItem","profile","JSON","parse","console","log","error","profileData","setItem","stringify","newLevel","Math","floor","addXP","amount","prevXp","reduceXP","max","updateStreak","today","Date","todayStr","toISOString","split","yesterday","setDate","getDate","yesterdayStr","prevStreak","newStreak","checkAndAwardAchievement","achievementId","achievement","includes","criteriaMet","prevAchievements","Object","keys","forEach","achId","allAchievementDefinitions","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/workspaces/COSYlanguagesproject/src/contexts/UserProfileContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useCallback, useEffect } from 'react';\r\n\r\nconst UserProfileContext = createContext();\r\nconst USER_PROFILE_STORAGE_KEY = 'COSY_USER_PROFILE';\r\n\r\n// Example: Achievements could be loaded from a JSON or defined here\r\n// For simplicity, defining a basic structure. Real one would be in a separate file.\r\nconst ALL_ACHIEVEMENTS = {\r\n  STREAK_3_DAYS: { id: 'STREAK_3_DAYS', name: '3-Day Streak!', description: 'Maintained a 3-day learning streak.', criteria: { type: 'streak', value: 3 }, icon: 'ðŸ”¥' },\r\n  LEVEL_5: { id: 'LEVEL_5', name: 'Level 5 Reached', description: 'Reached learning level 5.', criteria: { type: 'level', value: 5 }, icon: 'ðŸŒŸ' },\r\n  // Add more achievements as defined in the old achievements-data.js\r\n};\r\n\r\n\r\nexport const useUserProfile = () => {\r\n  const context = useContext(UserProfileContext);\r\n  if (!context) {\r\n    throw new Error('useUserProfile must be used within a UserProfileProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const UserProfileProvider = ({ children }) => {\r\n  const [xp, setXp] = useState(0);\r\n  const [level, setLevel] = useState(1);\r\n  const [streak, setStreak] = useState(0);\r\n  const [lastActiveDate, setLastActiveDate] = useState(null); // Store as YYYY-MM-DD string\r\n  const [achievements, setAchievements] = useState([]); // Array of achievement IDs awarded\r\n\r\n  // Load profile from localStorage\r\n  useEffect(() => {\r\n    try {\r\n      const savedProfile = localStorage.getItem(USER_PROFILE_STORAGE_KEY);\r\n      if (savedProfile) {\r\n        const profile = JSON.parse(savedProfile);\r\n        setXp(profile.xp || 0);\r\n        setLevel(profile.level || 1);\r\n        setStreak(profile.streak || 0);\r\n        setLastActiveDate(profile.lastActiveDate || null);\r\n        setAchievements(profile.achievements || []);\r\n      }\r\n      console.log(\"[UserProfileContext] Profile loaded:\", savedProfile ? JSON.parse(savedProfile) : {});\r\n    } catch (error) {\r\n      console.error(\"[UserProfileContext] Error loading user profile:\", error);\r\n    }\r\n  }, []);\r\n\r\n  // Save profile to localStorage\r\n  useEffect(() => {\r\n    try {\r\n      const profileData = { xp, level, streak, lastActiveDate, achievements };\r\n      localStorage.setItem(USER_PROFILE_STORAGE_KEY, JSON.stringify(profileData));\r\n      console.log(\"[UserProfileContext] Profile saved:\", profileData);\r\n    } catch (error) {\r\n      console.error(\"[UserProfileContext] Error saving user profile:\", error);\r\n    }\r\n  }, [xp, level, streak, lastActiveDate, achievements]);\r\n\r\n  // Update level whenever XP changes\r\n  useEffect(() => {\r\n    const newLevel = Math.floor(xp / 50) + 1; // As per old GameState logic\r\n    if (newLevel !== level) {\r\n      setLevel(newLevel);\r\n      // Potentially trigger level up notification or check for level-based achievements\r\n      console.log(`[UserProfileContext] Level up! New level: ${newLevel}`);\r\n      // checkAndAwardAchievement('LEVEL_UP', newLevel); // Example call\r\n    }\r\n  }, [xp, level]);\r\n\r\n\r\n  const addXP = useCallback((amount) => {\r\n    setXp(prevXp => prevXp + amount);\r\n  }, []);\r\n\r\n  const reduceXP = useCallback((amount) => {\r\n    setXp(prevXp => Math.max(0, prevXp - amount));\r\n  }, []);\r\n\r\n  const updateStreak = useCallback(() => {\r\n    const today = new Date();\r\n    const todayStr = today.toISOString().split('T')[0]; // YYYY-MM-DD\r\n\r\n    if (lastActiveDate === todayStr) {\r\n      console.log(\"[UserProfileContext] Already active today, streak maintained.\");\r\n      return; // Already active today\r\n    }\r\n\r\n    const yesterday = new Date(today);\r\n    yesterday.setDate(today.getDate() - 1);\r\n    const yesterdayStr = yesterday.toISOString().split('T')[0];\r\n\r\n    setLastActiveDate(todayStr);\r\n\r\n    if (lastActiveDate === yesterdayStr) {\r\n      setStreak(prevStreak => {\r\n        const newStreak = prevStreak + 1;\r\n        // checkAndAwardAchievement('STREAK', newStreak); // Example\r\n        console.log(`[UserProfileContext] Streak extended to ${newStreak} days.`);\r\n        return newStreak;\r\n      });\r\n    } else {\r\n      console.log(\"[UserProfileContext] Streak reset to 1 day.\");\r\n      setStreak(1); // Reset streak to 1 if not consecutive\r\n      // checkAndAwardAchievement('STREAK', 1); // Example\r\n    }\r\n  }, [lastActiveDate]);\r\n  \r\n  const checkAndAwardAchievement = useCallback((achievementId) => {\r\n    const achievement = ALL_ACHIEVEMENTS[achievementId];\r\n    if (!achievement || achievements.includes(achievementId)) {\r\n      return; // Achievement doesn't exist or already awarded\r\n    }\r\n\r\n    let criteriaMet = false;\r\n    if (achievement.criteria.type === 'level' && level >= achievement.criteria.value) {\r\n      criteriaMet = true;\r\n    } else if (achievement.criteria.type === 'streak' && streak >= achievement.criteria.value) {\r\n      criteriaMet = true;\r\n    }\r\n    // Add other criteria types: lessons completed, items mastered (from SRS context) etc.\r\n\r\n    if (criteriaMet) {\r\n      setAchievements(prevAchievements => {\r\n        if (!prevAchievements.includes(achievementId)) {\r\n          console.log(`[UserProfileContext] Achievement Unlocked: ${achievement.name}`);\r\n          // TODO: Trigger a notification to the user\r\n          return [...prevAchievements, achievementId];\r\n        }\r\n        return prevAchievements;\r\n      });\r\n    }\r\n  }, [achievements, level, streak]);\r\n\r\n  // Periodically check for achievements that might be met by current state\r\n  useEffect(() => {\r\n    Object.keys(ALL_ACHIEVEMENTS).forEach(achId => {\r\n        checkAndAwardAchievement(achId);\r\n    });\r\n  }, [level, streak, checkAndAwardAchievement]);\r\n\r\n\r\n  const value = {\r\n    xp,\r\n    level,\r\n    streak,\r\n    lastActiveDate,\r\n    achievements, // Awarded achievement IDs\r\n    allAchievementDefinitions: ALL_ACHIEVEMENTS, // All possible achievements\r\n    addXP,\r\n    reduceXP,\r\n    updateStreak, // Call this when the app becomes active or a key daily action is performed\r\n    checkAndAwardAchievement, // Can be called explicitly too\r\n  };\r\n\r\n  return (\r\n    <UserProfileContext.Provider value={value}>\r\n      {children}\r\n    </UserProfileContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}