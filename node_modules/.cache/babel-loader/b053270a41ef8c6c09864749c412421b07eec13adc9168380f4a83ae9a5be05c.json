{"ast":null,"code":"var _jsxFileName = \"/workspaces/COSYlanguagesproject/src/contexts/LatinizationContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useCallback, useEffect } from 'react';\n\n// This list should ideally be kept in sync with any master language list\n// or configuration. For now, mirroring what was in latinizer.js\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const LATINIZABLE_LANGUAGE_IDS = ['ΚΟΖΥελληνικά', 'ТАКОЙрусский', 'ԾՈՍՅհայկական'];\nconst LatinizationContext = /*#__PURE__*/createContext();\nexport const useLatinizationContext = () => {\n  _s();\n  const context = useContext(LatinizationContext);\n  if (!context) {\n    throw new Error('useLatinizationContext must be used within a LatinizationProvider');\n  }\n  return context;\n};\n_s(useLatinizationContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const LatinizationProvider = ({\n  children\n}) => {\n  _s2();\n  const [isLatinized, setIsLatinized] = useState(() => {\n    // Initialize state from localStorage if available\n    const storedState = localStorage.getItem('latinizeStateReact');\n    return storedState ? JSON.parse(storedState) : false;\n  });\n  useEffect(() => {\n    // Persist state to localStorage whenever it changes\n    localStorage.setItem('latinizeStateReact', JSON.stringify(isLatinized));\n  }, [isLatinized]);\n  const toggleLatinization = useCallback(() => {\n    setIsLatinized(prev => !prev);\n  }, []);\n  const value = {\n    isLatinized,\n    toggleLatinization,\n    latinizableLanguageIds: LATINIZABLE_LANGUAGE_IDS // Provide the list through context\n  };\n  return /*#__PURE__*/_jsxDEV(LatinizationContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s2(LatinizationProvider, \"1hzVa6J+dEkyP1WFaNc6q5eIrc4=\");\n_c = LatinizationProvider;\nvar _c;\n$RefreshReg$(_c, \"LatinizationProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useCallback","useEffect","jsxDEV","_jsxDEV","LATINIZABLE_LANGUAGE_IDS","LatinizationContext","useLatinizationContext","_s","context","Error","LatinizationProvider","children","_s2","isLatinized","setIsLatinized","storedState","localStorage","getItem","JSON","parse","setItem","stringify","toggleLatinization","prev","value","latinizableLanguageIds","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/workspaces/COSYlanguagesproject/src/contexts/LatinizationContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useCallback, useEffect } from 'react';\r\n\r\n// This list should ideally be kept in sync with any master language list\r\n// or configuration. For now, mirroring what was in latinizer.js\r\nexport const LATINIZABLE_LANGUAGE_IDS = ['ΚΟΖΥελληνικά', 'ТАКОЙрусский', 'ԾՈՍՅհայկական'];\r\n\r\nconst LatinizationContext = createContext();\r\n\r\nexport const useLatinizationContext = () => {\r\n  const context = useContext(LatinizationContext);\r\n  if (!context) {\r\n    throw new Error('useLatinizationContext must be used within a LatinizationProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const LatinizationProvider = ({ children }) => {\r\n  const [isLatinized, setIsLatinized] = useState(() => {\r\n    // Initialize state from localStorage if available\r\n    const storedState = localStorage.getItem('latinizeStateReact');\r\n    return storedState ? JSON.parse(storedState) : false;\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Persist state to localStorage whenever it changes\r\n    localStorage.setItem('latinizeStateReact', JSON.stringify(isLatinized));\r\n  }, [isLatinized]);\r\n\r\n  const toggleLatinization = useCallback(() => {\r\n    setIsLatinized(prev => !prev);\r\n  }, []);\r\n\r\n  const value = {\r\n    isLatinized,\r\n    toggleLatinization,\r\n    latinizableLanguageIds: LATINIZABLE_LANGUAGE_IDS, // Provide the list through context\r\n  };\r\n\r\n  return (\r\n    <LatinizationContext.Provider value={value}>\r\n      {children}\r\n    </LatinizationContext.Provider>\r\n  );\r\n};\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,WAAW,EAAEC,SAAS,QAAQ,OAAO;;AAE1F;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,wBAAwB,GAAG,CAAC,cAAc,EAAE,cAAc,EAAE,cAAc,CAAC;AAExF,MAAMC,mBAAmB,gBAAGR,aAAa,CAAC,CAAC;AAE3C,OAAO,MAAMS,sBAAsB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1C,MAAMC,OAAO,GAAGT,UAAU,CAACM,mBAAmB,CAAC;EAC/C,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,mEAAmE,CAAC;EACtF;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,sBAAsB;AAQnC,OAAO,MAAMI,oBAAoB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EACpD,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGhB,QAAQ,CAAC,MAAM;IACnD;IACA,MAAMiB,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,oBAAoB,CAAC;IAC9D,OAAOF,WAAW,GAAGG,IAAI,CAACC,KAAK,CAACJ,WAAW,CAAC,GAAG,KAAK;EACtD,CAAC,CAAC;EAEFd,SAAS,CAAC,MAAM;IACd;IACAe,YAAY,CAACI,OAAO,CAAC,oBAAoB,EAAEF,IAAI,CAACG,SAAS,CAACR,WAAW,CAAC,CAAC;EACzE,CAAC,EAAE,CAACA,WAAW,CAAC,CAAC;EAEjB,MAAMS,kBAAkB,GAAGtB,WAAW,CAAC,MAAM;IAC3Cc,cAAc,CAACS,IAAI,IAAI,CAACA,IAAI,CAAC;EAC/B,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,KAAK,GAAG;IACZX,WAAW;IACXS,kBAAkB;IAClBG,sBAAsB,EAAErB,wBAAwB,CAAE;EACpD,CAAC;EAED,oBACED,OAAA,CAACE,mBAAmB,CAACqB,QAAQ;IAACF,KAAK,EAAEA,KAAM;IAAAb,QAAA,EACxCA;EAAQ;IAAAgB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACmB,CAAC;AAEnC,CAAC;AAAClB,GAAA,CA3BWF,oBAAoB;AAAAqB,EAAA,GAApBrB,oBAAoB;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}