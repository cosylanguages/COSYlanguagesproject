{"ast":null,"code":"var _jsxFileName = \"/workspaces/COSYlanguagesproject/src/components/Freestyle/exercises/grammar/FillGapsExercise.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { loadVerbGrammarData, loadVocabularyData } from '../../../../utils/exerciseDataService';\nimport { processVerbData, generateGrammarExerciseSentence, setGrammarGeneratorTranslations } from '../../../../utils/grammarSentenceGenerator';\nimport { useLatinizationContext } from '../../../../contexts/LatinizationContext';\nimport useLatinization from '../../../../hooks/useLatinization';\nimport { normalizeString } from '../../../../utils/stringUtils';\nimport FeedbackDisplay from '../../FeedbackDisplay';\nimport ExerciseControls from '../../ExerciseControls';\nimport { pronounceText } from '../../../../utils/speechUtils';\nimport { useI18n } from '../../../../i18n/I18nContext';\nimport { useProgress } from '../../../../contexts/ProgressContext'; // Import useProgress\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst FillGapsExercise = ({\n  language,\n  days,\n  exerciseKey\n}) => {\n  _s();\n  const [exerciseData, setExerciseData] = useState(null);\n  const [userInput, setUserInput] = useState('');\n  const [feedback, setFeedback] = useState({\n    message: '',\n    type: ''\n  });\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [isRevealed, setIsRevealed] = useState(false);\n  const {\n    isLatinized\n  } = useLatinizationContext();\n  const getLatinizedText = useLatinization;\n  const {\n    t,\n    allTranslations\n  } = useI18n();\n  const progress = useProgress();\n  useEffect(() => {\n    if (allTranslations) {\n      setGrammarGeneratorTranslations(allTranslations);\n    }\n  }, [allTranslations]);\n  const setupNewExercise = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    setFeedback({\n      message: '',\n      type: ''\n    });\n    setUserInput('');\n    setIsRevealed(false);\n    setExerciseData(null);\n    try {\n      const {\n        data: rawVerbItems,\n        error: verbError\n      } = await loadVerbGrammarData(language, days);\n      if (verbError) {\n        throw new Error(verbError.message || verbError.error || 'Failed to load verb grammar data.');\n      }\n      const {\n        data: vocabItems,\n        error: vocabError\n      } = await loadVocabularyData(language, days);\n      if (vocabError) {\n        console.warn(\"FillGapsExercise: Failed to load vocabulary data. Sentence objects might be generic.\");\n      }\n      if (rawVerbItems && rawVerbItems.length > 0) {\n        const processedVerbItems = processVerbData(rawVerbItems, language);\n        if (!processedVerbItems || processedVerbItems.length === 0) {\n          setError(t('errors.noProcessableVerbData', 'No processable verb items found.'));\n          setIsLoading(false);\n          return;\n        }\n        const sentenceDetails = await generateGrammarExerciseSentence(language, days, processedVerbItems, vocabItems || []);\n        if (sentenceDetails && sentenceDetails.questionPrompt && sentenceDetails.answer) {\n          setExerciseData(sentenceDetails);\n        } else {\n          setError(t('errors.couldNotGenerateSentence', 'Could not generate a fill-gaps exercise sentence.'));\n        }\n      } else {\n        setError(t('errors.noVerbData', 'No verb grammar data found for the selected criteria.'));\n      }\n    } catch (err) {\n      console.error(\"FillGapsExercise - Error setting up:\", err);\n      setError(err.message || t('errors.unexpectedError', 'An unexpected error occurred.'));\n    } finally {\n      setIsLoading(false);\n    }\n  }, [language, days, t]);\n  useEffect(() => {\n    if (language && days && days.length > 0) {\n      setupNewExercise();\n    } else {\n      setIsLoading(false);\n      setError(t('errors.selectLangDay', \"Please select a language and day(s).\"));\n    }\n  }, [setupNewExercise, exerciseKey, language, days, t]);\n  const handleInputChange = e => {\n    setUserInput(e.target.value);\n    if (feedback.message) setFeedback({\n      message: '',\n      type: ''\n    });\n  };\n  const checkAnswer = () => {\n    if (!exerciseData || isRevealed) return;\n    const correctAnswer = exerciseData.answer;\n    const latinizedCorrect = getLatinizedText(correctAnswer, language);\n    const displayCorrect = isLatinized ? latinizedCorrect : correctAnswer;\n    let possibleAnswers = correctAnswer.split('/').map(ans => normalizeString(ans.trim()));\n    const itemId = `fillgaps_${normalizeString(exerciseData.correctSentence)}_${normalizeString(correctAnswer)}`;\n    if (possibleAnswers.includes(normalizeString(userInput))) {\n      setFeedback({\n        message: t('feedback.correct', 'Correct!'),\n        type: 'correct'\n      });\n      progress.awardCorrectAnswer(itemId, 'grammar-fillgaps');\n    } else {\n      setFeedback({\n        message: t('feedback.incorrectFillGaps', `Incorrect. The correct answer is: ${displayCorrect}. Full sentence: ${getLatinizedText(exerciseData.correctSentence, language)}`, {\n          correctAnswer: displayCorrect,\n          correctSentence: getLatinizedText(exerciseData.correctSentence, language)\n        }),\n        type: 'incorrect'\n      });\n      progress.awardIncorrectAnswer(itemId, 'grammar-fillgaps');\n    }\n  };\n  const showHint = () => {\n    if (!exerciseData || isRevealed) return;\n    const answerForHint = exerciseData.answer.split('/')[0].trim();\n    let hintLetter = '';\n    if (answerForHint && answerForHint.length > 0) {\n      hintLetter = answerForHint[0];\n    }\n    setFeedback({\n      message: t('feedback.hintFillGaps', `Hint: The answer starts with '${getLatinizedText(hintLetter, language)}'.`, {\n        letter: getLatinizedText(hintLetter, language)\n      }),\n      type: 'hint'\n    });\n  };\n  const revealTheAnswer = () => {\n    if (!exerciseData) return;\n    const correctAnswer = exerciseData.answer.split('/')[0].trim();\n    const latinizedCorrect = getLatinizedText(correctAnswer, language);\n    const displayCorrect = isLatinized ? latinizedCorrect : correctAnswer;\n    const itemId = `fillgaps_${normalizeString(exerciseData.correctSentence)}_${normalizeString(exerciseData.answer)}`;\n    setUserInput(correctAnswer);\n    setFeedback({\n      message: t('feedback.revealedFillGaps', `The correct answer is: ${displayCorrect}. Full sentence: ${getLatinizedText(exerciseData.correctSentence, language)}`, {\n        correctAnswer: displayCorrect,\n        correctSentence: getLatinizedText(exerciseData.correctSentence, language)\n      }),\n      type: 'info'\n    });\n    setIsRevealed(true);\n    progress.scheduleReview(itemId, 'grammar-fillgaps', false);\n  };\n  const handlePronounceSentence = () => {\n    if (exerciseData && exerciseData.correctSentence && language) {\n      pronounceText(exerciseData.correctSentence, language).catch(err => {\n        console.error(\"Pronunciation error:\", err);\n        setFeedback({\n          message: t('errors.pronunciationError', \"Could not pronounce the sentence.\"),\n          type: \"error\"\n        });\n      });\n    }\n  };\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: t('loading.fillGapsExercise', 'Loading fill the gaps exercise...')\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(FeedbackDisplay, {\n    message: error,\n    type: \"error\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 21\n  }, this);\n  if (!exerciseData && !isLoading) return /*#__PURE__*/_jsxDEV(FeedbackDisplay, {\n    message: t('exercises.noData', \"No exercise data available. Try different selections.\"),\n    type: \"info\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 43\n  }, this);\n  const questionParts = exerciseData.questionPrompt.split('___');\n  const questionDisplay = /*#__PURE__*/_jsxDEV(\"span\", {\n    style: {\n      lineHeight: '2'\n    },\n    children: [getLatinizedText(questionParts[0], language), questionParts.length > 1 && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: userInput,\n        onChange: handleInputChange,\n        placeholder: t('placeholders.typeHere', \"type here\"),\n        disabled: isRevealed,\n        style: {\n          margin: '0 5px',\n          padding: '5px',\n          fontSize: 'inherit',\n          width: '120px',\n          border: '1px solid #ccc',\n          borderRadius: '4px',\n          textAlign: 'center'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }, this), getLatinizedText(questionParts[1], language)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: 'center',\n      padding: '20px',\n      border: '1px solid #eee',\n      borderRadius: '8px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: t('titles.fillTheGap', 'Fill in the Gap')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        margin: '20px 0',\n        fontSize: '1.3rem',\n        flexWrap: 'wrap'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: questionDisplay\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this), exerciseData.correctSentence && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handlePronounceSentence,\n        title: t('tooltips.pronounceSentence', `Pronounce sentence`),\n        style: {\n          background: 'none',\n          border: 'none',\n          fontSize: '1.5rem',\n          cursor: 'pointer',\n          marginLeft: '10px'\n        },\n        children: \"\\uD83D\\uDD0A\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FeedbackDisplay, {\n      message: feedback.message,\n      type: feedback.type,\n      language: language\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ExerciseControls, {\n      onCheckAnswer: !isRevealed ? checkAnswer : undefined,\n      onShowHint: !isRevealed ? showHint : undefined,\n      onRevealAnswer: !isRevealed ? revealTheAnswer : undefined,\n      onNextExercise: setupNewExercise,\n      config: {\n        showCheck: !isRevealed,\n        showHint: !isRevealed,\n        showReveal: !isRevealed,\n        showNext: true\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 5\n  }, this);\n};\n_s(FillGapsExercise, \"OMp4B1k871TITWklh315wCqkMxI=\", false, function () {\n  return [useLatinizationContext, useI18n, useProgress];\n});\n_c = FillGapsExercise;\nexport default FillGapsExercise;\nvar _c;\n$RefreshReg$(_c, \"FillGapsExercise\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","loadVerbGrammarData","loadVocabularyData","processVerbData","generateGrammarExerciseSentence","setGrammarGeneratorTranslations","useLatinizationContext","useLatinization","normalizeString","FeedbackDisplay","ExerciseControls","pronounceText","useI18n","useProgress","jsxDEV","_jsxDEV","Fragment","_Fragment","FillGapsExercise","language","days","exerciseKey","_s","exerciseData","setExerciseData","userInput","setUserInput","feedback","setFeedback","message","type","isLoading","setIsLoading","error","setError","isRevealed","setIsRevealed","isLatinized","getLatinizedText","t","allTranslations","progress","setupNewExercise","data","rawVerbItems","verbError","Error","vocabItems","vocabError","console","warn","length","processedVerbItems","sentenceDetails","questionPrompt","answer","err","handleInputChange","e","target","value","checkAnswer","correctAnswer","latinizedCorrect","displayCorrect","possibleAnswers","split","map","ans","trim","itemId","correctSentence","includes","awardCorrectAnswer","awardIncorrectAnswer","showHint","answerForHint","hintLetter","letter","revealTheAnswer","scheduleReview","handlePronounceSentence","catch","children","fileName","_jsxFileName","lineNumber","columnNumber","questionParts","questionDisplay","style","lineHeight","onChange","placeholder","disabled","margin","padding","fontSize","width","border","borderRadius","textAlign","display","justifyContent","alignItems","flexWrap","onClick","title","background","cursor","marginLeft","onCheckAnswer","undefined","onShowHint","onRevealAnswer","onNextExercise","config","showCheck","showReveal","showNext","_c","$RefreshReg$"],"sources":["/workspaces/COSYlanguagesproject/src/components/Freestyle/exercises/grammar/FillGapsExercise.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { loadVerbGrammarData, loadVocabularyData } from '../../../../utils/exerciseDataService';\r\nimport { processVerbData, generateGrammarExerciseSentence, setGrammarGeneratorTranslations } from '../../../../utils/grammarSentenceGenerator'; \r\nimport { useLatinizationContext } from '../../../../contexts/LatinizationContext';\r\nimport useLatinization from '../../../../hooks/useLatinization';\r\nimport { normalizeString } from '../../../../utils/stringUtils';\r\nimport FeedbackDisplay from '../../FeedbackDisplay';\r\nimport ExerciseControls from '../../ExerciseControls';\r\nimport { pronounceText } from '../../../../utils/speechUtils';\r\nimport { useI18n } from '../../../../i18n/I18nContext';\r\nimport { useProgress } from '../../../../contexts/ProgressContext'; // Import useProgress\r\n\r\nconst FillGapsExercise = ({ language, days, exerciseKey }) => {\r\n  const [exerciseData, setExerciseData] = useState(null); \r\n  const [userInput, setUserInput] = useState('');\r\n  const [feedback, setFeedback] = useState({ message: '', type: '' });\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [isRevealed, setIsRevealed] = useState(false);\r\n\r\n  const { isLatinized } = useLatinizationContext();\r\n  const getLatinizedText = useLatinization;\r\n  const { t, allTranslations } = useI18n();\r\n  const progress = useProgress();\r\n\r\n  useEffect(() => {\r\n    if (allTranslations) {\r\n      setGrammarGeneratorTranslations(allTranslations);\r\n    }\r\n  }, [allTranslations]);\r\n\r\n  const setupNewExercise = useCallback(async () => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    setFeedback({ message: '', type: '' });\r\n    setUserInput('');\r\n    setIsRevealed(false);\r\n    setExerciseData(null);\r\n\r\n    try {\r\n      const { data: rawVerbItems, error: verbError } = await loadVerbGrammarData(language, days);\r\n      if (verbError) {\r\n        throw new Error(verbError.message || verbError.error || 'Failed to load verb grammar data.');\r\n      }\r\n\r\n      const { data: vocabItems, error: vocabError } = await loadVocabularyData(language, days);\r\n      if (vocabError) {\r\n        console.warn(\"FillGapsExercise: Failed to load vocabulary data. Sentence objects might be generic.\");\r\n      }\r\n      \r\n      if (rawVerbItems && rawVerbItems.length > 0) {\r\n        const processedVerbItems = processVerbData(rawVerbItems, language);\r\n        if (!processedVerbItems || processedVerbItems.length === 0) {\r\n            setError(t('errors.noProcessableVerbData', 'No processable verb items found.'));\r\n            setIsLoading(false);\r\n            return;\r\n        }\r\n        const sentenceDetails = await generateGrammarExerciseSentence(language, days, processedVerbItems, vocabItems || []);\r\n        \r\n        if (sentenceDetails && sentenceDetails.questionPrompt && sentenceDetails.answer) {\r\n          setExerciseData(sentenceDetails);\r\n        } else {\r\n          setError(t('errors.couldNotGenerateSentence', 'Could not generate a fill-gaps exercise sentence.'));\r\n        }\r\n      } else {\r\n        setError(t('errors.noVerbData', 'No verb grammar data found for the selected criteria.'));\r\n      }\r\n    } catch (err) {\r\n      console.error(\"FillGapsExercise - Error setting up:\", err);\r\n      setError(err.message || t('errors.unexpectedError', 'An unexpected error occurred.'));\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [language, days, t]);\r\n\r\n  useEffect(() => {\r\n    if (language && days && days.length > 0) {\r\n      setupNewExercise();\r\n    } else {\r\n      setIsLoading(false);\r\n      setError(t('errors.selectLangDay', \"Please select a language and day(s).\"));\r\n    }\r\n  }, [setupNewExercise, exerciseKey, language, days, t]);\r\n\r\n  const handleInputChange = (e) => {\r\n    setUserInput(e.target.value);\r\n    if (feedback.message) setFeedback({ message: '', type: '' });\r\n  };\r\n\r\n  const checkAnswer = () => {\r\n    if (!exerciseData || isRevealed) return;\r\n    \r\n    const correctAnswer = exerciseData.answer;\r\n    const latinizedCorrect = getLatinizedText(correctAnswer, language);\r\n    const displayCorrect = isLatinized ? latinizedCorrect : correctAnswer;\r\n    let possibleAnswers = correctAnswer.split('/').map(ans => normalizeString(ans.trim()));\r\n    const itemId = `fillgaps_${normalizeString(exerciseData.correctSentence)}_${normalizeString(correctAnswer)}`;\r\n\r\n    if (possibleAnswers.includes(normalizeString(userInput))) {\r\n      setFeedback({ message: t('feedback.correct', 'Correct!'), type: 'correct' });\r\n      progress.awardCorrectAnswer(itemId, 'grammar-fillgaps');\r\n    } else {\r\n      setFeedback({ \r\n        message: t('feedback.incorrectFillGaps', `Incorrect. The correct answer is: ${displayCorrect}. Full sentence: ${getLatinizedText(exerciseData.correctSentence, language)}`, { correctAnswer: displayCorrect, correctSentence: getLatinizedText(exerciseData.correctSentence, language) }), \r\n        type: 'incorrect' \r\n      });\r\n      progress.awardIncorrectAnswer(itemId, 'grammar-fillgaps');\r\n    }\r\n  };\r\n\r\n  const showHint = () => {\r\n    if (!exerciseData || isRevealed) return;\r\n    const answerForHint = exerciseData.answer.split('/')[0].trim();\r\n    let hintLetter = '';\r\n    if (answerForHint && answerForHint.length > 0) {\r\n      hintLetter = answerForHint[0];\r\n    }\r\n    setFeedback({ message: t('feedback.hintFillGaps', `Hint: The answer starts with '${getLatinizedText(hintLetter, language)}'.`, { letter: getLatinizedText(hintLetter, language) }), type: 'hint' });\r\n  };\r\n\r\n  const revealTheAnswer = () => {\r\n    if (!exerciseData) return;\r\n    const correctAnswer = exerciseData.answer.split('/')[0].trim();\r\n    const latinizedCorrect = getLatinizedText(correctAnswer, language);\r\n    const displayCorrect = isLatinized ? latinizedCorrect : correctAnswer;\r\n    const itemId = `fillgaps_${normalizeString(exerciseData.correctSentence)}_${normalizeString(exerciseData.answer)}`;\r\n\r\n    setUserInput(correctAnswer); \r\n    setFeedback({ \r\n      message: t('feedback.revealedFillGaps', `The correct answer is: ${displayCorrect}. Full sentence: ${getLatinizedText(exerciseData.correctSentence, language)}`, { correctAnswer: displayCorrect, correctSentence: getLatinizedText(exerciseData.correctSentence, language) }),\r\n      type: 'info' \r\n    });\r\n    setIsRevealed(true);\r\n    progress.scheduleReview(itemId, 'grammar-fillgaps', false);\r\n  };\r\n  \r\n  const handlePronounceSentence = () => {\r\n    if (exerciseData && exerciseData.correctSentence && language) {\r\n        pronounceText(exerciseData.correctSentence, language).catch(err => {\r\n            console.error(\"Pronunciation error:\", err);\r\n            setFeedback({message: t('errors.pronunciationError', \"Could not pronounce the sentence.\"), type: \"error\"});\r\n        });\r\n    }\r\n  };\r\n\r\n  if (isLoading) return <p>{t('loading.fillGapsExercise', 'Loading fill the gaps exercise...')}</p>;\r\n  if (error) return <FeedbackDisplay message={error} type=\"error\" />;\r\n  if (!exerciseData && !isLoading) return <FeedbackDisplay message={t('exercises.noData', \"No exercise data available. Try different selections.\")} type=\"info\" />;\r\n\r\n  const questionParts = exerciseData.questionPrompt.split('___');\r\n  const questionDisplay = (\r\n    <span style={{lineHeight: '2'}}> \r\n      {getLatinizedText(questionParts[0], language)}\r\n      {questionParts.length > 1 && (\r\n        <>\r\n          <input\r\n            type=\"text\"\r\n            value={userInput}\r\n            onChange={handleInputChange}\r\n            placeholder={t('placeholders.typeHere', \"type here\")}\r\n            disabled={isRevealed}\r\n            style={{ margin: '0 5px', padding: '5px', fontSize: 'inherit', width: '120px', border: '1px solid #ccc', borderRadius: '4px', textAlign: 'center' }}\r\n          />\r\n          {getLatinizedText(questionParts[1], language)}\r\n        </>\r\n      )}\r\n    </span>\r\n  );\r\n\r\n  return (\r\n    <div style={{ textAlign: 'center', padding: '20px', border: '1px solid #eee', borderRadius: '8px' }}>\r\n      <h3>{t('titles.fillTheGap', 'Fill in the Gap')}</h3>\r\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', margin: '20px 0', fontSize: '1.3rem', flexWrap: 'wrap' }}>\r\n        <div>{questionDisplay}</div>\r\n        {exerciseData.correctSentence && (\r\n            <button \r\n                onClick={handlePronounceSentence} \r\n                title={t('tooltips.pronounceSentence',`Pronounce sentence`)}\r\n                style={{background:'none', border:'none', fontSize:'1.5rem', cursor:'pointer', marginLeft:'10px'}}\r\n            >\r\n            🔊\r\n          </button>\r\n        )}\r\n      </div>\r\n      \r\n      <FeedbackDisplay message={feedback.message} type={feedback.type} language={language} />\r\n      \r\n      <ExerciseControls\r\n        onCheckAnswer={!isRevealed ? checkAnswer : undefined}\r\n        onShowHint={!isRevealed ? showHint : undefined}\r\n        onRevealAnswer={!isRevealed ? revealTheAnswer : undefined}\r\n        onNextExercise={setupNewExercise}\r\n        config={{ \r\n            showCheck: !isRevealed, \r\n            showHint: !isRevealed, \r\n            showReveal: !isRevealed,\r\n            showNext: true,\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FillGapsExercise;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}