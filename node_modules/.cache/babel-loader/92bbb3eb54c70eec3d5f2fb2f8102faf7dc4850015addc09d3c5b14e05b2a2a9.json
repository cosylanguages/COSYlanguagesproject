{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useMemo } from 'react';\nimport { useLatinizationContext } from '../contexts/LatinizationContext';\nimport { getLatinization as utilGetLatinization } from '../utils/transliteration'; // Corrected import path\n\n/**\r\n * Custom hook to get transliterated text based on LatinizationContext.\r\n * @param {string} originalText The original text to potentially transliterate.\r\n * @param {string} textLanguageIdentifier The language identifier for the text (e.g., 'ТАКОЙрусский').\r\n * @returns {string} The transliterated text if latinization is active and applicable, otherwise original text.\r\n */\nconst useLatinization = (originalText, textLanguageIdentifier) => {\n  _s();\n  const {\n    isLatinized,\n    latinizableLanguageIds\n  } = useLatinizationContext();\n  const displayText = useMemo(() => {\n    if (!isLatinized || !originalText || !textLanguageIdentifier) {\n      return originalText;\n    }\n\n    // Check if the text's language is in the list of latinizable languages from the context\n    // This logic might need to be more robust if languageIdentifier formats vary greatly.\n    // For now, it relies on the context's latinizableLanguageIds being the COSY-style IDs.\n    const isTextLanguageLatinizable = latinizableLanguageIds.includes(textLanguageIdentifier);\n\n    // The previous check was more complex:\n    // const isTextLanguageLatinizable = latinizableLanguageIds.some(id =>\n    //   textLanguageIdentifier.toLowerCase().includes(id.toLowerCase()) ||\n    //   (id === 'ΚΟΖΥελληνικά' && textLanguageIdentifier.toLowerCase().includes('greek')) ||\n    //   (id === 'ТАКОЙрусский' && textLanguageIdentifier.toLowerCase().includes('russian')) ||\n    //   (id === 'ԾՈՍՅհայկական' && textLanguageIdentifier.toLowerCase().includes('armenian'))\n    // );\n    // Reverting to simpler check based on context providing the exact IDs.\n    // If textLanguageIdentifier can be 'russian' instead of 'ТАКОЙрусский', the old logic was better.\n    // For now, assuming textLanguageIdentifier will be the COSY ID from the data.\n\n    if (isTextLanguageLatinizable) {\n      return utilGetLatinization(originalText, textLanguageIdentifier);\n    }\n    return originalText;\n  }, [originalText, textLanguageIdentifier, isLatinized, latinizableLanguageIds]);\n  return displayText;\n};\n_s(useLatinization, \"LGHb14BjBWl1ugYFVH9IT4i9iFc=\", false, function () {\n  return [useLatinizationContext];\n});\nexport default useLatinization;","map":{"version":3,"names":["useMemo","useLatinizationContext","getLatinization","utilGetLatinization","useLatinization","originalText","textLanguageIdentifier","_s","isLatinized","latinizableLanguageIds","displayText","isTextLanguageLatinizable","includes"],"sources":["/workspaces/COSYlanguagesproject/src/hooks/useLatinization.js"],"sourcesContent":["import { useMemo } from 'react';\r\nimport { useLatinizationContext } from '../contexts/LatinizationContext';\r\nimport { getLatinization as utilGetLatinization } from '../utils/transliteration'; // Corrected import path\r\n\r\n/**\r\n * Custom hook to get transliterated text based on LatinizationContext.\r\n * @param {string} originalText The original text to potentially transliterate.\r\n * @param {string} textLanguageIdentifier The language identifier for the text (e.g., 'ТАКОЙрусский').\r\n * @returns {string} The transliterated text if latinization is active and applicable, otherwise original text.\r\n */\r\nconst useLatinization = (originalText, textLanguageIdentifier) => {\r\n  const { isLatinized, latinizableLanguageIds } = useLatinizationContext();\r\n\r\n  const displayText = useMemo(() => {\r\n    if (!isLatinized || !originalText || !textLanguageIdentifier) {\r\n      return originalText;\r\n    }\r\n\r\n    // Check if the text's language is in the list of latinizable languages from the context\r\n    // This logic might need to be more robust if languageIdentifier formats vary greatly.\r\n    // For now, it relies on the context's latinizableLanguageIds being the COSY-style IDs.\r\n    const isTextLanguageLatinizable = latinizableLanguageIds.includes(textLanguageIdentifier);\r\n\r\n    // The previous check was more complex:\r\n    // const isTextLanguageLatinizable = latinizableLanguageIds.some(id =>\r\n    //   textLanguageIdentifier.toLowerCase().includes(id.toLowerCase()) ||\r\n    //   (id === 'ΚΟΖΥελληνικά' && textLanguageIdentifier.toLowerCase().includes('greek')) ||\r\n    //   (id === 'ТАКОЙрусский' && textLanguageIdentifier.toLowerCase().includes('russian')) ||\r\n    //   (id === 'ԾՈՍՅհայկական' && textLanguageIdentifier.toLowerCase().includes('armenian'))\r\n    // );\r\n    // Reverting to simpler check based on context providing the exact IDs.\r\n    // If textLanguageIdentifier can be 'russian' instead of 'ТАКОЙрусский', the old logic was better.\r\n    // For now, assuming textLanguageIdentifier will be the COSY ID from the data.\r\n\r\n    if (isTextLanguageLatinizable) {\r\n      return utilGetLatinization(originalText, textLanguageIdentifier);\r\n    }\r\n\r\n    return originalText;\r\n  }, [originalText, textLanguageIdentifier, isLatinized, latinizableLanguageIds]);\r\n\r\n  return displayText;\r\n};\r\n\r\nexport default useLatinization;\r\n"],"mappings":";AAAA,SAASA,OAAO,QAAQ,OAAO;AAC/B,SAASC,sBAAsB,QAAQ,iCAAiC;AACxE,SAASC,eAAe,IAAIC,mBAAmB,QAAQ,0BAA0B,CAAC,CAAC;;AAEnF;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,eAAe,GAAGA,CAACC,YAAY,EAAEC,sBAAsB,KAAK;EAAAC,EAAA;EAChE,MAAM;IAAEC,WAAW;IAAEC;EAAuB,CAAC,GAAGR,sBAAsB,CAAC,CAAC;EAExE,MAAMS,WAAW,GAAGV,OAAO,CAAC,MAAM;IAChC,IAAI,CAACQ,WAAW,IAAI,CAACH,YAAY,IAAI,CAACC,sBAAsB,EAAE;MAC5D,OAAOD,YAAY;IACrB;;IAEA;IACA;IACA;IACA,MAAMM,yBAAyB,GAAGF,sBAAsB,CAACG,QAAQ,CAACN,sBAAsB,CAAC;;IAEzF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA,IAAIK,yBAAyB,EAAE;MAC7B,OAAOR,mBAAmB,CAACE,YAAY,EAAEC,sBAAsB,CAAC;IAClE;IAEA,OAAOD,YAAY;EACrB,CAAC,EAAE,CAACA,YAAY,EAAEC,sBAAsB,EAAEE,WAAW,EAAEC,sBAAsB,CAAC,CAAC;EAE/E,OAAOC,WAAW;AACpB,CAAC;AAACH,EAAA,CAhCIH,eAAe;EAAA,QAC6BH,sBAAsB;AAAA;AAiCxE,eAAeG,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}