{"ast":null,"code":"/**\r\n * Normalizes a string by converting to lowercase, removing diacritics,\r\n * and standardizing apostrophes.\r\n * @param {string} str - The string to normalize.\r\n * @returns {string} The normalized string.\r\n */export function normalizeString(str){if(str===null||str===undefined){return'';}// Normalize to NFD (Normalization Form Canonical Decomposition) to separate base characters from diacritics\n// Then remove diacritics (Unicode range U+0300 to U+036F)\nlet normalized=String(str).normalize('NFD').replace(/[\\u0300-\\u036f]/g,'').toLowerCase();// Standardize various apostrophe-like characters to a single apostrophe\nnormalized=normalized.replace(/[’‘ʼ]/g,\"'\");return normalized;}/**\r\n * Capitalizes the first letter of a word. Can optionally lowercase the rest of the word.\r\n * Handles specific cases like \"i\" in English.\r\n * @param {string} word - The word to capitalize.\r\n * @param {boolean} [forceLowerCaseRest=true] - Whether to convert the rest of the word to lowercase.\r\n * @param {string} [lang='COSYenglish'] - The language context, used for special casing (e.g., \"i\" in English).\r\n * @returns {string} The capitalized word.\r\n */export function capitalizeWord(word){let forceLowerCaseRest=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;let lang=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'COSYenglish';if(typeof word!=='string'||word.length===0){return word;}// Handle \"I\" specifically for English.\nif(lang==='COSYenglish'&&word.toLowerCase()==='i'){return'I';}const firstLetter=word.charAt(0).toUpperCase();const rest=forceLowerCaseRest?word.slice(1).toLowerCase():word.slice(1);return firstLetter+rest;}/**\r\n * Escapes special characters in a string for use in a regular expression.\r\n * @param {string} string - The string to escape.\r\n * @returns {string} The string with regex special characters escaped.\r\n */export function escapeRegExp(string){if(typeof string!=='string')return'';return string.replace(/[.*+?^${}()|[\\]\\\\]/g,'\\\\$&');// $& means the whole matched string\n}","map":{"version":3,"names":["normalizeString","str","undefined","normalized","String","normalize","replace","toLowerCase","capitalizeWord","word","forceLowerCaseRest","arguments","length","lang","firstLetter","charAt","toUpperCase","rest","slice","escapeRegExp","string"],"sources":["/workspaces/COSYlanguagesproject/src/utils/stringUtils.js"],"sourcesContent":["/**\r\n * Normalizes a string by converting to lowercase, removing diacritics,\r\n * and standardizing apostrophes.\r\n * @param {string} str - The string to normalize.\r\n * @returns {string} The normalized string.\r\n */\r\nexport function normalizeString(str) {\r\n  if (str === null || str === undefined) {\r\n    return '';\r\n  }\r\n  // Normalize to NFD (Normalization Form Canonical Decomposition) to separate base characters from diacritics\r\n  // Then remove diacritics (Unicode range U+0300 to U+036F)\r\n  let normalized = String(str).normalize('NFD').replace(/[\\u0300-\\u036f]/g, '').toLowerCase();\r\n  // Standardize various apostrophe-like characters to a single apostrophe\r\n  normalized = normalized.replace(/[’‘ʼ]/g, \"'\");\r\n  return normalized;\r\n}\r\n\r\n/**\r\n * Capitalizes the first letter of a word. Can optionally lowercase the rest of the word.\r\n * Handles specific cases like \"i\" in English.\r\n * @param {string} word - The word to capitalize.\r\n * @param {boolean} [forceLowerCaseRest=true] - Whether to convert the rest of the word to lowercase.\r\n * @param {string} [lang='COSYenglish'] - The language context, used for special casing (e.g., \"i\" in English).\r\n * @returns {string} The capitalized word.\r\n */\r\nexport function capitalizeWord(word, forceLowerCaseRest = true, lang = 'COSYenglish') {\r\n  if (typeof word !== 'string' || word.length === 0) {\r\n    return word;\r\n  }\r\n  // Handle \"I\" specifically for English.\r\n  if (lang === 'COSYenglish' && word.toLowerCase() === 'i') {\r\n    return 'I';\r\n  }\r\n  const firstLetter = word.charAt(0).toUpperCase();\r\n  const rest = forceLowerCaseRest ? word.slice(1).toLowerCase() : word.slice(1);\r\n  return firstLetter + rest;\r\n}\r\n\r\n/**\r\n * Escapes special characters in a string for use in a regular expression.\r\n * @param {string} string - The string to escape.\r\n * @returns {string} The string with regex special characters escaped.\r\n */\r\nexport function escapeRegExp(string) {\r\n  if (typeof string !== 'string') return '';\r\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAA,eAAeA,CAACC,GAAG,CAAE,CACnC,GAAIA,GAAG,GAAK,IAAI,EAAIA,GAAG,GAAKC,SAAS,CAAE,CACrC,MAAO,EAAE,CACX,CACA;AACA;AACA,GAAI,CAAAC,UAAU,CAAGC,MAAM,CAACH,GAAG,CAAC,CAACI,SAAS,CAAC,KAAK,CAAC,CAACC,OAAO,CAAC,kBAAkB,CAAE,EAAE,CAAC,CAACC,WAAW,CAAC,CAAC,CAC3F;AACAJ,UAAU,CAAGA,UAAU,CAACG,OAAO,CAAC,QAAQ,CAAE,GAAG,CAAC,CAC9C,MAAO,CAAAH,UAAU,CACnB,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAK,cAAcA,CAACC,IAAI,CAAmD,IAAjD,CAAAC,kBAAkB,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAT,SAAA,CAAAS,SAAA,IAAG,IAAI,IAAE,CAAAE,IAAI,CAAAF,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAT,SAAA,CAAAS,SAAA,IAAG,aAAa,CAClF,GAAI,MAAO,CAAAF,IAAI,GAAK,QAAQ,EAAIA,IAAI,CAACG,MAAM,GAAK,CAAC,CAAE,CACjD,MAAO,CAAAH,IAAI,CACb,CACA;AACA,GAAII,IAAI,GAAK,aAAa,EAAIJ,IAAI,CAACF,WAAW,CAAC,CAAC,GAAK,GAAG,CAAE,CACxD,MAAO,GAAG,CACZ,CACA,KAAM,CAAAO,WAAW,CAAGL,IAAI,CAACM,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAChD,KAAM,CAAAC,IAAI,CAAGP,kBAAkB,CAAGD,IAAI,CAACS,KAAK,CAAC,CAAC,CAAC,CAACX,WAAW,CAAC,CAAC,CAAGE,IAAI,CAACS,KAAK,CAAC,CAAC,CAAC,CAC7E,MAAO,CAAAJ,WAAW,CAAGG,IAAI,CAC3B,CAEA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAE,YAAYA,CAACC,MAAM,CAAE,CACnC,GAAI,MAAO,CAAAA,MAAM,GAAK,QAAQ,CAAE,MAAO,EAAE,CACzC,MAAO,CAAAA,MAAM,CAACd,OAAO,CAAC,qBAAqB,CAAE,MAAM,CAAC,CAAE;AACxD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}