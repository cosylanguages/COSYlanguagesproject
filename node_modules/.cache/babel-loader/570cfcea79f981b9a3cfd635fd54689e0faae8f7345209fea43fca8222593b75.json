{"ast":null,"code":"var _jsxFileName = \"/workspaces/COSYlanguagesproject/src/components/Freestyle/exercises/vocabulary/TranscribeWordExercise.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { loadVocabularyData } from '../../../../utils/exerciseDataService';\nimport { pronounceText } from '../../../../utils/speechUtils';\nimport FeedbackDisplay from '../../FeedbackDisplay';\nimport ExerciseControls from '../../ExerciseControls';\nimport { useLatinizationContext } from '../../../../contexts/LatinizationContext';\nimport useLatinization from '../../../../hooks/useLatinization';\nimport { normalizeString as normalizeStringUtil } from '../../../../utils/stringUtils';\nimport { useProgress } from '../../../../contexts/ProgressContext';\nimport { useI18n } from '../../../../i18n/I18nContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TranscribeWordExercise = ({\n  language,\n  days,\n  exerciseKey\n}) => {\n  _s();\n  const [correctWord, setCorrectWord] = useState('');\n  const [userInput, setUserInput] = useState('');\n  const [feedback, setFeedback] = useState({\n    message: '',\n    type: ''\n  });\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [isRevealed, setIsRevealed] = useState(false);\n  const [isAnsweredCorrectly, setIsAnsweredCorrectly] = useState(false);\n  const {\n    isLatinized\n  } = useLatinizationContext();\n  const getLatinizedText = useLatinization;\n  const progress = useProgress();\n  const {\n    t\n  } = useI18n();\n  const fetchAndSetNewWord = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    setFeedback({\n      message: '',\n      type: ''\n    });\n    setUserInput('');\n    setIsRevealed(false);\n    setCorrectWord('');\n    setIsAnsweredCorrectly(false);\n    try {\n      const {\n        data: words,\n        error: fetchError\n      } = await loadVocabularyData(language, days);\n      if (fetchError) {\n        throw new Error(fetchError.message || fetchError.error || 'Failed to load vocabulary words.');\n      }\n      if (words && words.length > 0) {\n        const randomIndex = Math.floor(Math.random() * words.length);\n        const wordToTranscribe = words[randomIndex];\n        setCorrectWord(wordToTranscribe);\n        if (wordToTranscribe && language) {\n          pronounceText(wordToTranscribe, language).catch(err => {\n            console.error(\"Autoplay pronunciation error:\", err);\n          });\n        }\n      } else {\n        setError(t('exercises.noWordsFound', 'No vocabulary words found for the selected criteria.'));\n      }\n    } catch (err) {\n      console.error(\"TranscribeWordExercise - Error fetching word:\", err);\n      setError(err.message || t('errors.unexpectedError', 'An unexpected error occurred.'));\n    } finally {\n      setIsLoading(false);\n    }\n  }, [language, days, t]);\n  useEffect(() => {\n    if (language && days && days.length > 0) {\n      fetchAndSetNewWord();\n    } else {\n      setIsLoading(false);\n      setError(t('errors.selectLangDay', \"Please select a language and day(s).\"));\n      setCorrectWord('');\n    }\n  }, [fetchAndSetNewWord, exerciseKey, language, days, t]);\n  const handlePlaySound = () => {\n    if (correctWord && language) {\n      pronounceText(correctWord, language).catch(err => {\n        console.error(\"Pronunciation error on button click:\", err);\n        setFeedback({\n          message: t('errors.soundPlayError', 'Could not play sound.'),\n          type: 'error'\n        });\n      });\n    }\n  };\n  const handleInputChange = e => {\n    setUserInput(e.target.value);\n    if (feedback.message) setFeedback({\n      message: '',\n      type: ''\n    });\n  };\n  const checkAnswer = () => {\n    if (!correctWord || isRevealed || isAnsweredCorrectly) return;\n    const latinizedCorrectDisplay = getLatinizedText(correctWord, language);\n    const displayAnswer = isLatinized ? latinizedCorrectDisplay : correctWord;\n    const itemId = `transcribe_${normalizeStringUtil(correctWord)}`;\n    const isCorrect = normalizeStringUtil(userInput) === normalizeStringUtil(correctWord);\n    if (isCorrect) {\n      setFeedback({\n        message: t('feedback.correct', 'Correct!'),\n        type: 'correct'\n      });\n      progress.awardCorrectAnswer(itemId, 'vocab-transcribe', language);\n      setIsAnsweredCorrectly(true);\n      setTimeout(() => {\n        fetchAndSetNewWord();\n      }, 1500); // 1.5-second delay\n    } else {\n      setFeedback({\n        message: t('feedback.incorrectAnswerIs', `Incorrect. The correct answer is: ${displayAnswer}`, {\n          correctAnswer: displayAnswer\n        }),\n        type: 'incorrect'\n      });\n      progress.awardIncorrectAnswer(itemId, 'vocab-transcribe', language);\n    }\n  };\n  const showHint = () => {\n    if (!correctWord || isRevealed || isAnsweredCorrectly) return;\n    const firstLetter = getLatinizedText(correctWord[0], language);\n    setFeedback({\n      message: t('feedback.hintWordStructure', `Hint: The word has ${correctWord.length} letters and starts with '${firstLetter}'.`, {\n        length: correctWord.length,\n        letter: firstLetter\n      }),\n      type: 'hint'\n    });\n  };\n  const revealTheAnswer = () => {\n    if (!correctWord || isAnsweredCorrectly) return; // Allow reveal even if already revealed, but prevent re-progression if already correct\n    const latinizedCorrectDisplay = getLatinizedText(correctWord, language);\n    const displayAnswer = isLatinized ? latinizedCorrectDisplay : correctWord;\n    const itemId = `transcribe_${normalizeStringUtil(correctWord)}`;\n    setUserInput(correctWord);\n    setFeedback({\n      message: t('feedback.correctAnswerIs', `The correct answer is: ${displayAnswer}`, {\n        correctAnswer: displayAnswer\n      }),\n      type: 'info'\n    });\n    setIsRevealed(true);\n    progress.scheduleReview(itemId, 'vocab-transcribe', language, false); // Ensure language is passed\n\n    if (!isAnsweredCorrectly) {\n      // Only auto-progress if not already answered correctly\n      setTimeout(() => {\n        fetchAndSetNewWord();\n      }, 2000); // Slightly longer delay for revealed answers\n    }\n  };\n  const handleNext = () => {\n    fetchAndSetNewWord();\n  };\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: t('loading.transcribeExercise', 'Loading transcription exercise...')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(FeedbackDisplay, {\n      message: error,\n      type: \"error\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 12\n    }, this);\n  }\n  if (!correctWord && !isLoading) {\n    return /*#__PURE__*/_jsxDEV(FeedbackDisplay, {\n      message: t('exercises.noWordForTranscription', \"No word available for transcription. Try different selections.\"),\n      type: \"info\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: 'center',\n      padding: '20px',\n      border: '1px solid #eee',\n      borderRadius: '8px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: t('titles.typeWhatYouHear', 'Type What You Hear')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handlePlaySound,\n      disabled: !correctWord || isLoading,\n      style: {\n        fontSize: '2rem',\n        margin: '20px',\n        background: 'none',\n        border: 'none',\n        cursor: 'pointer'\n      },\n      \"aria-label\": t('aria.playSound', \"Play sound\"),\n      children: \"\\uD83D\\uDD0A\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: userInput,\n      onChange: handleInputChange,\n      placeholder: t('placeholders.typeHere', \"Type here...\"),\n      disabled: isRevealed || isAnsweredCorrectly || isLoading,\n      style: {\n        padding: '10px',\n        fontSize: '1rem',\n        width: '250px',\n        marginBottom: '10px',\n        border: '1px solid #ccc',\n        borderRadius: '4px'\n      },\n      onKeyPress: event => {\n        if (event.key === 'Enter' && !isRevealed && !isAnsweredCorrectly) {\n          checkAnswer();\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FeedbackDisplay, {\n      message: feedback.message,\n      type: feedback.type,\n      language: language\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ExerciseControls, {\n      onCheckAnswer: !isRevealed && !isAnsweredCorrectly && !!correctWord ? checkAnswer : undefined,\n      onShowHint: !isRevealed && !isAnsweredCorrectly && !!correctWord ? showHint : undefined,\n      onRevealAnswer: !isRevealed && !isAnsweredCorrectly && !!correctWord ? revealTheAnswer : undefined,\n      onNextExercise: handleNext,\n      config: {\n        showCheck: !isRevealed && !isAnsweredCorrectly && !!correctWord,\n        showHint: !isRevealed && !isAnsweredCorrectly && !!correctWord,\n        showReveal: !isRevealed && !isAnsweredCorrectly && !!correctWord,\n        showNext: true\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, this);\n};\n_s(TranscribeWordExercise, \"Aeq0u66DWkqt3JNQ3p22wM+kjsE=\", false, function () {\n  return [useLatinizationContext, useProgress, useI18n];\n});\n_c = TranscribeWordExercise;\nexport default TranscribeWordExercise;\nvar _c;\n$RefreshReg$(_c, \"TranscribeWordExercise\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","loadVocabularyData","pronounceText","FeedbackDisplay","ExerciseControls","useLatinizationContext","useLatinization","normalizeString","normalizeStringUtil","useProgress","useI18n","jsxDEV","_jsxDEV","TranscribeWordExercise","language","days","exerciseKey","_s","correctWord","setCorrectWord","userInput","setUserInput","feedback","setFeedback","message","type","isLoading","setIsLoading","error","setError","isRevealed","setIsRevealed","isAnsweredCorrectly","setIsAnsweredCorrectly","isLatinized","getLatinizedText","progress","t","fetchAndSetNewWord","data","words","fetchError","Error","length","randomIndex","Math","floor","random","wordToTranscribe","catch","err","console","handlePlaySound","handleInputChange","e","target","value","checkAnswer","latinizedCorrectDisplay","displayAnswer","itemId","isCorrect","awardCorrectAnswer","setTimeout","correctAnswer","awardIncorrectAnswer","showHint","firstLetter","letter","revealTheAnswer","scheduleReview","handleNext","children","fileName","_jsxFileName","lineNumber","columnNumber","style","textAlign","padding","border","borderRadius","onClick","disabled","fontSize","margin","background","cursor","onChange","placeholder","width","marginBottom","onKeyPress","event","key","onCheckAnswer","undefined","onShowHint","onRevealAnswer","onNextExercise","config","showCheck","showReveal","showNext","_c","$RefreshReg$"],"sources":["/workspaces/COSYlanguagesproject/src/components/Freestyle/exercises/vocabulary/TranscribeWordExercise.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { loadVocabularyData } from '../../../../utils/exerciseDataService';\r\nimport { pronounceText } from '../../../../utils/speechUtils';\r\nimport FeedbackDisplay from '../../FeedbackDisplay';\r\nimport ExerciseControls from '../../ExerciseControls';\r\nimport { useLatinizationContext } from '../../../../contexts/LatinizationContext';\r\nimport useLatinization from '../../../../hooks/useLatinization';\r\nimport { normalizeString as normalizeStringUtil } from '../../../../utils/stringUtils';\r\nimport { useProgress } from '../../../../contexts/ProgressContext';\r\nimport { useI18n } from '../../../../i18n/I18nContext';\r\n\r\nconst TranscribeWordExercise = ({ language, days, exerciseKey }) => {\r\n  const [correctWord, setCorrectWord] = useState('');\r\n  const [userInput, setUserInput] = useState('');\r\n  const [feedback, setFeedback] = useState({ message: '', type: '' });\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [isRevealed, setIsRevealed] = useState(false);\r\n  const [isAnsweredCorrectly, setIsAnsweredCorrectly] = useState(false);\r\n\r\n  const { isLatinized } = useLatinizationContext();\r\n  const getLatinizedText = useLatinization;\r\n  const progress = useProgress();\r\n  const { t } = useI18n();\r\n\r\n  const fetchAndSetNewWord = useCallback(async () => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    setFeedback({ message: '', type: '' });\r\n    setUserInput('');\r\n    setIsRevealed(false);\r\n    setCorrectWord('');\r\n    setIsAnsweredCorrectly(false);\r\n    try {\r\n      const { data: words, error: fetchError } = await loadVocabularyData(language, days);\r\n      if (fetchError) {\r\n        throw new Error(fetchError.message || fetchError.error || 'Failed to load vocabulary words.');\r\n      }\r\n      if (words && words.length > 0) {\r\n        const randomIndex = Math.floor(Math.random() * words.length);\r\n        const wordToTranscribe = words[randomIndex];\r\n        setCorrectWord(wordToTranscribe);\r\n        \r\n        if (wordToTranscribe && language) {\r\n            pronounceText(wordToTranscribe, language).catch(err => {\r\n                console.error(\"Autoplay pronunciation error:\", err);\r\n            });\r\n        }\r\n      } else {\r\n        setError(t('exercises.noWordsFound', 'No vocabulary words found for the selected criteria.'));\r\n      }\r\n    } catch (err) {\r\n      console.error(\"TranscribeWordExercise - Error fetching word:\", err);\r\n      setError(err.message || t('errors.unexpectedError', 'An unexpected error occurred.'));\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [language, days, t]);\r\n\r\n  useEffect(() => {\r\n    if (language && days && days.length > 0) {\r\n      fetchAndSetNewWord();\r\n    } else {\r\n      setIsLoading(false);\r\n      setError(t('errors.selectLangDay', \"Please select a language and day(s).\"));\r\n      setCorrectWord('');\r\n    }\r\n  }, [fetchAndSetNewWord, exerciseKey, language, days, t]);\r\n\r\n  const handlePlaySound = () => {\r\n    if (correctWord && language) {\r\n      pronounceText(correctWord, language).catch(err => {\r\n        console.error(\"Pronunciation error on button click:\", err);\r\n        setFeedback({ message: t('errors.soundPlayError', 'Could not play sound.'), type: 'error'});\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    setUserInput(e.target.value);\r\n    if (feedback.message) setFeedback({ message: '', type: '' });\r\n  };\r\n\r\n  const checkAnswer = () => {\r\n    if (!correctWord || isRevealed || isAnsweredCorrectly) return;\r\n    \r\n    const latinizedCorrectDisplay = getLatinizedText(correctWord, language);\r\n    const displayAnswer = isLatinized ? latinizedCorrectDisplay : correctWord;\r\n    const itemId = `transcribe_${normalizeStringUtil(correctWord)}`;\r\n    const isCorrect = normalizeStringUtil(userInput) === normalizeStringUtil(correctWord);\r\n\r\n    if (isCorrect) {\r\n      setFeedback({ message: t('feedback.correct', 'Correct!'), type: 'correct' });\r\n      progress.awardCorrectAnswer(itemId, 'vocab-transcribe', language);\r\n      setIsAnsweredCorrectly(true);\r\n      setTimeout(() => {\r\n        fetchAndSetNewWord();\r\n      }, 1500); // 1.5-second delay\r\n    } else {\r\n      setFeedback({ message: t('feedback.incorrectAnswerIs', `Incorrect. The correct answer is: ${displayAnswer}`, { correctAnswer: displayAnswer }), type: 'incorrect' });\r\n      progress.awardIncorrectAnswer(itemId, 'vocab-transcribe', language);\r\n    }\r\n  };\r\n\r\n  const showHint = () => {\r\n    if (!correctWord || isRevealed || isAnsweredCorrectly) return;\r\n    const firstLetter = getLatinizedText(correctWord[0], language);\r\n    setFeedback({ message: t('feedback.hintWordStructure', `Hint: The word has ${correctWord.length} letters and starts with '${firstLetter}'.`, { length: correctWord.length, letter: firstLetter }), type: 'hint' });\r\n  };\r\n\r\n  const revealTheAnswer = () => {\r\n    if (!correctWord || isAnsweredCorrectly) return; // Allow reveal even if already revealed, but prevent re-progression if already correct\r\n    const latinizedCorrectDisplay = getLatinizedText(correctWord, language);\r\n    const displayAnswer = isLatinized ? latinizedCorrectDisplay : correctWord;\r\n    const itemId = `transcribe_${normalizeStringUtil(correctWord)}`;\r\n    \r\n    setUserInput(correctWord); \r\n    setFeedback({ message: t('feedback.correctAnswerIs', `The correct answer is: ${displayAnswer}`, { correctAnswer: displayAnswer }), type: 'info' });\r\n    setIsRevealed(true);\r\n    progress.scheduleReview(itemId, 'vocab-transcribe', language, false); // Ensure language is passed\r\n\r\n    if (!isAnsweredCorrectly) { // Only auto-progress if not already answered correctly\r\n        setTimeout(() => {\r\n            fetchAndSetNewWord();\r\n        }, 2000); // Slightly longer delay for revealed answers\r\n    }\r\n  };\r\n\r\n  const handleNext = () => {\r\n    fetchAndSetNewWord();\r\n  };\r\n\r\n  if (isLoading) {\r\n    return <p>{t('loading.transcribeExercise', 'Loading transcription exercise...')}</p>;\r\n  }\r\n\r\n  if (error) {\r\n    return <FeedbackDisplay message={error} type=\"error\" />;\r\n  }\r\n\r\n  if (!correctWord && !isLoading) { \r\n    return <FeedbackDisplay message={t('exercises.noWordForTranscription', \"No word available for transcription. Try different selections.\")} type=\"info\" />;\r\n  }\r\n  \r\n  return (\r\n    <div style={{ textAlign: 'center', padding: '20px', border: '1px solid #eee', borderRadius: '8px' }}>\r\n      <h3>{t('titles.typeWhatYouHear', 'Type What You Hear')}</h3>\r\n      <button onClick={handlePlaySound} disabled={!correctWord || isLoading} style={{ fontSize: '2rem', margin: '20px', background: 'none', border: 'none', cursor: 'pointer' }} aria-label={t('aria.playSound', \"Play sound\")}>\r\n        🔊\r\n      </button>\r\n      <input\r\n        type=\"text\"\r\n        value={userInput}\r\n        onChange={handleInputChange}\r\n        placeholder={t('placeholders.typeHere', \"Type here...\")}\r\n        disabled={isRevealed || isAnsweredCorrectly || isLoading}\r\n        style={{ padding: '10px', fontSize: '1rem', width: '250px', marginBottom: '10px', border: '1px solid #ccc', borderRadius: '4px' }}\r\n        onKeyPress={(event) => {\r\n            if (event.key === 'Enter' && !isRevealed && !isAnsweredCorrectly) {\r\n              checkAnswer();\r\n            }\r\n        }}\r\n      />\r\n      <FeedbackDisplay message={feedback.message} type={feedback.type} language={language} />\r\n      <ExerciseControls\r\n        onCheckAnswer={!isRevealed && !isAnsweredCorrectly && !!correctWord ? checkAnswer : undefined}\r\n        onShowHint={!isRevealed && !isAnsweredCorrectly && !!correctWord ? showHint : undefined}\r\n        onRevealAnswer={!isRevealed && !isAnsweredCorrectly && !!correctWord ? revealTheAnswer : undefined}\r\n        onNextExercise={handleNext}\r\n        config={{ \r\n            showCheck: !isRevealed && !isAnsweredCorrectly && !!correctWord, \r\n            showHint: !isRevealed && !isAnsweredCorrectly && !!correctWord, \r\n            showReveal: !isRevealed && !isAnsweredCorrectly && !!correctWord,\r\n            showNext: true, \r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TranscribeWordExercise;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}