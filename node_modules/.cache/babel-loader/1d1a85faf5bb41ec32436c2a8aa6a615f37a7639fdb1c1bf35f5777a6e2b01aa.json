{"ast":null,"code":"import _objectSpread from\"/workspaces/COSYlanguagesproject/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{shuffleArray}from'./arrayUtils';import{capitalizeWord,escapeRegExp}from'./stringUtils';import{loadVocabularyData}from'./exerciseDataService';// For fetching vocabulary for objects\n// This will hold translations, to be populated ideally by I18nContext or similar\n// For now, using a simple placeholder. In a real app, this should be managed by an i18n solution.\nlet currentTranslations={COSYenglish:{defaultAdjective:\"happy\",defaultNounWithArticle:\"a cat\",defaultNoun:\"cat\",defaultAdverb:\"well\",infinitiveMarker:\"to \",verbToBe:\"to be\",verbToHave:\"to have\",negationParticle:\"not\",pronoun_they:\"they\",pronoun_he:\"he\",pronoun_she:\"she\",pronoun_it:\"it\",conjunction_and:\"and\",commonNames:[\"Alex\",\"Maria\",\"Sam\",\"Lee\",\"Jordan\",\"Taylor\",\"Chris\",\"Pat\"],genericObjectFallback:\"something\",pluralPronounsList:['we','they','you'],// Simplified for example\nsentenceEndingAdjective:\"happy.\",sentenceEndingAdverb:\"well.\",errorFallbackWord:\"error\"}};// Function to update translations if needed (e.g., from context)\nexport function setGrammarGeneratorTranslations(translations){currentTranslations=translations;}const COMMON_NAMES_EN=[\"Alex\",\"Maria\",\"Sam\",\"Lee\",\"Jordan\",\"Taylor\",\"Chris\",\"Pat\"];function getRandomElement(arr){if(!arr||arr.length===0)return null;return arr[Math.floor(Math.random()*arr.length)];}// Adapted from old grammar.js - specific to English for now\nfunction addIndefiniteArticle(nounStr,language){const t=currentTranslations[language]||currentTranslations.COSYenglish||{};if(language!=='COSYenglish'||typeof nounStr!=='string'||nounStr.trim()===''){return nounStr;}const trimmedNoun=nounStr.trim();const articleRegex=/^(a|an|the)\\s/i;if(articleRegex.test(trimmedNoun)){return nounStr;}const lowerNoun=trimmedNoun.toLowerCase();const pronounsAndSomeNames=['i','you','he','she','it','we','they',...(t.commonNames||COMMON_NAMES_EN).map(n=>n.toLowerCase())];if(pronounsAndSomeNames.includes(lowerNoun)){return nounStr;}if(trimmedNoun.endsWith('s')&&!trimmedNoun.endsWith('ss')){const knownSingularSEndings=['bus','gas','lens','plus','status','species','series','news'];if(!knownSingularSEndings.includes(lowerNoun)){return nounStr;}}const firstLetter=trimmedNoun.charAt(0).toLowerCase();const vowels=['a','e','i','o','u'];const exceptionsAn=['hour','honest','honor','heir'];const exceptionsA=['user','university','uniform','european','one','unit'];if(exceptionsAn.some(ex=>lowerNoun.startsWith(ex)))return\"an \".concat(trimmedNoun);if(exceptionsA.some(ex=>lowerNoun.startsWith(ex)))return\"a \".concat(trimmedNoun);if(vowels.includes(firstLetter)){return\"an \".concat(trimmedNoun);}else{return\"a \".concat(trimmedNoun);}}async function selectSubject(language,verbData,vocabularyList){let allowCompound=arguments.length>3&&arguments[3]!==undefined?arguments[3]:true;const t=currentTranslations[language]||currentTranslations.COSYenglish||{};const typeRoll=Math.random();let subject={text:\"it\",type:\"pronoun\",isPlural:false,representativePronoun:\"it\"};const availablePronouns=[...new Set(verbData.map(vd=>vd.pronoun).filter(p=>p&&!p.includes('/')))];const simpleNouns=vocabularyList.filter(v=>typeof v==='string'&&v.length>1&&v.split(' ').length===1);const knownVerbForms=new Set(verbData.map(vd=>vd.form.toLowerCase()));const potentialNouns=simpleNouns.filter(n=>!knownVerbForms.has(n.toLowerCase()));let namesForLang=t.commonNames&&t.commonNames.length>0?t.commonNames:language==='COSYenglish'?COMMON_NAMES_EN:[];if(typeRoll<0.4&&availablePronouns.length>0){const chosenPronoun=getRandomElement(availablePronouns);subject.text=chosenPronoun;subject.type=\"pronoun\";const pluralPronouns=t.pluralPronounsList||['we','they','you','nous','vous','ils','elles','wir','ihr','sie','voi','loro','nosotros','vosotros','ellos','ellas','ustedes','nós','vós','eles','elas','мы','вы','они','me','te','he'];const singularPronouns=['i','he','she','it','je','tu','il','elle','on','ich','du','er','es','io','lui','lei','yo','tú','él','ella','usted','eu','ele','ela','você','я','ты','он','она','оно','minä','sinä','hän'];if(pluralPronouns.includes(chosenPronoun===null||chosenPronoun===void 0?void 0:chosenPronoun.toLowerCase()))subject.isPlural=true;if(singularPronouns.includes(chosenPronoun===null||chosenPronoun===void 0?void 0:chosenPronoun.toLowerCase()))subject.isPlural=false;subject.representativePronoun=chosenPronoun.toLowerCase();}else if(typeRoll<0.8&&(potentialNouns.length>0||namesForLang.length>0)){const nounSourceRoll=Math.random();let chosenNoun;if(nounSourceRoll<0.7&&potentialNouns.length>0){chosenNoun=getRandomElement(potentialNouns);}else if(namesForLang.length>0){chosenNoun=getRandomElement(namesForLang);}else{chosenNoun=getRandomElement(potentialNouns);}subject.text=namesForLang.includes(chosenNoun)?chosenNoun:chosenNoun.toLowerCase();subject.type=\"noun\";subject.isPlural=false;if(subject.text.endsWith('s')&&!subject.text.endsWith('ss')&&!namesForLang.includes(subject.text)){const knownSingularSEndings=['bus','gas','lens','plus','status','species','series','news','always','this','is','has','does','goes'];if(!knownSingularSEndings.includes(subject.text.toLowerCase())){subject.isPlural=true;}}subject.representativePronoun=subject.isPlural?t.pronoun_they||\"they\":namesForLang.includes(subject.text)?Math.random()<0.5?t.pronoun_he||\"he\":t.pronoun_she||\"she\":t.pronoun_it||\"it\";}else if(allowCompound&&potentialNouns.length>=2&&typeRoll<0.95){let noun1Raw=getRandomElement(potentialNouns);let noun2Raw=getRandomElement(potentialNouns.filter(n=>n!==noun1Raw));if(!noun2Raw)noun2Raw=getRandomElement(namesForLang.filter(n=>n!==noun1Raw))||(potentialNouns.length>0?potentialNouns[0]:t.noun_friends||\"friends\");const noun1=namesForLang.includes(noun1Raw)?noun1Raw:noun1Raw.toLowerCase();const noun2=namesForLang.includes(noun2Raw)?noun2Raw:noun2Raw.toLowerCase();subject.text=\"\".concat(noun1,\" \").concat(t.conjunction_and||'and',\" \").concat(noun2);subject.type=\"noun_compound_and\";subject.isPlural=true;subject.representativePronoun=t.pronoun_they||\"they\";}else{const chosenPronoun=getRandomElement(availablePronouns)||t.pronoun_they||(language==='COSYenglish'?\"they\":\"ils\");subject.text=chosenPronoun;subject.type=\"pronoun\";const pluralPronouns=t.pluralPronounsList||['we','they','you'];subject.isPlural=pluralPronouns.includes(chosenPronoun.toLowerCase());subject.representativePronoun=chosenPronoun.toLowerCase();}if(subject.type===\"noun\"){subject.representativePronoun=subject.isPlural?t.pronoun_they||\"they\":namesForLang.includes(subject.text)?Math.random()<0.5?t.pronoun_he||\"he\":t.pronoun_she||\"she\":t.pronoun_it||\"it\";}return subject;}async function selectObject(language,vocabularyList){let subjectText=arguments.length>2&&arguments[2]!==undefined?arguments[2]:\"\";const t=currentTranslations[language]||currentTranslations.COSYenglish||{};const potentialObjects=vocabularyList.filter(v=>typeof v==='string'&&v.length>1&&v.toLowerCase()!==subjectText.toLowerCase());if(potentialObjects.length===0){return t.genericObjectFallback||\"something\";}const chosenObject=getRandomElement(potentialObjects);const namesForLang=t.commonNames&&t.commonNames.length>0?t.commonNames:language==='COSYenglish'?COMMON_NAMES_EN:[];return namesForLang.includes(chosenObject)?chosenObject:chosenObject.toLowerCase();}/**\r\n * Processes raw verb data items to derive necessary fields like pronoun, form, verb,\r\n * full_sentence, and sentence_template. This mirrors the processing logic from the\r\n * old `loadVerbGrammar` function in `grammar.js`.\r\n * @param {Array<Object>} rawVerbItems - Array of verb items as loaded from JSON.\r\n * @param {string} language - The current COSYlanguage code.\r\n * @returns {Array<Object>} Processed verb items.\r\n */export function processVerbData(rawVerbItems,language){const t=currentTranslations[language]||currentTranslations.COSYenglish||{};let processedVerbData=[];let seenItems=new Set();rawVerbItems.forEach(rawItem=>{let item=_objectSpread({},rawItem);let sPrompt=rawItem.prompt;if(Array.isArray(sPrompt))sPrompt=sPrompt.join('/');sPrompt=sPrompt===null||sPrompt===undefined?\"\":String(sPrompt);let sAnswer=rawItem.answer;if(Array.isArray(sAnswer))sAnswer=sAnswer.join('/');sAnswer=sAnswer===null||sAnswer===undefined?\"\":String(sAnswer);item.promptType='pronoun_verb_expects_form';// Default\nif(sPrompt&&sAnswer){const commonPronouns=['i','you','he','she','it','we','they','je','tu','il','elle','on','nous','vous','ils','elles','ich','du','er','sie','es','wir','ihr','io','tu','lui','lei','noi','voi','loro','yo','tú','él','ella','usted','nosotros','nosotras','vosotros','vosotras','ellos','ellas','ustedes','eu','tu','ele','ela','você','nós','vós','eles','elas','vocês','я','ты','он','она','оно','мы','вы','они','minä','sinä','hän'];let langSpecificLength=3;// Default pronoun max length for check\nif(language==='COSYfrançais'||language==='COSYitaliano')langSpecificLength=2;const isPromptPronounLike=commonPronouns.includes(sPrompt.toLowerCase())||sPrompt.length<=langSpecificLength;if(isPromptPronounLike){item.pronoun=sPrompt;item.form=sAnswer;// This is the conjugated verb form\nitem.promptType='pronoun_expects_form';}else{const isAnswerPronounLike=commonPronouns.includes(sAnswer.toLowerCase())||sAnswer.length<=langSpecificLength||sAnswer.includes('/');if(isAnswerPronounLike){item.form=sPrompt;// This is the conjugated verb form\nitem.pronoun=sAnswer;item.promptType='form_expects_pronoun';}else{// Default assumption if neither looks like a pronoun\nitem.pronoun=sPrompt;// Assume prompt is pronoun-like\nitem.form=sAnswer;// Assume answer is verb form\n}}}else{// If prompt or answer is missing, try to assign directly\nitem.pronoun=sPrompt;item.form=sAnswer;}if(!item.verb){// Infer verb if not present\nlet baseWordForVerbInference=item.form;// Usually the conjugated form helps infer infinitive\nif(baseWordForVerbInference){const toBeForms=['am','is','are','was','were','est','sont','être','es','son','ser','είμαι','είσαι','είναι','быть','был','была','было','были'];const toHaveForms=['have','has','had','a','ont','avoir','tiene','tienen','tener','tem','têm','ter','έχω','έχει','иметь','имел','имела'];const infinitiveMarker=t.infinitiveMarker||(language==='COSYenglish'?'to ':'');const verbToBe=t.verbToBe||'to be';const verbToHave=t.verbToHave||'to have';if(toBeForms.includes(baseWordForVerbInference.toLowerCase()))item.verb=verbToBe;else if(toHaveForms.includes(baseWordForVerbInference.toLowerCase()))item.verb=verbToHave;else{// Basic inference for other verbs (language-specific rules would be better)\nlet potentialInfinitive=baseWordForVerbInference.toLowerCase();if(language==='COSYenglish'){if(potentialInfinitive.endsWith('s')&&!['is','was','has','does','goes'].includes(potentialInfinitive)&&!potentialInfinitive.endsWith('ss')){potentialInfinitive=potentialInfinitive.slice(0,-1);}else if(potentialInfinitive.endsWith('ed')){potentialInfinitive=potentialInfinitive.slice(0,-2);}else if(potentialInfinitive.endsWith('ing')){potentialInfinitive=potentialInfinitive.slice(0,-3);}}item.verb=\"\".concat(infinitiveMarker).concat(potentialInfinitive);}}}// Ensure crucial fields are present\nif(!item.pronoun||!item.verb||!item.form){// console.warn(\"Skipping verb item due to missing core fields:\", rawItem);\nreturn;// Skips this iteration of forEach\n}if(!item.full_sentence){let objectPart=t.defaultAdjective||\"happy\";if(item.verb&&item.verb.toLowerCase()===(t.verbToHave||'to have').toLowerCase())objectPart=t.defaultNounWithArticle||(language==='COSYenglish'?\"a cat\":t.defaultNoun||\"cat\");else if(item.verb&&item.verb.toLowerCase()!==(t.verbToBe||'to be').toLowerCase())objectPart=t.defaultAdverb||\"well\";item.full_sentence=\"\".concat(item.pronoun,\" \").concat(item.form,\" \").concat(objectPart,\".\");}if(!item.sentence_template){const formEscaped=escapeRegExp(item.form);const formRegex=new RegExp(\"\\\\b\".concat(formEscaped,\"\\\\b\"),'i');item.sentence_template=item.full_sentence.replace(formRegex,\"___\");if(!item.sentence_template.includes(\"___\")){// Fallback if regex replace failed\nlet parts=item.full_sentence.split(' ');let formIndex=parts.findIndex(p=>p.toLowerCase()===item.form.toLowerCase());if(formIndex!==-1){parts[formIndex]=\"___\";item.sentence_template=parts.join(' ');}else{// More robust fallback: place blank after pronoun if form not found\nitem.sentence_template=\"\".concat(item.pronoun,\" ___ .\");}}}// Use a consistent key for uniqueness check\nconst stringifiedItemKey=JSON.stringify({pronoun:item.pronoun,verb:item.verb,form:item.form,promptType:item.promptType});if(!seenItems.has(stringifiedItemKey)){seenItems.add(stringifiedItemKey);processedVerbData.push(item);}});return processedVerbData;}export async function generateGrammarExerciseSentence(language,days,allProcessedVerbData,dailyVocab){const t=currentTranslations[language]||currentTranslations.COSYenglish||{};if(!allProcessedVerbData||allProcessedVerbData.length===0){console.error(\"generateGrammarExerciseSentence: No processed verb data provided for language \"+language);return null;}let currentDailyVocab=dailyVocab;if(!currentDailyVocab||currentDailyVocab.length===0){// console.warn(`generateGrammarExerciseSentence: No daily vocabulary for ${language}. Fetching fallback.`);\n// In a real scenario, TypeVerbExercise would fetch this. For the util, we assume it's passed or use very basic fallbacks.\nconst{data:vocabWords}=await loadVocabularyData(language,days);// Fetch if not provided\ncurrentDailyVocab=vocabWords.length>0?vocabWords:[t.genericNoun1||\"book\",t.genericNoun2||\"pen\",t.genericAdjective1||\"interesting\"];}const sentencePatterns=[{type:\"SVO\",structure:[\"S\",\"V\",\"O\"],needsAux:false,isQuestion:false},{type:\"SVNegO\",structure:[\"S\",\"V(neg)\",\"O\"],needsAux:true,isQuestion:false},{type:\"Q_AuxSVO\",structure:[\"Aux\",\"S\",\"V_base\",\"O?\"],needsAux:true,isQuestion:true},{type:\"Q_BeSVO\",structure:[\"V_be\",\"S\",\"O?\"],needsAux:false,isQuestion:true}];let selectedPattern=getRandomElement(sentencePatterns);if(!selectedPattern)return null;const subjectDetails=await selectSubject(language,allProcessedVerbData,currentDailyVocab);let objectText=await selectObject(language,currentDailyVocab,subjectDetails.text);let verbInfo=null;let attempts=0;const maxAttempts=30;while(attempts<maxAttempts&&!verbInfo){const randomVerbEntry=getRandomElement(allProcessedVerbData);if(!randomVerbEntry||!randomVerbEntry.verb||!randomVerbEntry.pronoun||!randomVerbEntry.form){attempts++;continue;}const verbPronouns=randomVerbEntry.pronoun.toLowerCase().split('/');const representativePronoun=subjectDetails.representativePronoun.toLowerCase();if(verbPronouns.includes(representativePronoun)){let suitableForPattern=true;if(selectedPattern.type===\"Q_BeSVO\"&&randomVerbEntry.verb.toLowerCase()!==(t.verbToBe||'to be').toLowerCase()){suitableForPattern=false;}else if(selectedPattern.type===\"Q_AuxSVO\"&&randomVerbEntry.verb.toLowerCase()===(t.verbToBe||'to be').toLowerCase()){suitableForPattern=false;}if(suitableForPattern){verbInfo={base:randomVerbEntry.verb,conjugated:randomVerbEntry.form,isBeOrHave:randomVerbEntry.verb.toLowerCase()===(t.verbToBe||'to be').toLowerCase()||randomVerbEntry.verb.toLowerCase()===(t.verbToHave||'to have').toLowerCase(),fullItem:randomVerbEntry};break;}}attempts++;}if(!verbInfo){// Fallback: pick any verb and adjust subject\nconst anyVerbFromPool=getRandomElement(allProcessedVerbData);if(anyVerbFromPool){verbInfo={base:anyVerbFromPool.verb,conjugated:anyVerbFromPool.form,isBeOrHave:anyVerbFromPool.verb.toLowerCase()===(t.verbToBe||'to be').toLowerCase()||anyVerbFromPool.verb.toLowerCase()===(t.verbToHave||'to have').toLowerCase(),fullItem:anyVerbFromPool};subjectDetails.text=anyVerbFromPool.pronoun.split('/')[0];subjectDetails.representativePronoun=subjectDetails.text.toLowerCase();const pluralPronouns=t.pluralPronounsList||['we','they','you'];subjectDetails.isPlural=pluralPronouns.includes(subjectDetails.representativePronoun);}else{console.error(\"generateGrammarExerciseSentence: Could not find any verb even after fallback.\");return null;}}let sentenceComponents=[];let S_final=subjectDetails.text;let O_final=objectText;if(selectedPattern.type===\"Q_BeSVO\"&&language==='COSYenglish'){const namesForLangLower=(t.commonNames||COMMON_NAMES_EN).map(n=>n.toLowerCase());if(subjectDetails.type===\"noun\"&&!namesForLangLower.includes(S_final.toLowerCase())){S_final=addIndefiniteArticle(S_final,language);}const isObjectLikelySimpleNounForArticle=(currentDailyVocab.map(w=>w.toLowerCase()).includes(objectText.toLowerCase())||(t.exampleNounsForArticle||[\"book\",\"cat\",\"pen\",\"apple\"]).includes(objectText.toLowerCase()))&&objectText.split(' ').length===1&&!namesForLangLower.includes(objectText.toLowerCase());if(isObjectLikelySimpleNounForArticle){O_final=addIndefiniteArticle(objectText,language);}}const V_conj=verbInfo.conjugated;const V_base_inf=verbInfo.base.startsWith(t.infinitiveMarker||(language==='COSYenglish'?'to ':''))?verbInfo.base.substring((t.infinitiveMarker||(language==='COSYenglish'?'to ':'')).length):verbInfo.base;let aux=\"\";if(language==='COSYenglish'){// Language-specific auxiliary logic\nif(selectedPattern.type===\"SVNegO\"){if(!verbInfo.isBeOrHave){// \"do not\" / \"does not\"\naux=subjectDetails.isPlural||['i','you'].includes(subjectDetails.representativePronoun.toLowerCase())?\"do\":\"does\";}// For \"be/have\", negation is direct: \"is not\", \"has not\"\n}else if(selectedPattern.type===\"Q_AuxSVO\"){aux=subjectDetails.isPlural||['i','you'].includes(subjectDetails.representativePronoun.toLowerCase())?\"Do\":\"Does\";}}// Simplified sentence construction based on pattern\n// This part needs careful porting of the logic from grammar.js's generateSentenceForExercise\nswitch(selectedPattern.type){case\"SVO\":sentenceComponents=[S_final,V_conj,O_final];break;case\"SVNegO\":if(language==='COSYenglish'&&aux){// e.g. \"They do not like cats\"\nsentenceComponents=[S_final,aux,t.negationParticle||\"not\",V_base_inf,O_final];}else if(verbInfo.isBeOrHave){// e.g. \"He is not happy\"\nsentenceComponents=[S_final,V_conj,t.negationParticle||\"not\",O_final];}else{// Non-english or verbs that don't use \"do\" aux for negation\nsentenceComponents=[S_final,V_conj,t.negationParticle||\"not\",O_final];// Fallback or other languages\n}break;case\"Q_AuxSVO\":// e.g. \"Do they like cats?\"\nif(language==='COSYenglish'&&aux){sentenceComponents=[aux,S_final,V_base_inf,O_final];}else{// Fallback for non-english or if aux logic is different\nsentenceComponents=[V_conj,S_final,O_final];}break;case\"Q_BeSVO\":// e.g. \"Is he happy?\"\nsentenceComponents=[V_conj,S_final,O_final];break;default:return null;}let finalCasedComponents=sentenceComponents.filter(c=>c).map((word,index)=>{// filter out null/empty aux\nif(typeof word!=='string')return word;const namesForLang=t.commonNames&&t.commonNames.length>0?t.commonNames:language==='COSYenglish'?COMMON_NAMES_EN:[];if(namesForLang.includes(word))return word;if(language==='COSYenglish'&&word.toLowerCase()==='i')return'I';return index===0?capitalizeWord(word,true,language):word;});const finalPunctuation=selectedPattern.isQuestion?\"?\":\".\";let correctSentence=finalCasedComponents.join(\" \")+finalPunctuation;// Determine what to blank out\nlet wordToBlankOriginal='';let indexOfBlankInCased=-1;const blankTypeRoll=Math.random();if(blankTypeRoll<0.5&&V_conj){// Blank the main verb (conjugated or base)\nwordToBlankOriginal=selectedPattern.type===\"SVNegO\"&&language==='COSYenglish'&&aux||selectedPattern.type===\"Q_AuxSVO\"&&language==='COSYenglish'&&aux?V_base_inf:V_conj;}else if(blankTypeRoll<0.75&&subjectDetails.type!==\"pronoun\"&&S_final){// Blank subject if not pronoun\nwordToBlankOriginal=S_final;}else if(O_final){// Blank object\nwordToBlankOriginal=O_final;}else if(V_conj){// Fallback to verb if object was blanked but missing\nwordToBlankOriginal=selectedPattern.type===\"SVNegO\"&&language==='COSYenglish'&&aux||selectedPattern.type===\"Q_AuxSVO\"&&language==='COSYenglish'&&aux?V_base_inf:V_conj;}else{// Ultimate fallback\nwordToBlankOriginal=finalCasedComponents.length>1?finalCasedComponents[1]:finalCasedComponents[0];}// Find the cased version of the word to blank\nlet tempSentenceForTemplate=[...finalCasedComponents];const casedWordToBlank=finalCasedComponents.find(w=>w.toLowerCase()===wordToBlankOriginal.toLowerCase());if(casedWordToBlank){indexOfBlankInCased=finalCasedComponents.indexOf(casedWordToBlank);tempSentenceForTemplate[indexOfBlankInCased]=\"___\";}else if(finalCasedComponents.length>0){// Fallback if exact cased match not found\nindexOfBlankInCased=finalCasedComponents.length>1?1:0;wordToBlankOriginal=finalCasedComponents[indexOfBlankInCased];// update original to what's actually blanked\ntempSentenceForTemplate[indexOfBlankInCased]=\"___\";}else{return{questionPrompt:\"___\"+finalPunctuation,answer:t.errorFallbackWord||\"error\",correctSentence:t.errorFallbackWord+finalPunctuation};}let sentenceTemplate=tempSentenceForTemplate.join(\" \")+finalPunctuation;return{questionPrompt:sentenceTemplate.trim(),answer:wordToBlankOriginal.trim(),// This should be the non-cased, original form intended for the blank\ncorrectSentence:correctSentence.trim()// For debugging or more complex hints:\n// rawSubject: subjectDetails,\n// rawVerb: verbInfo,\n// rawObject: objectText,\n// sentenceComponents: finalCasedComponents,\n};}","map":{"version":3,"names":["shuffleArray","capitalizeWord","escapeRegExp","loadVocabularyData","currentTranslations","COSYenglish","defaultAdjective","defaultNounWithArticle","defaultNoun","defaultAdverb","infinitiveMarker","verbToBe","verbToHave","negationParticle","pronoun_they","pronoun_he","pronoun_she","pronoun_it","conjunction_and","commonNames","genericObjectFallback","pluralPronounsList","sentenceEndingAdjective","sentenceEndingAdverb","errorFallbackWord","setGrammarGeneratorTranslations","translations","COMMON_NAMES_EN","getRandomElement","arr","length","Math","floor","random","addIndefiniteArticle","nounStr","language","t","trim","trimmedNoun","articleRegex","test","lowerNoun","toLowerCase","pronounsAndSomeNames","map","n","includes","endsWith","knownSingularSEndings","firstLetter","charAt","vowels","exceptionsAn","exceptionsA","some","ex","startsWith","concat","selectSubject","verbData","vocabularyList","allowCompound","arguments","undefined","typeRoll","subject","text","type","isPlural","representativePronoun","availablePronouns","Set","vd","pronoun","filter","p","simpleNouns","v","split","knownVerbForms","form","potentialNouns","has","namesForLang","chosenPronoun","pluralPronouns","singularPronouns","nounSourceRoll","chosenNoun","noun1Raw","noun2Raw","noun_friends","noun1","noun2","selectObject","subjectText","potentialObjects","chosenObject","processVerbData","rawVerbItems","processedVerbData","seenItems","forEach","rawItem","item","_objectSpread","sPrompt","prompt","Array","isArray","join","String","sAnswer","answer","promptType","commonPronouns","langSpecificLength","isPromptPronounLike","isAnswerPronounLike","verb","baseWordForVerbInference","toBeForms","toHaveForms","potentialInfinitive","slice","full_sentence","objectPart","sentence_template","formEscaped","formRegex","RegExp","replace","parts","formIndex","findIndex","stringifiedItemKey","JSON","stringify","add","push","generateGrammarExerciseSentence","days","allProcessedVerbData","dailyVocab","console","error","currentDailyVocab","data","vocabWords","genericNoun1","genericNoun2","genericAdjective1","sentencePatterns","structure","needsAux","isQuestion","selectedPattern","subjectDetails","objectText","verbInfo","attempts","maxAttempts","randomVerbEntry","verbPronouns","suitableForPattern","base","conjugated","isBeOrHave","fullItem","anyVerbFromPool","sentenceComponents","S_final","O_final","namesForLangLower","isObjectLikelySimpleNounForArticle","w","exampleNounsForArticle","V_conj","V_base_inf","substring","aux","finalCasedComponents","c","word","index","finalPunctuation","correctSentence","wordToBlankOriginal","indexOfBlankInCased","blankTypeRoll","tempSentenceForTemplate","casedWordToBlank","find","indexOf","questionPrompt","sentenceTemplate"],"sources":["/workspaces/COSYlanguagesproject/src/utils/grammarSentenceGenerator.js"],"sourcesContent":["import { shuffleArray } from './arrayUtils';\r\nimport { capitalizeWord, escapeRegExp } from './stringUtils';\r\nimport { loadVocabularyData } from './exerciseDataService'; // For fetching vocabulary for objects\r\n\r\n// This will hold translations, to be populated ideally by I18nContext or similar\r\n// For now, using a simple placeholder. In a real app, this should be managed by an i18n solution.\r\nlet currentTranslations = {\r\n    COSYenglish: {\r\n        defaultAdjective: \"happy\",\r\n        defaultNounWithArticle: \"a cat\",\r\n        defaultNoun: \"cat\",\r\n        defaultAdverb: \"well\",\r\n        infinitiveMarker: \"to \",\r\n        verbToBe: \"to be\",\r\n        verbToHave: \"to have\",\r\n        negationParticle: \"not\",\r\n        pronoun_they: \"they\",\r\n        pronoun_he: \"he\",\r\n        pronoun_she: \"she\",\r\n        pronoun_it: \"it\",\r\n        conjunction_and: \"and\",\r\n        commonNames: [\"Alex\", \"Maria\", \"Sam\", \"Lee\", \"Jordan\", \"Taylor\", \"Chris\", \"Pat\"],\r\n        genericObjectFallback: \"something\",\r\n        pluralPronounsList: ['we', 'they', 'you'], // Simplified for example\r\n        sentenceEndingAdjective: \"happy.\",\r\n        sentenceEndingAdverb: \"well.\",\r\n        errorFallbackWord: \"error\",\r\n    }\r\n};\r\n\r\n// Function to update translations if needed (e.g., from context)\r\nexport function setGrammarGeneratorTranslations(translations) {\r\n    currentTranslations = translations;\r\n}\r\n\r\nconst COMMON_NAMES_EN = [\"Alex\", \"Maria\", \"Sam\", \"Lee\", \"Jordan\", \"Taylor\", \"Chris\", \"Pat\"];\r\n\r\nfunction getRandomElement(arr) {\r\n    if (!arr || arr.length === 0) return null;\r\n    return arr[Math.floor(Math.random() * arr.length)];\r\n}\r\n\r\n// Adapted from old grammar.js - specific to English for now\r\nfunction addIndefiniteArticle(nounStr, language) {\r\n    const t = currentTranslations[language] || currentTranslations.COSYenglish || {};\r\n    if (language !== 'COSYenglish' || typeof nounStr !== 'string' || nounStr.trim() === '') {\r\n        return nounStr;\r\n    }\r\n    const trimmedNoun = nounStr.trim();\r\n    const articleRegex = /^(a|an|the)\\s/i;\r\n    if (articleRegex.test(trimmedNoun)) { return nounStr; }\r\n    const lowerNoun = trimmedNoun.toLowerCase();\r\n    const pronounsAndSomeNames = ['i', 'you', 'he', 'she', 'it', 'we', 'they', ...(t.commonNames || COMMON_NAMES_EN).map(n => n.toLowerCase())];\r\n    if (pronounsAndSomeNames.includes(lowerNoun)) { return nounStr; }\r\n    if (trimmedNoun.endsWith('s') && !trimmedNoun.endsWith('ss')) {\r\n        const knownSingularSEndings = ['bus', 'gas', 'lens', 'plus', 'status', 'species', 'series', 'news'];\r\n        if (!knownSingularSEndings.includes(lowerNoun)) { return nounStr; }\r\n    }\r\n    const firstLetter = trimmedNoun.charAt(0).toLowerCase();\r\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\r\n    const exceptionsAn = ['hour', 'honest', 'honor', 'heir'];\r\n    const exceptionsA = ['user', 'university', 'uniform', 'european', 'one', 'unit'];\r\n    if (exceptionsAn.some(ex => lowerNoun.startsWith(ex))) return `an ${trimmedNoun}`;\r\n    if (exceptionsA.some(ex => lowerNoun.startsWith(ex))) return `a ${trimmedNoun}`;\r\n    if (vowels.includes(firstLetter)) { return `an ${trimmedNoun}`; }\r\n    else { return `a ${trimmedNoun}`; }\r\n}\r\n\r\nasync function selectSubject(language, verbData, vocabularyList, allowCompound = true) {\r\n    const t = currentTranslations[language] || currentTranslations.COSYenglish || {};\r\n    const typeRoll = Math.random();\r\n    let subject = { text: \"it\", type: \"pronoun\", isPlural: false, representativePronoun: \"it\" };\r\n\r\n    const availablePronouns = [...new Set(verbData.map(vd => vd.pronoun).filter(p => p && !p.includes('/')))];\r\n    const simpleNouns = vocabularyList.filter(v => typeof v === 'string' && v.length > 1 && v.split(' ').length === 1);\r\n    const knownVerbForms = new Set(verbData.map(vd => vd.form.toLowerCase()));\r\n    const potentialNouns = simpleNouns.filter(n => !knownVerbForms.has(n.toLowerCase()));\r\n    let namesForLang = (t.commonNames && t.commonNames.length > 0) ? t.commonNames : (language === 'COSYenglish' ? COMMON_NAMES_EN : []);\r\n\r\n    if (typeRoll < 0.4 && availablePronouns.length > 0) {\r\n        const chosenPronoun = getRandomElement(availablePronouns);\r\n        subject.text = chosenPronoun;\r\n        subject.type = \"pronoun\";\r\n        const pluralPronouns = t.pluralPronounsList || ['we', 'they', 'you', 'nous', 'vous', 'ils', 'elles', 'wir', 'ihr', 'sie', 'voi', 'loro', 'nosotros', 'vosotros', 'ellos', 'ellas', 'ustedes', 'nós', 'vós', 'eles', 'elas', 'мы', 'вы', 'они', 'me', 'te', 'he'];\r\n        const singularPronouns = ['i', 'he', 'she', 'it', 'je', 'tu', 'il', 'elle', 'on', 'ich', 'du', 'er', 'es', 'io', 'lui', 'lei', 'yo', 'tú', 'él', 'ella', 'usted', 'eu', 'ele', 'ela', 'você', 'я', 'ты', 'он', 'она', 'оно', 'minä', 'sinä', 'hän'];\r\n        if (pluralPronouns.includes(chosenPronoun?.toLowerCase())) subject.isPlural = true;\r\n        if (singularPronouns.includes(chosenPronoun?.toLowerCase())) subject.isPlural = false;\r\n        subject.representativePronoun = chosenPronoun.toLowerCase();\r\n    } else if (typeRoll < 0.8 && (potentialNouns.length > 0 || namesForLang.length > 0)) {\r\n        const nounSourceRoll = Math.random();\r\n        let chosenNoun;\r\n        if (nounSourceRoll < 0.7 && potentialNouns.length > 0) {\r\n            chosenNoun = getRandomElement(potentialNouns);\r\n        } else if (namesForLang.length > 0) {\r\n            chosenNoun = getRandomElement(namesForLang);\r\n        } else {\r\n            chosenNoun = getRandomElement(potentialNouns);\r\n        }\r\n        subject.text = namesForLang.includes(chosenNoun) ? chosenNoun : chosenNoun.toLowerCase();\r\n        subject.type = \"noun\";\r\n        subject.isPlural = false;\r\n        if (subject.text.endsWith('s') && !subject.text.endsWith('ss') && !namesForLang.includes(subject.text)) {\r\n            const knownSingularSEndings = ['bus', 'gas', 'lens', 'plus', 'status', 'species', 'series', 'news', 'always', 'this', 'is', 'has', 'does', 'goes'];\r\n            if (!knownSingularSEndings.includes(subject.text.toLowerCase())) {\r\n                subject.isPlural = true;\r\n            }\r\n        }\r\n        subject.representativePronoun = subject.isPlural ? (t.pronoun_they || \"they\") : (namesForLang.includes(subject.text) ? (Math.random() < 0.5 ? (t.pronoun_he || \"he\") : (t.pronoun_she || \"she\")) : (t.pronoun_it || \"it\"));\r\n    } else if (allowCompound && potentialNouns.length >= 2 && typeRoll < 0.95) {\r\n        let noun1Raw = getRandomElement(potentialNouns);\r\n        let noun2Raw = getRandomElement(potentialNouns.filter(n => n !== noun1Raw));\r\n        if (!noun2Raw) noun2Raw = getRandomElement(namesForLang.filter(n => n !== noun1Raw)) || (potentialNouns.length > 0 ? potentialNouns[0] : (t.noun_friends || \"friends\"));\r\n        const noun1 = namesForLang.includes(noun1Raw) ? noun1Raw : noun1Raw.toLowerCase();\r\n        const noun2 = namesForLang.includes(noun2Raw) ? noun2Raw : noun2Raw.toLowerCase();\r\n        subject.text = `${noun1} ${t.conjunction_and || 'and'} ${noun2}`;\r\n        subject.type = \"noun_compound_and\";\r\n        subject.isPlural = true;\r\n        subject.representativePronoun = (t.pronoun_they || \"they\");\r\n    } else {\r\n        const chosenPronoun = getRandomElement(availablePronouns) || (t.pronoun_they || (language === 'COSYenglish' ? \"they\" : \"ils\"));\r\n        subject.text = chosenPronoun;\r\n        subject.type = \"pronoun\";\r\n        const pluralPronouns = t.pluralPronounsList || ['we', 'they', 'you'];\r\n        subject.isPlural = pluralPronouns.includes(chosenPronoun.toLowerCase());\r\n        subject.representativePronoun = chosenPronoun.toLowerCase();\r\n    }\r\n    if (subject.type === \"noun\") {\r\n         subject.representativePronoun = subject.isPlural ? (t.pronoun_they || \"they\") : (namesForLang.includes(subject.text) ? (Math.random() < 0.5 ? (t.pronoun_he || \"he\") : (t.pronoun_she || \"she\")) : (t.pronoun_it || \"it\"));\r\n    }\r\n    return subject;\r\n}\r\n\r\nasync function selectObject(language, vocabularyList, subjectText = \"\") {\r\n    const t = currentTranslations[language] || currentTranslations.COSYenglish || {};\r\n    const potentialObjects = vocabularyList.filter(v => typeof v === 'string' && v.length > 1 && v.toLowerCase() !== subjectText.toLowerCase());\r\n    if (potentialObjects.length === 0) {\r\n        return t.genericObjectFallback || \"something\";\r\n    }\r\n    const chosenObject = getRandomElement(potentialObjects);\r\n    const namesForLang = (t.commonNames && t.commonNames.length > 0) ? t.commonNames : (language === 'COSYenglish' ? COMMON_NAMES_EN : []);\r\n    return namesForLang.includes(chosenObject) ? chosenObject : chosenObject.toLowerCase();\r\n}\r\n\r\n\r\n/**\r\n * Processes raw verb data items to derive necessary fields like pronoun, form, verb,\r\n * full_sentence, and sentence_template. This mirrors the processing logic from the\r\n * old `loadVerbGrammar` function in `grammar.js`.\r\n * @param {Array<Object>} rawVerbItems - Array of verb items as loaded from JSON.\r\n * @param {string} language - The current COSYlanguage code.\r\n * @returns {Array<Object>} Processed verb items.\r\n */\r\nexport function processVerbData(rawVerbItems, language) {\r\n    const t = currentTranslations[language] || currentTranslations.COSYenglish || {};\r\n    let processedVerbData = [];\r\n    let seenItems = new Set();\r\n\r\n    rawVerbItems.forEach(rawItem => {\r\n        let item = { ...rawItem };\r\n        let sPrompt = rawItem.prompt;\r\n        if (Array.isArray(sPrompt)) sPrompt = sPrompt.join('/');\r\n        sPrompt = (sPrompt === null || sPrompt === undefined) ? \"\" : String(sPrompt);\r\n\r\n        let sAnswer = rawItem.answer;\r\n        if (Array.isArray(sAnswer)) sAnswer = sAnswer.join('/');\r\n        sAnswer = (sAnswer === null || sAnswer === undefined) ? \"\" : String(sAnswer);\r\n        \r\n        item.promptType = 'pronoun_verb_expects_form'; // Default\r\n\r\n        if (sPrompt && sAnswer) {\r\n            const commonPronouns = ['i', 'you', 'he', 'she', 'it', 'we', 'they', 'je', 'tu', 'il', 'elle', 'on', 'nous', 'vous', 'ils', 'elles', 'ich', 'du', 'er', 'sie', 'es', 'wir', 'ihr', 'io', 'tu', 'lui', 'lei', 'noi', 'voi', 'loro', 'yo', 'tú', 'él', 'ella', 'usted', 'nosotros', 'nosotras', 'vosotros', 'vosotras', 'ellos', 'ellas', 'ustedes', 'eu', 'tu', 'ele', 'ela', 'você', 'nós', 'vós', 'eles', 'elas', 'vocês', 'я', 'ты', 'он', 'она', 'оно', 'мы', 'вы', 'они', 'minä', 'sinä', 'hän'];\r\n            let langSpecificLength = 3; // Default pronoun max length for check\r\n            if (language === 'COSYfrançais' || language === 'COSYitaliano') langSpecificLength = 2;\r\n            \r\n            const isPromptPronounLike = commonPronouns.includes(sPrompt.toLowerCase()) || sPrompt.length <= langSpecificLength;\r\n\r\n            if (isPromptPronounLike) {\r\n                item.pronoun = sPrompt;\r\n                item.form = sAnswer; // This is the conjugated verb form\r\n                item.promptType = 'pronoun_expects_form';\r\n            } else {\r\n                const isAnswerPronounLike = commonPronouns.includes(sAnswer.toLowerCase()) || sAnswer.length <= langSpecificLength || sAnswer.includes('/');\r\n                if (isAnswerPronounLike) {\r\n                    item.form = sPrompt; // This is the conjugated verb form\r\n                    item.pronoun = sAnswer;\r\n                    item.promptType = 'form_expects_pronoun';\r\n                } else { \r\n                    // Default assumption if neither looks like a pronoun\r\n                    item.pronoun = sPrompt; // Assume prompt is pronoun-like\r\n                    item.form = sAnswer;   // Assume answer is verb form\r\n                }\r\n            }\r\n        } else { // If prompt or answer is missing, try to assign directly\r\n            item.pronoun = sPrompt;\r\n            item.form = sAnswer;\r\n        }\r\n\r\n        if (!item.verb) { // Infer verb if not present\r\n            let baseWordForVerbInference = item.form; // Usually the conjugated form helps infer infinitive\r\n            if (baseWordForVerbInference) {\r\n                const toBeForms = ['am', 'is', 'are', 'was', 'were', 'est', 'sont', 'être', 'es', 'son', 'ser', 'είμαι', 'είσαι', 'είναι', 'быть', 'был', 'была', 'было', 'были'];\r\n                const toHaveForms = ['have', 'has', 'had', 'a', 'ont', 'avoir', 'tiene', 'tienen', 'tener', 'tem', 'têm', 'ter', 'έχω', 'έχει', 'иметь', 'имел', 'имела'];\r\n                const infinitiveMarker = t.infinitiveMarker || (language === 'COSYenglish' ? 'to ' : '');\r\n                const verbToBe = t.verbToBe || 'to be';\r\n                const verbToHave = t.verbToHave || 'to have';\r\n\r\n                if (toBeForms.includes(baseWordForVerbInference.toLowerCase())) item.verb = verbToBe;\r\n                else if (toHaveForms.includes(baseWordForVerbInference.toLowerCase())) item.verb = verbToHave;\r\n                else { // Basic inference for other verbs (language-specific rules would be better)\r\n                    let potentialInfinitive = baseWordForVerbInference.toLowerCase();\r\n                    if (language === 'COSYenglish') {\r\n                        if (potentialInfinitive.endsWith('s') && !['is', 'was', 'has', 'does', 'goes'].includes(potentialInfinitive) && !potentialInfinitive.endsWith('ss')) {\r\n                           potentialInfinitive = potentialInfinitive.slice(0, -1);\r\n                        } else if (potentialInfinitive.endsWith('ed')) {\r\n                           potentialInfinitive = potentialInfinitive.slice(0, -2);\r\n                        } else if (potentialInfinitive.endsWith('ing')) {\r\n                           potentialInfinitive = potentialInfinitive.slice(0, -3);\r\n                        }\r\n                    }\r\n                    item.verb = `${infinitiveMarker}${potentialInfinitive}`;\r\n                }\r\n            }\r\n        }\r\n        \r\n        // Ensure crucial fields are present\r\n        if (!item.pronoun || !item.verb || !item.form) {\r\n            // console.warn(\"Skipping verb item due to missing core fields:\", rawItem);\r\n            return; // Skips this iteration of forEach\r\n        }\r\n        \r\n        if (!item.full_sentence) {\r\n            let objectPart = t.defaultAdjective || \"happy\";\r\n            if (item.verb && (item.verb.toLowerCase() === (t.verbToHave || 'to have').toLowerCase())) objectPart = t.defaultNounWithArticle || (language === 'COSYenglish' ? \"a cat\" : (t.defaultNoun || \"cat\"));\r\n            else if (item.verb && (item.verb.toLowerCase() !== (t.verbToBe || 'to be').toLowerCase())) objectPart = t.defaultAdverb || \"well\";\r\n            item.full_sentence = `${item.pronoun} ${item.form} ${objectPart}.`;\r\n        }\r\n\r\n        if (!item.sentence_template) {\r\n             const formEscaped = escapeRegExp(item.form);\r\n             const formRegex = new RegExp(`\\\\b${formEscaped}\\\\b`, 'i');\r\n             item.sentence_template = item.full_sentence.replace(formRegex, \"___\");\r\n             if (!item.sentence_template.includes(\"___\")) { // Fallback if regex replace failed\r\n                let parts = item.full_sentence.split(' ');\r\n                let formIndex = parts.findIndex(p => p.toLowerCase() === item.form.toLowerCase());\r\n                if (formIndex !== -1) {\r\n                    parts[formIndex] = \"___\";\r\n                    item.sentence_template = parts.join(' ');\r\n                } else { \r\n                    // More robust fallback: place blank after pronoun if form not found\r\n                    item.sentence_template = `${item.pronoun} ___ .`; \r\n                }\r\n             }\r\n        }\r\n        // Use a consistent key for uniqueness check\r\n        const stringifiedItemKey = JSON.stringify({pronoun: item.pronoun, verb: item.verb, form: item.form, promptType: item.promptType});\r\n        if (!seenItems.has(stringifiedItemKey)) {\r\n            seenItems.add(stringifiedItemKey);\r\n            processedVerbData.push(item); \r\n        }\r\n    });\r\n    return processedVerbData;\r\n}\r\n\r\n\r\nexport async function generateGrammarExerciseSentence(language, days, allProcessedVerbData, dailyVocab) {\r\n    const t = currentTranslations[language] || currentTranslations.COSYenglish || {};\r\n    if (!allProcessedVerbData || allProcessedVerbData.length === 0) {\r\n        console.error(\"generateGrammarExerciseSentence: No processed verb data provided for language \" + language);\r\n        return null;\r\n    }\r\n    \r\n    let currentDailyVocab = dailyVocab;\r\n    if (!currentDailyVocab || currentDailyVocab.length === 0) {\r\n        // console.warn(`generateGrammarExerciseSentence: No daily vocabulary for ${language}. Fetching fallback.`);\r\n        // In a real scenario, TypeVerbExercise would fetch this. For the util, we assume it's passed or use very basic fallbacks.\r\n        const {data: vocabWords } = await loadVocabularyData(language, days); // Fetch if not provided\r\n        currentDailyVocab = vocabWords.length > 0 ? vocabWords : [t.genericNoun1 || \"book\", t.genericNoun2 || \"pen\", t.genericAdjective1 || \"interesting\"];\r\n    }\r\n\r\n    const sentencePatterns = [\r\n        { type: \"SVO\", structure: [\"S\", \"V\", \"O\"], needsAux: false, isQuestion: false },\r\n        { type: \"SVNegO\", structure: [\"S\", \"V(neg)\", \"O\"], needsAux: true, isQuestion: false },\r\n        { type: \"Q_AuxSVO\", structure: [\"Aux\", \"S\", \"V_base\", \"O?\"], needsAux: true, isQuestion: true },\r\n        { type: \"Q_BeSVO\", structure: [\"V_be\", \"S\", \"O?\"], needsAux: false, isQuestion: true }\r\n    ];\r\n\r\n    let selectedPattern = getRandomElement(sentencePatterns);\r\n    if (!selectedPattern) return null;\r\n\r\n    const subjectDetails = await selectSubject(language, allProcessedVerbData, currentDailyVocab);\r\n    let objectText = await selectObject(language, currentDailyVocab, subjectDetails.text);\r\n\r\n    let verbInfo = null;\r\n    let attempts = 0;\r\n    const maxAttempts = 30;\r\n\r\n    while (attempts < maxAttempts && !verbInfo) {\r\n        const randomVerbEntry = getRandomElement(allProcessedVerbData);\r\n        if (!randomVerbEntry || !randomVerbEntry.verb || !randomVerbEntry.pronoun || !randomVerbEntry.form) {\r\n            attempts++; continue;\r\n        }\r\n        const verbPronouns = randomVerbEntry.pronoun.toLowerCase().split('/');\r\n        const representativePronoun = subjectDetails.representativePronoun.toLowerCase();\r\n\r\n        if (verbPronouns.includes(representativePronoun)) {\r\n            let suitableForPattern = true;\r\n            if (selectedPattern.type === \"Q_BeSVO\" && randomVerbEntry.verb.toLowerCase() !== (t.verbToBe || 'to be').toLowerCase()) {\r\n                suitableForPattern = false;\r\n            } else if (selectedPattern.type === \"Q_AuxSVO\" && randomVerbEntry.verb.toLowerCase() === (t.verbToBe || 'to be').toLowerCase()) {\r\n                suitableForPattern = false;\r\n            }\r\n            if (suitableForPattern) {\r\n                verbInfo = { base: randomVerbEntry.verb, conjugated: randomVerbEntry.form, isBeOrHave: randomVerbEntry.verb.toLowerCase() === (t.verbToBe || 'to be').toLowerCase() || randomVerbEntry.verb.toLowerCase() === (t.verbToHave || 'to have').toLowerCase(), fullItem: randomVerbEntry };\r\n                break;\r\n            }\r\n        }\r\n        attempts++;\r\n    }\r\n    \r\n    if (!verbInfo) { // Fallback: pick any verb and adjust subject\r\n        const anyVerbFromPool = getRandomElement(allProcessedVerbData);\r\n        if (anyVerbFromPool) {\r\n            verbInfo = { base: anyVerbFromPool.verb, conjugated: anyVerbFromPool.form, isBeOrHave: anyVerbFromPool.verb.toLowerCase() === (t.verbToBe || 'to be').toLowerCase() || anyVerbFromPool.verb.toLowerCase() === (t.verbToHave || 'to have').toLowerCase(), fullItem: anyVerbFromPool };\r\n            subjectDetails.text = anyVerbFromPool.pronoun.split('/')[0];\r\n            subjectDetails.representativePronoun = subjectDetails.text.toLowerCase();\r\n            const pluralPronouns = t.pluralPronounsList || ['we', 'they', 'you'];\r\n            subjectDetails.isPlural = pluralPronouns.includes(subjectDetails.representativePronoun);\r\n        } else {\r\n            console.error(\"generateGrammarExerciseSentence: Could not find any verb even after fallback.\");\r\n            return null;\r\n        }\r\n    }\r\n\r\n    let sentenceComponents = [];\r\n    let S_final = subjectDetails.text;\r\n    let O_final = objectText;\r\n\r\n    if (selectedPattern.type === \"Q_BeSVO\" && language === 'COSYenglish') {\r\n        const namesForLangLower = ((t.commonNames || COMMON_NAMES_EN).map(n => n.toLowerCase()));\r\n        if (subjectDetails.type === \"noun\" && !namesForLangLower.includes(S_final.toLowerCase())) {\r\n            S_final = addIndefiniteArticle(S_final, language);\r\n        }\r\n        const isObjectLikelySimpleNounForArticle = (currentDailyVocab.map(w => w.toLowerCase()).includes(objectText.toLowerCase()) || (t.exampleNounsForArticle || [\"book\", \"cat\", \"pen\", \"apple\"]).includes(objectText.toLowerCase())) && objectText.split(' ').length === 1 && !namesForLangLower.includes(objectText.toLowerCase());\r\n        if (isObjectLikelySimpleNounForArticle) {\r\n            O_final = addIndefiniteArticle(objectText, language);\r\n        }\r\n    }\r\n    \r\n    const V_conj = verbInfo.conjugated;\r\n    const V_base_inf = verbInfo.base.startsWith(t.infinitiveMarker || (language === 'COSYenglish' ? 'to ' : '')) ? verbInfo.base.substring((t.infinitiveMarker || (language === 'COSYenglish' ? 'to ' : '')).length) : verbInfo.base;\r\n    let aux = \"\";\r\n\r\n    if (language === 'COSYenglish') { // Language-specific auxiliary logic\r\n        if (selectedPattern.type === \"SVNegO\") {\r\n            if (!verbInfo.isBeOrHave) { // \"do not\" / \"does not\"\r\n                aux = subjectDetails.isPlural || ['i', 'you'].includes(subjectDetails.representativePronoun.toLowerCase()) ? \"do\" : \"does\";\r\n            } // For \"be/have\", negation is direct: \"is not\", \"has not\"\r\n        } else if (selectedPattern.type === \"Q_AuxSVO\") {\r\n            aux = subjectDetails.isPlural || ['i', 'you'].includes(subjectDetails.representativePronoun.toLowerCase()) ? \"Do\" : \"Does\";\r\n        }\r\n    }\r\n    // Simplified sentence construction based on pattern\r\n    // This part needs careful porting of the logic from grammar.js's generateSentenceForExercise\r\n    switch (selectedPattern.type) {\r\n        case \"SVO\":\r\n            sentenceComponents = [S_final, V_conj, O_final];\r\n            break;\r\n        case \"SVNegO\":\r\n            if (language === 'COSYenglish' && aux) { // e.g. \"They do not like cats\"\r\n                sentenceComponents = [S_final, aux, (t.negationParticle || \"not\"), V_base_inf, O_final];\r\n            } else if (verbInfo.isBeOrHave) { // e.g. \"He is not happy\"\r\n                 sentenceComponents = [S_final, V_conj, (t.negationParticle || \"not\"), O_final];\r\n            } else { // Non-english or verbs that don't use \"do\" aux for negation\r\n                sentenceComponents = [S_final, V_conj, (t.negationParticle || \"not\"), O_final]; // Fallback or other languages\r\n            }\r\n            break;\r\n        case \"Q_AuxSVO\": // e.g. \"Do they like cats?\"\r\n            if (language === 'COSYenglish' && aux) {\r\n                sentenceComponents = [aux, S_final, V_base_inf, O_final];\r\n            } else { // Fallback for non-english or if aux logic is different\r\n                sentenceComponents = [V_conj, S_final, O_final]; \r\n            }\r\n            break;\r\n        case \"Q_BeSVO\": // e.g. \"Is he happy?\"\r\n            sentenceComponents = [V_conj, S_final, O_final];\r\n            break;\r\n        default: return null;\r\n    }\r\n\r\n    let finalCasedComponents = sentenceComponents.filter(c => c).map((word, index) => { // filter out null/empty aux\r\n        if (typeof word !== 'string') return word;\r\n        const namesForLang = (t.commonNames && t.commonNames.length > 0) ? t.commonNames : (language === 'COSYenglish' ? COMMON_NAMES_EN : []);\r\n        if (namesForLang.includes(word)) return word;\r\n        if (language === 'COSYenglish' && word.toLowerCase() === 'i') return 'I';\r\n        return (index === 0) ? capitalizeWord(word, true, language) : word;\r\n    });\r\n\r\n    const finalPunctuation = selectedPattern.isQuestion ? \"?\" : \".\";\r\n    let correctSentence = finalCasedComponents.join(\" \") + finalPunctuation;\r\n    \r\n    // Determine what to blank out\r\n    let wordToBlankOriginal = '';\r\n    let indexOfBlankInCased = -1;\r\n    const blankTypeRoll = Math.random();\r\n\r\n    if (blankTypeRoll < 0.5 && V_conj) { // Blank the main verb (conjugated or base)\r\n        wordToBlankOriginal = (selectedPattern.type === \"SVNegO\" && language === 'COSYenglish' && aux) || (selectedPattern.type === \"Q_AuxSVO\" && language === 'COSYenglish' && aux) ? V_base_inf : V_conj;\r\n    } else if (blankTypeRoll < 0.75 && subjectDetails.type !== \"pronoun\" && S_final) { // Blank subject if not pronoun\r\n        wordToBlankOriginal = S_final;\r\n    } else if (O_final) { // Blank object\r\n        wordToBlankOriginal = O_final;\r\n    } else if (V_conj) { // Fallback to verb if object was blanked but missing\r\n        wordToBlankOriginal = (selectedPattern.type === \"SVNegO\" && language === 'COSYenglish' && aux) || (selectedPattern.type === \"Q_AuxSVO\" && language === 'COSYenglish' && aux) ? V_base_inf : V_conj;\r\n    } else { // Ultimate fallback\r\n        wordToBlankOriginal = finalCasedComponents.length > 1 ? finalCasedComponents[1] : finalCasedComponents[0];\r\n    }\r\n    \r\n    // Find the cased version of the word to blank\r\n    let tempSentenceForTemplate = [...finalCasedComponents];\r\n    const casedWordToBlank = finalCasedComponents.find(w => w.toLowerCase() === wordToBlankOriginal.toLowerCase());\r\n    \r\n    if(casedWordToBlank){\r\n        indexOfBlankInCased = finalCasedComponents.indexOf(casedWordToBlank);\r\n        tempSentenceForTemplate[indexOfBlankInCased] = \"___\";\r\n    } else if (finalCasedComponents.length > 0) { // Fallback if exact cased match not found\r\n        indexOfBlankInCased = finalCasedComponents.length > 1 ? 1 : 0;\r\n        wordToBlankOriginal = finalCasedComponents[indexOfBlankInCased]; // update original to what's actually blanked\r\n        tempSentenceForTemplate[indexOfBlankInCased] = \"___\";\r\n    } else {\r\n        return { questionPrompt: \"___\" + finalPunctuation, answer: t.errorFallbackWord || \"error\", correctSentence: t.errorFallbackWord + finalPunctuation };\r\n    }\r\n\r\n    let sentenceTemplate = tempSentenceForTemplate.join(\" \") + finalPunctuation;\r\n\r\n    return {\r\n        questionPrompt: sentenceTemplate.trim(),\r\n        answer: wordToBlankOriginal.trim(), // This should be the non-cased, original form intended for the blank\r\n        correctSentence: correctSentence.trim(),\r\n        // For debugging or more complex hints:\r\n        // rawSubject: subjectDetails,\r\n        // rawVerb: verbInfo,\r\n        // rawObject: objectText,\r\n        // sentenceComponents: finalCasedComponents,\r\n    };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}