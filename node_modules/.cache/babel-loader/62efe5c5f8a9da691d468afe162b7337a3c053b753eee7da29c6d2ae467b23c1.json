{"ast":null,"code":"import React,{createContext,useContext,useState,useCallback,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const UserProfileContext=/*#__PURE__*/createContext();const USER_PROFILE_STORAGE_KEY='COSY_USER_PROFILE';// Example: Achievements could be loaded from a JSON or defined here\n// For simplicity, defining a basic structure. Real one would be in a separate file.\nconst ALL_ACHIEVEMENTS={STREAK_3_DAYS:{id:'STREAK_3_DAYS',name:'3-Day Streak!',description:'Maintained a 3-day learning streak.',criteria:{type:'streak',value:3},icon:'ðŸ”¥'},LEVEL_5:{id:'LEVEL_5',name:'Level 5 Reached',description:'Reached learning level 5.',criteria:{type:'level',value:5},icon:'ðŸŒŸ'}// Add more achievements as defined in the old achievements-data.js\n};export const useUserProfile=()=>{const context=useContext(UserProfileContext);if(!context){throw new Error('useUserProfile must be used within a UserProfileProvider');}return context;};export const UserProfileProvider=_ref=>{let{children}=_ref;const[xp,setXp]=useState(0);const[level,setLevel]=useState(1);const[streak,setStreak]=useState(0);const[lastActiveDate,setLastActiveDate]=useState(null);// Store as YYYY-MM-DD string\nconst[achievements,setAchievements]=useState([]);// Array of achievement IDs awarded\n// Load profile from localStorage\nuseEffect(()=>{try{const savedProfile=localStorage.getItem(USER_PROFILE_STORAGE_KEY);if(savedProfile){const profile=JSON.parse(savedProfile);setXp(profile.xp||0);setLevel(profile.level||1);setStreak(profile.streak||0);setLastActiveDate(profile.lastActiveDate||null);setAchievements(profile.achievements||[]);}console.log(\"[UserProfileContext] Profile loaded:\",savedProfile?JSON.parse(savedProfile):{});}catch(error){console.error(\"[UserProfileContext] Error loading user profile:\",error);}},[]);// Save profile to localStorage\nuseEffect(()=>{try{const profileData={xp,level,streak,lastActiveDate,achievements};localStorage.setItem(USER_PROFILE_STORAGE_KEY,JSON.stringify(profileData));console.log(\"[UserProfileContext] Profile saved:\",profileData);}catch(error){console.error(\"[UserProfileContext] Error saving user profile:\",error);}},[xp,level,streak,lastActiveDate,achievements]);// Update level whenever XP changes\nuseEffect(()=>{const newLevel=Math.floor(xp/50)+1;// As per old GameState logic\nif(newLevel!==level){setLevel(newLevel);// Potentially trigger level up notification or check for level-based achievements\nconsole.log(\"[UserProfileContext] Level up! New level: \".concat(newLevel));// checkAndAwardAchievement('LEVEL_UP', newLevel); // Example call\n}},[xp,level]);const addXP=useCallback(amount=>{setXp(prevXp=>prevXp+amount);},[]);const reduceXP=useCallback(amount=>{setXp(prevXp=>Math.max(0,prevXp-amount));},[]);const updateStreak=useCallback(()=>{const today=new Date();const todayStr=today.toISOString().split('T')[0];// YYYY-MM-DD\nif(lastActiveDate===todayStr){console.log(\"[UserProfileContext] Already active today, streak maintained.\");return;// Already active today\n}const yesterday=new Date(today);yesterday.setDate(today.getDate()-1);const yesterdayStr=yesterday.toISOString().split('T')[0];setLastActiveDate(todayStr);if(lastActiveDate===yesterdayStr){setStreak(prevStreak=>{const newStreak=prevStreak+1;// checkAndAwardAchievement('STREAK', newStreak); // Example\nconsole.log(\"[UserProfileContext] Streak extended to \".concat(newStreak,\" days.\"));return newStreak;});}else{console.log(\"[UserProfileContext] Streak reset to 1 day.\");setStreak(1);// Reset streak to 1 if not consecutive\n// checkAndAwardAchievement('STREAK', 1); // Example\n}},[lastActiveDate]);const checkAndAwardAchievement=useCallback(achievementId=>{const achievement=ALL_ACHIEVEMENTS[achievementId];if(!achievement||achievements.includes(achievementId)){return;// Achievement doesn't exist or already awarded\n}let criteriaMet=false;if(achievement.criteria.type==='level'&&level>=achievement.criteria.value){criteriaMet=true;}else if(achievement.criteria.type==='streak'&&streak>=achievement.criteria.value){criteriaMet=true;}// Add other criteria types: lessons completed, items mastered (from SRS context) etc.\nif(criteriaMet){setAchievements(prevAchievements=>{if(!prevAchievements.includes(achievementId)){console.log(\"[UserProfileContext] Achievement Unlocked: \".concat(achievement.name));// TODO: Trigger a notification to the user\nreturn[...prevAchievements,achievementId];}return prevAchievements;});}},[achievements,level,streak]);// Periodically check for achievements that might be met by current state\nuseEffect(()=>{Object.keys(ALL_ACHIEVEMENTS).forEach(achId=>{checkAndAwardAchievement(achId);});},[level,streak,checkAndAwardAchievement]);const value={xp,level,streak,lastActiveDate,achievements,// Awarded achievement IDs\nallAchievementDefinitions:ALL_ACHIEVEMENTS,// All possible achievements\naddXP,reduceXP,updateStreak,// Call this when the app becomes active or a key daily action is performed\ncheckAndAwardAchievement// Can be called explicitly too\n};return/*#__PURE__*/_jsx(UserProfileContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useCallback","useEffect","jsx","_jsx","UserProfileContext","USER_PROFILE_STORAGE_KEY","ALL_ACHIEVEMENTS","STREAK_3_DAYS","id","name","description","criteria","type","value","icon","LEVEL_5","useUserProfile","context","Error","UserProfileProvider","_ref","children","xp","setXp","level","setLevel","streak","setStreak","lastActiveDate","setLastActiveDate","achievements","setAchievements","savedProfile","localStorage","getItem","profile","JSON","parse","console","log","error","profileData","setItem","stringify","newLevel","Math","floor","concat","addXP","amount","prevXp","reduceXP","max","updateStreak","today","Date","todayStr","toISOString","split","yesterday","setDate","getDate","yesterdayStr","prevStreak","newStreak","checkAndAwardAchievement","achievementId","achievement","includes","criteriaMet","prevAchievements","Object","keys","forEach","achId","allAchievementDefinitions","Provider"],"sources":["/workspaces/COSYlanguagesproject/src/contexts/UserProfileContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useCallback, useEffect } from 'react';\r\n\r\nconst UserProfileContext = createContext();\r\nconst USER_PROFILE_STORAGE_KEY = 'COSY_USER_PROFILE';\r\n\r\n// Example: Achievements could be loaded from a JSON or defined here\r\n// For simplicity, defining a basic structure. Real one would be in a separate file.\r\nconst ALL_ACHIEVEMENTS = {\r\n  STREAK_3_DAYS: { id: 'STREAK_3_DAYS', name: '3-Day Streak!', description: 'Maintained a 3-day learning streak.', criteria: { type: 'streak', value: 3 }, icon: 'ðŸ”¥' },\r\n  LEVEL_5: { id: 'LEVEL_5', name: 'Level 5 Reached', description: 'Reached learning level 5.', criteria: { type: 'level', value: 5 }, icon: 'ðŸŒŸ' },\r\n  // Add more achievements as defined in the old achievements-data.js\r\n};\r\n\r\n\r\nexport const useUserProfile = () => {\r\n  const context = useContext(UserProfileContext);\r\n  if (!context) {\r\n    throw new Error('useUserProfile must be used within a UserProfileProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const UserProfileProvider = ({ children }) => {\r\n  const [xp, setXp] = useState(0);\r\n  const [level, setLevel] = useState(1);\r\n  const [streak, setStreak] = useState(0);\r\n  const [lastActiveDate, setLastActiveDate] = useState(null); // Store as YYYY-MM-DD string\r\n  const [achievements, setAchievements] = useState([]); // Array of achievement IDs awarded\r\n\r\n  // Load profile from localStorage\r\n  useEffect(() => {\r\n    try {\r\n      const savedProfile = localStorage.getItem(USER_PROFILE_STORAGE_KEY);\r\n      if (savedProfile) {\r\n        const profile = JSON.parse(savedProfile);\r\n        setXp(profile.xp || 0);\r\n        setLevel(profile.level || 1);\r\n        setStreak(profile.streak || 0);\r\n        setLastActiveDate(profile.lastActiveDate || null);\r\n        setAchievements(profile.achievements || []);\r\n      }\r\n      console.log(\"[UserProfileContext] Profile loaded:\", savedProfile ? JSON.parse(savedProfile) : {});\r\n    } catch (error) {\r\n      console.error(\"[UserProfileContext] Error loading user profile:\", error);\r\n    }\r\n  }, []);\r\n\r\n  // Save profile to localStorage\r\n  useEffect(() => {\r\n    try {\r\n      const profileData = { xp, level, streak, lastActiveDate, achievements };\r\n      localStorage.setItem(USER_PROFILE_STORAGE_KEY, JSON.stringify(profileData));\r\n      console.log(\"[UserProfileContext] Profile saved:\", profileData);\r\n    } catch (error) {\r\n      console.error(\"[UserProfileContext] Error saving user profile:\", error);\r\n    }\r\n  }, [xp, level, streak, lastActiveDate, achievements]);\r\n\r\n  // Update level whenever XP changes\r\n  useEffect(() => {\r\n    const newLevel = Math.floor(xp / 50) + 1; // As per old GameState logic\r\n    if (newLevel !== level) {\r\n      setLevel(newLevel);\r\n      // Potentially trigger level up notification or check for level-based achievements\r\n      console.log(`[UserProfileContext] Level up! New level: ${newLevel}`);\r\n      // checkAndAwardAchievement('LEVEL_UP', newLevel); // Example call\r\n    }\r\n  }, [xp, level]);\r\n\r\n\r\n  const addXP = useCallback((amount) => {\r\n    setXp(prevXp => prevXp + amount);\r\n  }, []);\r\n\r\n  const reduceXP = useCallback((amount) => {\r\n    setXp(prevXp => Math.max(0, prevXp - amount));\r\n  }, []);\r\n\r\n  const updateStreak = useCallback(() => {\r\n    const today = new Date();\r\n    const todayStr = today.toISOString().split('T')[0]; // YYYY-MM-DD\r\n\r\n    if (lastActiveDate === todayStr) {\r\n      console.log(\"[UserProfileContext] Already active today, streak maintained.\");\r\n      return; // Already active today\r\n    }\r\n\r\n    const yesterday = new Date(today);\r\n    yesterday.setDate(today.getDate() - 1);\r\n    const yesterdayStr = yesterday.toISOString().split('T')[0];\r\n\r\n    setLastActiveDate(todayStr);\r\n\r\n    if (lastActiveDate === yesterdayStr) {\r\n      setStreak(prevStreak => {\r\n        const newStreak = prevStreak + 1;\r\n        // checkAndAwardAchievement('STREAK', newStreak); // Example\r\n        console.log(`[UserProfileContext] Streak extended to ${newStreak} days.`);\r\n        return newStreak;\r\n      });\r\n    } else {\r\n      console.log(\"[UserProfileContext] Streak reset to 1 day.\");\r\n      setStreak(1); // Reset streak to 1 if not consecutive\r\n      // checkAndAwardAchievement('STREAK', 1); // Example\r\n    }\r\n  }, [lastActiveDate]);\r\n  \r\n  const checkAndAwardAchievement = useCallback((achievementId) => {\r\n    const achievement = ALL_ACHIEVEMENTS[achievementId];\r\n    if (!achievement || achievements.includes(achievementId)) {\r\n      return; // Achievement doesn't exist or already awarded\r\n    }\r\n\r\n    let criteriaMet = false;\r\n    if (achievement.criteria.type === 'level' && level >= achievement.criteria.value) {\r\n      criteriaMet = true;\r\n    } else if (achievement.criteria.type === 'streak' && streak >= achievement.criteria.value) {\r\n      criteriaMet = true;\r\n    }\r\n    // Add other criteria types: lessons completed, items mastered (from SRS context) etc.\r\n\r\n    if (criteriaMet) {\r\n      setAchievements(prevAchievements => {\r\n        if (!prevAchievements.includes(achievementId)) {\r\n          console.log(`[UserProfileContext] Achievement Unlocked: ${achievement.name}`);\r\n          // TODO: Trigger a notification to the user\r\n          return [...prevAchievements, achievementId];\r\n        }\r\n        return prevAchievements;\r\n      });\r\n    }\r\n  }, [achievements, level, streak]);\r\n\r\n  // Periodically check for achievements that might be met by current state\r\n  useEffect(() => {\r\n    Object.keys(ALL_ACHIEVEMENTS).forEach(achId => {\r\n        checkAndAwardAchievement(achId);\r\n    });\r\n  }, [level, streak, checkAndAwardAchievement]);\r\n\r\n\r\n  const value = {\r\n    xp,\r\n    level,\r\n    streak,\r\n    lastActiveDate,\r\n    achievements, // Awarded achievement IDs\r\n    allAchievementDefinitions: ALL_ACHIEVEMENTS, // All possible achievements\r\n    addXP,\r\n    reduceXP,\r\n    updateStreak, // Call this when the app becomes active or a key daily action is performed\r\n    checkAndAwardAchievement, // Can be called explicitly too\r\n  };\r\n\r\n  return (\r\n    <UserProfileContext.Provider value={value}>\r\n      {children}\r\n    </UserProfileContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}