{"ast":null,"code":"var _jsxFileName = \"/workspaces/COSYlanguagesproject/src/components/Freestyle/exercises/vocabulary/ShowWordExercise.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { loadVocabularyData } from '../../../../utils/exerciseDataService';\nimport { useLatinizationContext } from '../../../../contexts/LatinizationContext';\nimport useLatinization from '../../../../hooks/useLatinization';\nimport { pronounceText, unlockAudioPlayback } from '../../../../utils/speechUtils';\nimport ExerciseControls from '../../ExerciseControls';\nimport FeedbackDisplay from '../../FeedbackDisplay';\nimport { useProgress } from '../../../../contexts/ProgressContext'; // Import useProgress\nimport { normalizeString } from '../../../../utils/stringUtils';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ShowWordExercise = ({\n  language,\n  days,\n  exerciseKey\n}) => {\n  _s();\n  const [currentWord, setCurrentWord] = useState('');\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const {\n    isLatinized\n  } = useLatinizationContext();\n  const progress = useProgress();\n  const latinizedWord = useLatinization(currentWord, language);\n  useEffect(() => {\n    unlockAudioPlayback();\n  }, []);\n  const fetchAndSetNewWord = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    const oldWord = currentWord; // Keep track of the word being replaced\n    setCurrentWord('');\n\n    // If there was a word, consider it \"seen\" or \"passed\" for SRS purposes\n    // This is a simple way; more complex logic might depend on user interaction (e.g., if they pronounced it)\n    if (oldWord) {\n      const itemId = `showword_${normalizeString(oldWord)}`;\n      // For ShowWord, \"correct\" might mean the user acknowledged/studied it.\n      // Since there's no direct input, we might assume \"correct\" when they move to the next.\n      // Or, this could be a place for a \"I knew this\" / \"I didn't know this\" button in future.\n      // For now, let's log it as a generic interaction.\n      progress.scheduleReview(itemId, 'vocab-show-word', true); // Assume \"true\" as they moved on\n    }\n    try {\n      const {\n        data: words,\n        error: fetchError\n      } = await loadVocabularyData(language, days);\n      if (fetchError) {\n        throw new Error(fetchError.message || fetchError.error || 'Failed to load vocabulary words.');\n      }\n      if (words && words.length > 0) {\n        const randomIndex = Math.floor(Math.random() * words.length);\n        setCurrentWord(words[randomIndex]);\n      } else {\n        setError('No vocabulary words found for the selected criteria.');\n      }\n    } catch (err) {\n      console.error(\"ShowWordExercise - Error fetching word:\", err);\n      setError(err.message || 'An unexpected error occurred.');\n    } finally {\n      setIsLoading(false);\n    }\n  }, [language, days, progress, currentWord]); // Added currentWord to useCallback deps for oldWord tracking\n\n  useEffect(() => {\n    if (language && days && days.length > 0) {\n      fetchAndSetNewWord();\n    } else {\n      setIsLoading(false);\n      setError(\"Please select a language and day(s).\");\n      setCurrentWord('');\n    }\n  }, [fetchAndSetNewWord, exerciseKey, language, days]); // fetchAndSetNewWord is already memoized\n\n  const handleNextWord = () => {\n    fetchAndSetNewWord(); // This will also trigger the progress tracking for the \"oldWord\" inside fetchAndSetNewWord\n  };\n  const handlePronounce = async () => {\n    if (currentWord && language) {\n      try {\n        await pronounceText(currentWord, language);\n      } catch (speechError) {\n        console.error(\"Error pronouncing word:\", speechError);\n        setError(\"Could not pronounce the word. Please ensure your browser supports speech synthesis and audio is enabled.\");\n      }\n    }\n  };\n  const wordStyle = isLatinized && currentWord !== latinizedWord ? {\n    fontFamily: 'Arial, sans-serif',\n    fontStyle: 'italic'\n  } : {};\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading word...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(FeedbackDisplay, {\n      message: error,\n      type: \"error\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 12\n    }, this);\n  }\n  if (!currentWord && !isLoading) {\n    return /*#__PURE__*/_jsxDEV(FeedbackDisplay, {\n      message: \"No word to display. Try different selections or check data.\",\n      type: \"info\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 12\n    }, this);\n  }\n  const pronounceButtonStyle = {\n    padding: '10px 15px',\n    fontSize: '1rem',\n    cursor: 'pointer',\n    backgroundColor: '#007bff',\n    color: 'white',\n    border: 'none',\n    borderRadius: '5px',\n    marginRight: '10px'\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: 'center',\n      padding: '20px',\n      border: '1px solid #eee',\n      borderRadius: '8px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Random Word\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), currentWord && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontSize: '2.5rem',\n          margin: '20px 0',\n          padding: '10px',\n          ...wordStyle\n        },\n        \"aria-label\": `Word to practice: ${currentWord}`,\n        children: latinizedWord || currentWord\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: '20px',\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          gap: '10px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handlePronounce,\n          style: pronounceButtonStyle,\n          disabled: !currentWord,\n          children: \"\\uD83D\\uDD0A Pronounce\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ExerciseControls, {\n          onNextExercise: handleNextWord,\n          config: {\n            showNext: true,\n            showCheck: false,\n            showHint: false,\n            showReveal: false,\n            showRandomize: false\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n};\n_s(ShowWordExercise, \"BE0jggj0nPQ8uiw1KC8z1VY6NZQ=\", false, function () {\n  return [useLatinizationContext, useProgress, useLatinization];\n});\n_c = ShowWordExercise;\nexport default ShowWordExercise;\nvar _c;\n$RefreshReg$(_c, \"ShowWordExercise\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","loadVocabularyData","useLatinizationContext","useLatinization","pronounceText","unlockAudioPlayback","ExerciseControls","FeedbackDisplay","useProgress","normalizeString","jsxDEV","_jsxDEV","Fragment","_Fragment","ShowWordExercise","language","days","exerciseKey","_s","currentWord","setCurrentWord","isLoading","setIsLoading","error","setError","isLatinized","progress","latinizedWord","fetchAndSetNewWord","oldWord","itemId","scheduleReview","data","words","fetchError","Error","message","length","randomIndex","Math","floor","random","err","console","handleNextWord","handlePronounce","speechError","wordStyle","fontFamily","fontStyle","children","fileName","_jsxFileName","lineNumber","columnNumber","type","pronounceButtonStyle","padding","fontSize","cursor","backgroundColor","color","border","borderRadius","marginRight","style","textAlign","margin","marginTop","display","justifyContent","alignItems","gap","onClick","disabled","onNextExercise","config","showNext","showCheck","showHint","showReveal","showRandomize","_c","$RefreshReg$"],"sources":["/workspaces/COSYlanguagesproject/src/components/Freestyle/exercises/vocabulary/ShowWordExercise.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { loadVocabularyData } from '../../../../utils/exerciseDataService';\r\nimport { useLatinizationContext } from '../../../../contexts/LatinizationContext';\r\nimport useLatinization from '../../../../hooks/useLatinization';\r\nimport { pronounceText, unlockAudioPlayback } from '../../../../utils/speechUtils';\r\nimport ExerciseControls from '../../ExerciseControls'; \r\nimport FeedbackDisplay from '../../FeedbackDisplay';\r\nimport { useProgress } from '../../../../contexts/ProgressContext'; // Import useProgress\r\nimport { normalizeString } from '../../../../utils/stringUtils';\r\n\r\n\r\nconst ShowWordExercise = ({ language, days, exerciseKey }) => {\r\n  const [currentWord, setCurrentWord] = useState('');\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const { isLatinized } = useLatinizationContext();\r\n  const progress = useProgress();\r\n\r\n  const latinizedWord = useLatinization(currentWord, language);\r\n\r\n  useEffect(() => {\r\n    unlockAudioPlayback(); \r\n  }, []);\r\n\r\n\r\n  const fetchAndSetNewWord = useCallback(async () => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    const oldWord = currentWord; // Keep track of the word being replaced\r\n    setCurrentWord(''); \r\n\r\n    // If there was a word, consider it \"seen\" or \"passed\" for SRS purposes\r\n    // This is a simple way; more complex logic might depend on user interaction (e.g., if they pronounced it)\r\n    if (oldWord) {\r\n        const itemId = `showword_${normalizeString(oldWord)}`;\r\n        // For ShowWord, \"correct\" might mean the user acknowledged/studied it.\r\n        // Since there's no direct input, we might assume \"correct\" when they move to the next.\r\n        // Or, this could be a place for a \"I knew this\" / \"I didn't know this\" button in future.\r\n        // For now, let's log it as a generic interaction.\r\n        progress.scheduleReview(itemId, 'vocab-show-word', true); // Assume \"true\" as they moved on\r\n    }\r\n\r\n    try {\r\n      const { data: words, error: fetchError } = await loadVocabularyData(language, days);\r\n      if (fetchError) {\r\n        throw new Error(fetchError.message || fetchError.error || 'Failed to load vocabulary words.');\r\n      }\r\n      if (words && words.length > 0) {\r\n        const randomIndex = Math.floor(Math.random() * words.length);\r\n        setCurrentWord(words[randomIndex]);\r\n      } else {\r\n        setError('No vocabulary words found for the selected criteria.');\r\n      }\r\n    } catch (err) {\r\n      console.error(\"ShowWordExercise - Error fetching word:\", err);\r\n      setError(err.message || 'An unexpected error occurred.');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [language, days, progress, currentWord]); // Added currentWord to useCallback deps for oldWord tracking\r\n\r\n  useEffect(() => {\r\n    if (language && days && days.length > 0) { \r\n        fetchAndSetNewWord();\r\n    } else {\r\n        setIsLoading(false);\r\n        setError(\"Please select a language and day(s).\");\r\n        setCurrentWord('');\r\n    }\r\n  }, [fetchAndSetNewWord, exerciseKey, language, days]); // fetchAndSetNewWord is already memoized\r\n\r\n  const handleNextWord = () => {\r\n    fetchAndSetNewWord(); // This will also trigger the progress tracking for the \"oldWord\" inside fetchAndSetNewWord\r\n  };\r\n\r\n  const handlePronounce = async () => {\r\n    if (currentWord && language) {\r\n      try {\r\n        await pronounceText(currentWord, language);\r\n      } catch (speechError) {\r\n        console.error(\"Error pronouncing word:\", speechError);\r\n        setError(\"Could not pronounce the word. Please ensure your browser supports speech synthesis and audio is enabled.\");\r\n      }\r\n    }\r\n  };\r\n  \r\n  const wordStyle = (isLatinized && currentWord !== latinizedWord) ? { fontFamily: 'Arial, sans-serif', fontStyle: 'italic' } : {};\r\n\r\n  if (isLoading) {\r\n    return <p>Loading word...</p>;\r\n  }\r\n\r\n  if (error) {\r\n    return <FeedbackDisplay message={error} type=\"error\" />;\r\n  }\r\n\r\n  if (!currentWord && !isLoading) { \r\n    return <FeedbackDisplay message=\"No word to display. Try different selections or check data.\" type=\"info\" />;\r\n  }\r\n  \r\n  const pronounceButtonStyle = {\r\n    padding: '10px 15px',\r\n    fontSize: '1rem',\r\n    cursor: 'pointer',\r\n    backgroundColor: '#007bff',\r\n    color: 'white',\r\n    border: 'none',\r\n    borderRadius: '5px',\r\n    marginRight: '10px', \r\n  };\r\n\r\n\r\n  return (\r\n    <div style={{ textAlign: 'center', padding: '20px', border: '1px solid #eee', borderRadius: '8px' }}>\r\n      <h3>Random Word</h3>\r\n      {currentWord && ( \r\n        <>\r\n          <div\r\n            style={{ fontSize: '2.5rem', margin: '20px 0', padding: '10px', ...wordStyle }}\r\n            aria-label={`Word to practice: ${currentWord}`}\r\n          >\r\n            {latinizedWord || currentWord}\r\n          </div>\r\n          <div style={{ marginTop: '20px', display: 'flex', justifyContent: 'center', alignItems: 'center', gap: '10px' }}>\r\n            <button onClick={handlePronounce} style={pronounceButtonStyle} disabled={!currentWord}>\r\n              🔊 Pronounce\r\n            </button>\r\n            <ExerciseControls \r\n              onNextExercise={handleNextWord}\r\n              config={{\r\n                showNext: true,\r\n                showCheck: false,\r\n                showHint: false,\r\n                showReveal: false,\r\n                showRandomize: false, \r\n              }}\r\n            />\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ShowWordExercise;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}