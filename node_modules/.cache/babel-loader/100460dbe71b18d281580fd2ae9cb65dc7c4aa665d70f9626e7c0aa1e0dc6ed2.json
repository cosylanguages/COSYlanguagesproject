{"ast":null,"code":"import{useMemo}from'react';import{useLatinizationContext}from'../contexts/LatinizationContext';import{getLatinization as utilGetLatinization}from'../utils/transliteration';// Corrected import path\n/**\r\n * Custom hook to get transliterated text based on LatinizationContext.\r\n * @param {string} originalText The original text to potentially transliterate.\r\n * @param {string} textLanguageIdentifier The language identifier for the text (e.g., 'ТАКОЙрусский').\r\n * @returns {string} The transliterated text if latinization is active and applicable, otherwise original text.\r\n */const useLatinization=(originalText,textLanguageIdentifier)=>{const{isLatinized,latinizableLanguageIds}=useLatinizationContext();const displayText=useMemo(()=>{if(!isLatinized||!originalText||!textLanguageIdentifier){return originalText;}// Check if the text's language is in the list of latinizable languages from the context\n// This logic might need to be more robust if languageIdentifier formats vary greatly.\n// For now, it relies on the context's latinizableLanguageIds being the COSY-style IDs.\nconst isTextLanguageLatinizable=latinizableLanguageIds.includes(textLanguageIdentifier);// The previous check was more complex:\n// const isTextLanguageLatinizable = latinizableLanguageIds.some(id =>\n//   textLanguageIdentifier.toLowerCase().includes(id.toLowerCase()) ||\n//   (id === 'ΚΟΖΥελληνικά' && textLanguageIdentifier.toLowerCase().includes('greek')) ||\n//   (id === 'ТАКОЙрусский' && textLanguageIdentifier.toLowerCase().includes('russian')) ||\n//   (id === 'ԾՈՍՅհայկական' && textLanguageIdentifier.toLowerCase().includes('armenian'))\n// );\n// Reverting to simpler check based on context providing the exact IDs.\n// If textLanguageIdentifier can be 'russian' instead of 'ТАКОЙрусский', the old logic was better.\n// For now, assuming textLanguageIdentifier will be the COSY ID from the data.\nif(isTextLanguageLatinizable){return utilGetLatinization(originalText,textLanguageIdentifier);}return originalText;},[originalText,textLanguageIdentifier,isLatinized,latinizableLanguageIds]);return displayText;};export default useLatinization;","map":{"version":3,"names":["useMemo","useLatinizationContext","getLatinization","utilGetLatinization","useLatinization","originalText","textLanguageIdentifier","isLatinized","latinizableLanguageIds","displayText","isTextLanguageLatinizable","includes"],"sources":["/workspaces/COSYlanguagesproject/src/hooks/useLatinization.js"],"sourcesContent":["import { useMemo } from 'react';\r\nimport { useLatinizationContext } from '../contexts/LatinizationContext';\r\nimport { getLatinization as utilGetLatinization } from '../utils/transliteration'; // Corrected import path\r\n\r\n/**\r\n * Custom hook to get transliterated text based on LatinizationContext.\r\n * @param {string} originalText The original text to potentially transliterate.\r\n * @param {string} textLanguageIdentifier The language identifier for the text (e.g., 'ТАКОЙрусский').\r\n * @returns {string} The transliterated text if latinization is active and applicable, otherwise original text.\r\n */\r\nconst useLatinization = (originalText, textLanguageIdentifier) => {\r\n  const { isLatinized, latinizableLanguageIds } = useLatinizationContext();\r\n\r\n  const displayText = useMemo(() => {\r\n    if (!isLatinized || !originalText || !textLanguageIdentifier) {\r\n      return originalText;\r\n    }\r\n\r\n    // Check if the text's language is in the list of latinizable languages from the context\r\n    // This logic might need to be more robust if languageIdentifier formats vary greatly.\r\n    // For now, it relies on the context's latinizableLanguageIds being the COSY-style IDs.\r\n    const isTextLanguageLatinizable = latinizableLanguageIds.includes(textLanguageIdentifier);\r\n\r\n    // The previous check was more complex:\r\n    // const isTextLanguageLatinizable = latinizableLanguageIds.some(id =>\r\n    //   textLanguageIdentifier.toLowerCase().includes(id.toLowerCase()) ||\r\n    //   (id === 'ΚΟΖΥελληνικά' && textLanguageIdentifier.toLowerCase().includes('greek')) ||\r\n    //   (id === 'ТАКОЙрусский' && textLanguageIdentifier.toLowerCase().includes('russian')) ||\r\n    //   (id === 'ԾՈՍՅհայկական' && textLanguageIdentifier.toLowerCase().includes('armenian'))\r\n    // );\r\n    // Reverting to simpler check based on context providing the exact IDs.\r\n    // If textLanguageIdentifier can be 'russian' instead of 'ТАКОЙрусский', the old logic was better.\r\n    // For now, assuming textLanguageIdentifier will be the COSY ID from the data.\r\n\r\n    if (isTextLanguageLatinizable) {\r\n      return utilGetLatinization(originalText, textLanguageIdentifier);\r\n    }\r\n\r\n    return originalText;\r\n  }, [originalText, textLanguageIdentifier, isLatinized, latinizableLanguageIds]);\r\n\r\n  return displayText;\r\n};\r\n\r\nexport default useLatinization;\r\n"],"mappings":"AAAA,OAASA,OAAO,KAAQ,OAAO,CAC/B,OAASC,sBAAsB,KAAQ,iCAAiC,CACxE,OAASC,eAAe,GAAI,CAAAC,mBAAmB,KAAQ,0BAA0B,CAAE;AAEnF;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,eAAe,CAAGA,CAACC,YAAY,CAAEC,sBAAsB,GAAK,CAChE,KAAM,CAAEC,WAAW,CAAEC,sBAAuB,CAAC,CAAGP,sBAAsB,CAAC,CAAC,CAExE,KAAM,CAAAQ,WAAW,CAAGT,OAAO,CAAC,IAAM,CAChC,GAAI,CAACO,WAAW,EAAI,CAACF,YAAY,EAAI,CAACC,sBAAsB,CAAE,CAC5D,MAAO,CAAAD,YAAY,CACrB,CAEA;AACA;AACA;AACA,KAAM,CAAAK,yBAAyB,CAAGF,sBAAsB,CAACG,QAAQ,CAACL,sBAAsB,CAAC,CAEzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,GAAII,yBAAyB,CAAE,CAC7B,MAAO,CAAAP,mBAAmB,CAACE,YAAY,CAAEC,sBAAsB,CAAC,CAClE,CAEA,MAAO,CAAAD,YAAY,CACrB,CAAC,CAAE,CAACA,YAAY,CAAEC,sBAAsB,CAAEC,WAAW,CAAEC,sBAAsB,CAAC,CAAC,CAE/E,MAAO,CAAAC,WAAW,CACpB,CAAC,CAED,cAAe,CAAAL,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}