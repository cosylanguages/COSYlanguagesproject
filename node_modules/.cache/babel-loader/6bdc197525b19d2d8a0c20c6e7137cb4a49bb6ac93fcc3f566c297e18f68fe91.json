{"ast":null,"code":"/**\r\n * Normalizes a string by converting to lowercase, removing diacritics,\r\n * and standardizing apostrophes.\r\n * @param {string} str - The string to normalize.\r\n * @returns {string} The normalized string.\r\n */\nexport function normalizeString(str) {\n  if (str === null || str === undefined) {\n    return '';\n  }\n  // Normalize to NFD (Normalization Form Canonical Decomposition) to separate base characters from diacritics\n  // Then remove diacritics (Unicode range U+0300 to U+036F)\n  let normalized = String(str).normalize('NFD').replace(/[\\u0300-\\u036f]/g, '').toLowerCase();\n  // Standardize various apostrophe-like characters to a single apostrophe\n  normalized = normalized.replace(/[’‘ʼ]/g, \"'\");\n  return normalized;\n}\n\n/**\r\n * Capitalizes the first letter of a word. Can optionally lowercase the rest of the word.\r\n * Handles specific cases like \"i\" in English.\r\n * @param {string} word - The word to capitalize.\r\n * @param {boolean} [forceLowerCaseRest=true] - Whether to convert the rest of the word to lowercase.\r\n * @param {string} [lang='COSYenglish'] - The language context, used for special casing (e.g., \"i\" in English).\r\n * @returns {string} The capitalized word.\r\n */\nexport function capitalizeWord(word, forceLowerCaseRest = true, lang = 'COSYenglish') {\n  if (typeof word !== 'string' || word.length === 0) {\n    return word;\n  }\n  // Handle \"I\" specifically for English.\n  if (lang === 'COSYenglish' && word.toLowerCase() === 'i') {\n    return 'I';\n  }\n  const firstLetter = word.charAt(0).toUpperCase();\n  const rest = forceLowerCaseRest ? word.slice(1).toLowerCase() : word.slice(1);\n  return firstLetter + rest;\n}\n\n/**\r\n * Escapes special characters in a string for use in a regular expression.\r\n * @param {string} string - The string to escape.\r\n * @returns {string} The string with regex special characters escaped.\r\n */\nexport function escapeRegExp(string) {\n  if (typeof string !== 'string') return '';\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}","map":{"version":3,"names":["normalizeString","str","undefined","normalized","String","normalize","replace","toLowerCase","capitalizeWord","word","forceLowerCaseRest","lang","length","firstLetter","charAt","toUpperCase","rest","slice","escapeRegExp","string"],"sources":["/workspaces/COSYlanguagesproject/src/utils/stringUtils.js"],"sourcesContent":["/**\r\n * Normalizes a string by converting to lowercase, removing diacritics,\r\n * and standardizing apostrophes.\r\n * @param {string} str - The string to normalize.\r\n * @returns {string} The normalized string.\r\n */\r\nexport function normalizeString(str) {\r\n  if (str === null || str === undefined) {\r\n    return '';\r\n  }\r\n  // Normalize to NFD (Normalization Form Canonical Decomposition) to separate base characters from diacritics\r\n  // Then remove diacritics (Unicode range U+0300 to U+036F)\r\n  let normalized = String(str).normalize('NFD').replace(/[\\u0300-\\u036f]/g, '').toLowerCase();\r\n  // Standardize various apostrophe-like characters to a single apostrophe\r\n  normalized = normalized.replace(/[’‘ʼ]/g, \"'\");\r\n  return normalized;\r\n}\r\n\r\n/**\r\n * Capitalizes the first letter of a word. Can optionally lowercase the rest of the word.\r\n * Handles specific cases like \"i\" in English.\r\n * @param {string} word - The word to capitalize.\r\n * @param {boolean} [forceLowerCaseRest=true] - Whether to convert the rest of the word to lowercase.\r\n * @param {string} [lang='COSYenglish'] - The language context, used for special casing (e.g., \"i\" in English).\r\n * @returns {string} The capitalized word.\r\n */\r\nexport function capitalizeWord(word, forceLowerCaseRest = true, lang = 'COSYenglish') {\r\n  if (typeof word !== 'string' || word.length === 0) {\r\n    return word;\r\n  }\r\n  // Handle \"I\" specifically for English.\r\n  if (lang === 'COSYenglish' && word.toLowerCase() === 'i') {\r\n    return 'I';\r\n  }\r\n  const firstLetter = word.charAt(0).toUpperCase();\r\n  const rest = forceLowerCaseRest ? word.slice(1).toLowerCase() : word.slice(1);\r\n  return firstLetter + rest;\r\n}\r\n\r\n/**\r\n * Escapes special characters in a string for use in a regular expression.\r\n * @param {string} string - The string to escape.\r\n * @returns {string} The string with regex special characters escaped.\r\n */\r\nexport function escapeRegExp(string) {\r\n  if (typeof string !== 'string') return '';\r\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,eAAeA,CAACC,GAAG,EAAE;EACnC,IAAIA,GAAG,KAAK,IAAI,IAAIA,GAAG,KAAKC,SAAS,EAAE;IACrC,OAAO,EAAE;EACX;EACA;EACA;EACA,IAAIC,UAAU,GAAGC,MAAM,CAACH,GAAG,CAAC,CAACI,SAAS,CAAC,KAAK,CAAC,CAACC,OAAO,CAAC,kBAAkB,EAAE,EAAE,CAAC,CAACC,WAAW,CAAC,CAAC;EAC3F;EACAJ,UAAU,GAAGA,UAAU,CAACG,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC;EAC9C,OAAOH,UAAU;AACnB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASK,cAAcA,CAACC,IAAI,EAAEC,kBAAkB,GAAG,IAAI,EAAEC,IAAI,GAAG,aAAa,EAAE;EACpF,IAAI,OAAOF,IAAI,KAAK,QAAQ,IAAIA,IAAI,CAACG,MAAM,KAAK,CAAC,EAAE;IACjD,OAAOH,IAAI;EACb;EACA;EACA,IAAIE,IAAI,KAAK,aAAa,IAAIF,IAAI,CAACF,WAAW,CAAC,CAAC,KAAK,GAAG,EAAE;IACxD,OAAO,GAAG;EACZ;EACA,MAAMM,WAAW,GAAGJ,IAAI,CAACK,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;EAChD,MAAMC,IAAI,GAAGN,kBAAkB,GAAGD,IAAI,CAACQ,KAAK,CAAC,CAAC,CAAC,CAACV,WAAW,CAAC,CAAC,GAAGE,IAAI,CAACQ,KAAK,CAAC,CAAC,CAAC;EAC7E,OAAOJ,WAAW,GAAGG,IAAI;AAC3B;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,YAAYA,CAACC,MAAM,EAAE;EACnC,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE,OAAO,EAAE;EACzC,OAAOA,MAAM,CAACb,OAAO,CAAC,qBAAqB,EAAE,MAAM,CAAC,CAAC,CAAC;AACxD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}