{"ast":null,"code":"import _objectSpread from\"/workspaces/COSYlanguagesproject/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect,useCallback}from'react';import{loadVocabularyData}from'../../../../utils/exerciseDataService';import FeedbackDisplay from'../../FeedbackDisplay';import ExerciseControls from'../../ExerciseControls';import{useLatinizationContext}from'../../../../contexts/LatinizationContext';import useLatinization from'../../../../hooks/useLatinization';import{pronounceText}from'../../../../utils/speechUtils';import{shuffleArray}from'../../../../utils/arrayUtils';import{useProgress}from'../../../../contexts/ProgressContext';import{normalizeString}from'../../../../utils/stringUtils';import{useI18n}from'../../../../i18n/I18nContext';// Assuming i18n for texts\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const BuildWordExercise=_ref=>{let{language,days,exerciseKey}=_ref;const[correctWord,setCorrectWord]=useState('');const[shuffledLetters,setShuffledLetters]=useState([]);const[wordSlots,setWordSlots]=useState([]);const[feedback,setFeedback]=useState({message:'',type:''});const[isLoading,setIsLoading]=useState(true);const[error,setError]=useState(null);const[isRevealed,setIsRevealed]=useState(false);const[isCorrectState,setIsCorrectState]=useState(false);// Renamed to avoid conflict with isCorrect variable in checkAnswer\nconst{isLatinized}=useLatinizationContext();const getLatinizedText=useLatinization;// Use the hook directly\nconst progress=useProgress();const{t}=useI18n();// For internationalized strings\nconst latinizedCorrectWord=getLatinizedText(correctWord,language);const setupNewWord=useCallback(async()=>{setIsLoading(true);setError(null);setFeedback({message:'',type:''});setIsRevealed(false);setIsCorrectState(false);// Use the new state variable\nsetCorrectWord('');setShuffledLetters([]);setWordSlots([]);try{const{data:words,error:fetchError}=await loadVocabularyData(language,days);if(fetchError){throw new Error(fetchError.message||fetchError.error||'Failed to load vocabulary words.');}if(words&&words.length>0){let wordForExercise;const singleWords=words.filter(w=>!w.includes(' ')&&w.length>2&&w.length<15);if(singleWords.length>0){wordForExercise=singleWords[Math.floor(Math.random()*singleWords.length)];}else{// Fallback if no suitable single words are found, though less ideal for \"Build Word\"\nwordForExercise=words[Math.floor(Math.random()*words.length)].split(' ')[0];if(wordForExercise.length<=2||wordForExercise.length>=15){setError(t('exercises.noSuitableWordBuild','Could not find a suitable word (3-14 letters, no spaces) for \"Build Word\" exercise.'));setIsLoading(false);return;}}setCorrectWord(wordForExercise);setWordSlots(Array(wordForExercise.length).fill({char:null,originalTileId:null}));setShuffledLetters(shuffleArray(wordForExercise.split('').map((char,index)=>({char,id:index,inSlot:false,slotIndex:null}))));}else{setError(t('exercises.noWordsFound','No vocabulary words found for the selected criteria.'));}}catch(err){console.error(\"BuildWordExercise - Error fetching word:\",err);setError(err.message||t('errors.unexpectedError','An unexpected error occurred.'));}finally{setIsLoading(false);}},[language,days,t]);useEffect(()=>{if(language&&days&&days.length>0){setupNewWord();}else{setIsLoading(false);setError(t('errors.selectLangDay',\"Please select a language and day(s).\"));}},[setupNewWord,exerciseKey,language,days,t]);const handleTileClick=tile=>{if(isRevealed||isCorrectState||tile.inSlot)return;const newWordSlots=[...wordSlots];const firstEmptySlotIndex=newWordSlots.findIndex(slot=>slot.char===null);if(firstEmptySlotIndex!==-1){newWordSlots[firstEmptySlotIndex]={char:tile.char,originalTileId:tile.id};setWordSlots(newWordSlots);const newShuffledLetters=shuffledLetters.map(t=>t.id===tile.id?_objectSpread(_objectSpread({},t),{},{inSlot:true,slotIndex:firstEmptySlotIndex}):t);setShuffledLetters(newShuffledLetters);setFeedback({message:'',type:''});}};const handleSlotClick=slotIndex=>{if(isRevealed||isCorrectState||!wordSlots[slotIndex]||wordSlots[slotIndex].char===null)return;const tileToReturnId=wordSlots[slotIndex].originalTileId;const newWordSlots=[...wordSlots];newWordSlots[slotIndex]={char:null,originalTileId:null};setWordSlots(newWordSlots);const newShuffledLetters=shuffledLetters.map(t=>t.id===tileToReturnId?_objectSpread(_objectSpread({},t),{},{inSlot:false,slotIndex:null}):t);setShuffledLetters(newShuffledLetters);setFeedback({message:'',type:''});};const checkAnswer=()=>{if(isRevealed||isCorrectState||!correctWord)return;const constructedWord=wordSlots.map(slot=>slot.char).join('');const itemId=\"buildword_\".concat(normalizeString(correctWord));const isCorrectNow=normalizeString(constructedWord)===normalizeString(correctWord);if(isCorrectNow){setFeedback({message:t('feedback.correct','Correct!'),type:'correct'});setIsCorrectState(true);progress.awardCorrectAnswer(itemId,'vocab-build-word',language);setTimeout(()=>{setupNewWord();},1500);// Auto-progress\n}else{setFeedback({message:t('feedback.incorrectKeepTrying',\"Incorrect. Keep trying or use a hint.\"),type:'incorrect'});progress.awardIncorrectAnswer(itemId,'vocab-build-word',language);}};const showHint=()=>{if(isRevealed||isCorrectState||!correctWord)return;let hintSlotIndex=-1;const currentConstructedWord=wordSlots.map(slot=>slot.char).join('');for(let i=0;i<correctWord.length;i++){if(!wordSlots[i]||!wordSlots[i].char||normalizeString(wordSlots[i].char)!==normalizeString(correctWord[i])){hintSlotIndex=i;break;}}if(hintSlotIndex===-1&&currentConstructedWord.length<correctWord.length){hintSlotIndex=currentConstructedWord.length;}if(hintSlotIndex!==-1){const correctCharForHint=correctWord[hintSlotIndex];// If the slot is filled but incorrect, clear it first\nif(wordSlots[hintSlotIndex]&&wordSlots[hintSlotIndex].char&&normalizeString(wordSlots[hintSlotIndex].char)!==normalizeString(correctCharForHint)){handleSlotClick(hintSlotIndex);// This will update slots and letters, then we re-evaluate\n// We need to re-find the tile after state update, so this hint action becomes more complex\n// For simplicity now, we'll just place it if the slot is empty or correctly filled by this hint\n}const tileToPlace=shuffledLetters.find(t=>!t.inSlot&&normalizeString(t.char)===normalizeString(correctCharForHint));if(tileToPlace){const newSlots=[...wordSlots];// Use fresh slots state in case handleSlotClick was called\nnewSlots[hintSlotIndex]={char:tileToPlace.char,originalTileId:tileToPlace.id};setWordSlots(newSlots);setShuffledLetters(prevLetters=>prevLetters.map(t=>t.id===tileToPlace.id?_objectSpread(_objectSpread({},t),{},{inSlot:true,slotIndex:hintSlotIndex}):t));setFeedback({message:t('feedback.hintLetterPlaced',\"Hint: Letter \\\"\".concat(getLatinizedText(correctCharForHint,language),\"\\\" placed.\"),{letter:getLatinizedText(correctCharForHint,language)}),type:'hint'});}else{setFeedback({message:t('feedback.hintLetterMisplaced','Hint: Could not find the next correct letter in the pool (it might be misplaced).'),type:'info'});}}else{setFeedback({message:t('feedback.hintWordCorrectOrNoMore','Word seems correct or no more hints applicable.'),type:'info'});}};const revealTheAnswer=()=>{// Renamed from revealAnswer\nif(!correctWord)return;const itemId=\"buildword_\".concat(normalizeString(correctWord));setWordSlots(correctWord.split('').map((char,index)=>({char,originalTileId:-1-index})));setShuffledLetters(shuffledLetters.map(tile=>_objectSpread(_objectSpread({},tile),{},{inSlot:true,slotIndex:correctWord.indexOf(tile.char)})));setFeedback({message:t('feedback.answerIs',\"The word is: \".concat(latinizedCorrectWord||correctWord),{answer:latinizedCorrectWord||correctWord}),type:'info'});setIsRevealed(true);setIsCorrectState(true);progress.scheduleReview(itemId,'vocab-build-word',language,false);// Ensure language is passed\nif(!isCorrectState){// Only auto-progress if not already answered correctly before reveal\nsetTimeout(()=>{setupNewWord();},2000);// Auto-progress\n}};const handleReset=()=>{if(!correctWord||isRevealed||isCorrectState)return;// Prevent reset if already solved/revealed\nsetWordSlots(Array(correctWord.length).fill({char:null,originalTileId:null}));setShuffledLetters(shuffleArray(correctWord.split('').map((char,index)=>({char,id:index,inSlot:false,slotIndex:null}))));setFeedback({message:'',type:''});// setIsRevealed(false); // Should not reset revealed status on tile reset\n// setIsCorrectState(false); // Should not reset correct status on tile reset\n};if(isLoading)return/*#__PURE__*/_jsx(\"p\",{children:t('loading.buildWordExercise','Loading word building exercise...')});if(error)return/*#__PURE__*/_jsx(FeedbackDisplay,{message:error,type:\"error\"});if(!correctWord)return/*#__PURE__*/_jsx(\"p\",{children:t('exercises.noWordForBuild','No word available for this exercise.')});const tileBaseStyle={padding:'10px 15px',margin:'5px',border:'1px solid #ccc',borderRadius:'5px',cursor:'pointer',minWidth:'40px',textAlign:'center',userSelect:'none',backgroundColor:'#f8f9fa'};const slotBaseStyle=_objectSpread(_objectSpread({},tileBaseStyle),{},{backgroundColor:'#e9ecef',cursor:'default',display:'flex',justifyContent:'center',alignItems:'center',minHeight:'48px'});return/*#__PURE__*/_jsxs(\"div\",{style:{textAlign:'center',padding:'20px',border:'1px solid #eee',borderRadius:'8px'},children:[/*#__PURE__*/_jsx(\"h3\",{children:t('titles.buildTheWord','Build the Word')}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>pronounceText(correctWord,language),disabled:!correctWord,title:t('tooltips.pronounceWord',\"Pronounce the word\"),style:{background:'none',border:'none',fontSize:'1.5rem',cursor:'pointer',verticalAlign:'middle',marginBottom:'10px'},children:\"\\uD83D\\uDD0A\"}),/*#__PURE__*/_jsx(\"div\",{id:\"word-slots\",style:{display:'flex',justifyContent:'center',marginBottom:'20px',minHeight:'50px',flexWrap:'wrap'},children:wordSlots.map((slot,index)=>/*#__PURE__*/_jsx(\"div\",{style:slotBaseStyle,onClick:()=>handleSlotClick(index),children:slot.char?/*#__PURE__*/_jsx(\"span\",{style:_objectSpread({},isLatinized&&slot.char!==getLatinizedText(slot.char,language)&&{fontStyle:'italic'}),children:getLatinizedText(slot.char,language)}):'?'},\"slot-\".concat(index)))}),/*#__PURE__*/_jsxs(\"div\",{id:\"letter-pool\",style:{display:'flex',justifyContent:'center',flexWrap:'wrap',marginBottom:'20px',minHeight:'50px',border:'1px dashed #ddd',padding:'10px',borderRadius:'5px'},children:[shuffledLetters.filter(tile=>!tile.inSlot).map(tile=>/*#__PURE__*/_jsx(\"button\",{style:tileBaseStyle,onClick:()=>handleTileClick(tile),disabled:isRevealed||isCorrectState,children:/*#__PURE__*/_jsx(\"span\",{style:_objectSpread({},isLatinized&&tile.char!==getLatinizedText(tile.char,language)&&{fontStyle:'italic'}),children:getLatinizedText(tile.char,language)})},\"tile-\".concat(tile.id))),shuffledLetters.filter(tile=>!tile.inSlot).length===0&&!isCorrectState&&/*#__PURE__*/_jsx(\"span\",{style:{color:'#888'},children:t('feedback.allLettersPlaced','All letters placed!')})]}),/*#__PURE__*/_jsx(FeedbackDisplay,{message:feedback.message,type:feedback.type,language:language}),/*#__PURE__*/_jsx(ExerciseControls,{onCheckAnswer:!isRevealed&&!isCorrectState&&wordSlots.every(s=>s.char)&&correctWord?checkAnswer:undefined,onShowHint:!isRevealed&&!isCorrectState&&correctWord?showHint:undefined,onRevealAnswer:!isRevealed&&!isCorrectState&&correctWord?revealTheAnswer:undefined// Changed to revealTheAnswer\n,onNextExercise:setupNewWord,config:{showCheck:!isRevealed&&!isCorrectState&&wordSlots.every(s=>s.char)&&!!correctWord,showHint:!isRevealed&&!isCorrectState&&!!correctWord,showReveal:!isRevealed&&!isCorrectState&&!!correctWord,showNext:true}}),/*#__PURE__*/_jsxs(\"button\",{onClick:handleReset,style:_objectSpread(_objectSpread({},tileBaseStyle),{},{backgroundColor:'#6c757d',color:'white',marginTop:'10px'}),disabled:isRevealed||isCorrectState||!correctWord,children:[\"\\uD83D\\uDD04 \",t('buttons.resetTiles','Reset Tiles')]})]});};export default BuildWordExercise;","map":{"version":3,"names":["React","useState","useEffect","useCallback","loadVocabularyData","FeedbackDisplay","ExerciseControls","useLatinizationContext","useLatinization","pronounceText","shuffleArray","useProgress","normalizeString","useI18n","jsx","_jsx","jsxs","_jsxs","BuildWordExercise","_ref","language","days","exerciseKey","correctWord","setCorrectWord","shuffledLetters","setShuffledLetters","wordSlots","setWordSlots","feedback","setFeedback","message","type","isLoading","setIsLoading","error","setError","isRevealed","setIsRevealed","isCorrectState","setIsCorrectState","isLatinized","getLatinizedText","progress","t","latinizedCorrectWord","setupNewWord","data","words","fetchError","Error","length","wordForExercise","singleWords","filter","w","includes","Math","floor","random","split","Array","fill","char","originalTileId","map","index","id","inSlot","slotIndex","err","console","handleTileClick","tile","newWordSlots","firstEmptySlotIndex","findIndex","slot","newShuffledLetters","_objectSpread","handleSlotClick","tileToReturnId","checkAnswer","constructedWord","join","itemId","concat","isCorrectNow","awardCorrectAnswer","setTimeout","awardIncorrectAnswer","showHint","hintSlotIndex","currentConstructedWord","i","correctCharForHint","tileToPlace","find","newSlots","prevLetters","letter","revealTheAnswer","indexOf","answer","scheduleReview","handleReset","children","tileBaseStyle","padding","margin","border","borderRadius","cursor","minWidth","textAlign","userSelect","backgroundColor","slotBaseStyle","display","justifyContent","alignItems","minHeight","style","onClick","disabled","title","background","fontSize","verticalAlign","marginBottom","flexWrap","fontStyle","color","onCheckAnswer","every","s","undefined","onShowHint","onRevealAnswer","onNextExercise","config","showCheck","showReveal","showNext","marginTop"],"sources":["/workspaces/COSYlanguagesproject/src/components/Freestyle/exercises/vocabulary/BuildWordExercise.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { loadVocabularyData } from '../../../../utils/exerciseDataService';\r\nimport FeedbackDisplay from '../../FeedbackDisplay';\r\nimport ExerciseControls from '../../ExerciseControls';\r\nimport { useLatinizationContext } from '../../../../contexts/LatinizationContext';\r\nimport useLatinization from '../../../../hooks/useLatinization';\r\nimport { pronounceText } from '../../../../utils/speechUtils';\r\nimport { shuffleArray } from '../../../../utils/arrayUtils';\r\nimport { useProgress } from '../../../../contexts/ProgressContext';\r\nimport { normalizeString } from '../../../../utils/stringUtils';\r\nimport { useI18n } from '../../../../i18n/I18nContext'; // Assuming i18n for texts\r\n\r\n\r\nconst BuildWordExercise = ({ language, days, exerciseKey }) => {\r\n  const [correctWord, setCorrectWord] = useState('');\r\n  const [shuffledLetters, setShuffledLetters] = useState([]); \r\n  const [wordSlots, setWordSlots] = useState([]); \r\n  \r\n  const [feedback, setFeedback] = useState({ message: '', type: '' });\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [isRevealed, setIsRevealed] = useState(false);\r\n  const [isCorrectState, setIsCorrectState] = useState(false); // Renamed to avoid conflict with isCorrect variable in checkAnswer\r\n\r\n  const { isLatinized } = useLatinizationContext();\r\n  const getLatinizedText = useLatinization; // Use the hook directly\r\n  const progress = useProgress();\r\n  const { t } = useI18n(); // For internationalized strings\r\n\r\n  const latinizedCorrectWord = getLatinizedText(correctWord, language);\r\n\r\n  const setupNewWord = useCallback(async () => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    setFeedback({ message: '', type: '' });\r\n    setIsRevealed(false);\r\n    setIsCorrectState(false); // Use the new state variable\r\n    setCorrectWord('');\r\n    setShuffledLetters([]);\r\n    setWordSlots([]);\r\n\r\n    try {\r\n      const { data: words, error: fetchError } = await loadVocabularyData(language, days);\r\n      if (fetchError) {\r\n        throw new Error(fetchError.message || fetchError.error || 'Failed to load vocabulary words.');\r\n      }\r\n      if (words && words.length > 0) {\r\n        let wordForExercise;\r\n        const singleWords = words.filter(w => !w.includes(' ') && w.length > 2 && w.length < 15);\r\n        if (singleWords.length > 0) {\r\n            wordForExercise = singleWords[Math.floor(Math.random() * singleWords.length)];\r\n        } else {\r\n            // Fallback if no suitable single words are found, though less ideal for \"Build Word\"\r\n            wordForExercise = words[Math.floor(Math.random() * words.length)].split(' ')[0]; \r\n            if(wordForExercise.length <= 2 || wordForExercise.length >=15) { \r\n                 setError(t('exercises.noSuitableWordBuild', 'Could not find a suitable word (3-14 letters, no spaces) for \"Build Word\" exercise.'));\r\n                 setIsLoading(false);\r\n                 return;\r\n            }\r\n        }\r\n        \r\n        setCorrectWord(wordForExercise);\r\n        setWordSlots(Array(wordForExercise.length).fill({ char: null, originalTileId: null }));\r\n        setShuffledLetters(\r\n          shuffleArray(\r\n            wordForExercise.split('').map((char, index) => ({ char, id: index, inSlot: false, slotIndex: null }))\r\n          )\r\n        );\r\n      } else {\r\n        setError(t('exercises.noWordsFound', 'No vocabulary words found for the selected criteria.'));\r\n      }\r\n    } catch (err) {\r\n      console.error(\"BuildWordExercise - Error fetching word:\", err);\r\n      setError(err.message || t('errors.unexpectedError', 'An unexpected error occurred.'));\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [language, days, t]);\r\n\r\n  useEffect(() => {\r\n    if (language && days && days.length > 0) {\r\n      setupNewWord();\r\n    } else {\r\n      setIsLoading(false);\r\n      setError(t('errors.selectLangDay', \"Please select a language and day(s).\"));\r\n    }\r\n  }, [setupNewWord, exerciseKey, language, days, t]);\r\n\r\n  const handleTileClick = (tile) => {\r\n    if (isRevealed || isCorrectState || tile.inSlot) return;\r\n\r\n    const newWordSlots = [...wordSlots];\r\n    const firstEmptySlotIndex = newWordSlots.findIndex(slot => slot.char === null);\r\n\r\n    if (firstEmptySlotIndex !== -1) {\r\n      newWordSlots[firstEmptySlotIndex] = { char: tile.char, originalTileId: tile.id };\r\n      setWordSlots(newWordSlots);\r\n\r\n      const newShuffledLetters = shuffledLetters.map(t =>\r\n        t.id === tile.id ? { ...t, inSlot: true, slotIndex: firstEmptySlotIndex } : t\r\n      );\r\n      setShuffledLetters(newShuffledLetters);\r\n      setFeedback({ message: '', type: '' });\r\n    }\r\n  };\r\n\r\n  const handleSlotClick = (slotIndex) => {\r\n    if (isRevealed || isCorrectState || !wordSlots[slotIndex] || wordSlots[slotIndex].char === null) return;\r\n\r\n    const tileToReturnId = wordSlots[slotIndex].originalTileId;\r\n    \r\n    const newWordSlots = [...wordSlots];\r\n    newWordSlots[slotIndex] = { char: null, originalTileId: null };\r\n    setWordSlots(newWordSlots);\r\n\r\n    const newShuffledLetters = shuffledLetters.map(t =>\r\n      t.id === tileToReturnId ? { ...t, inSlot: false, slotIndex: null } : t\r\n    );\r\n    setShuffledLetters(newShuffledLetters);\r\n    setFeedback({ message: '', type: '' });\r\n  };\r\n  \r\n  const checkAnswer = () => {\r\n    if (isRevealed || isCorrectState || !correctWord) return;\r\n    const constructedWord = wordSlots.map(slot => slot.char).join('');\r\n    const itemId = `buildword_${normalizeString(correctWord)}`;\r\n    const isCorrectNow = normalizeString(constructedWord) === normalizeString(correctWord);\r\n\r\n    if (isCorrectNow) {\r\n      setFeedback({ message: t('feedback.correct', 'Correct!'), type: 'correct' });\r\n      setIsCorrectState(true);\r\n      progress.awardCorrectAnswer(itemId, 'vocab-build-word', language);\r\n      setTimeout(() => {\r\n        setupNewWord();\r\n      }, 1500); // Auto-progress\r\n    } else {\r\n      setFeedback({ message: t('feedback.incorrectKeepTrying', `Incorrect. Keep trying or use a hint.`), type: 'incorrect' });\r\n      progress.awardIncorrectAnswer(itemId, 'vocab-build-word', language);\r\n    }\r\n  };\r\n\r\n  const showHint = () => {\r\n    if (isRevealed || isCorrectState || !correctWord) return;\r\n    let hintSlotIndex = -1;\r\n    const currentConstructedWord = wordSlots.map(slot => slot.char).join('');\r\n\r\n    for (let i = 0; i < correctWord.length; i++) {\r\n      if (!wordSlots[i] || !wordSlots[i].char || normalizeString(wordSlots[i].char) !== normalizeString(correctWord[i])) {\r\n        hintSlotIndex = i;\r\n        break;\r\n      }\r\n    }\r\n    if (hintSlotIndex === -1 && currentConstructedWord.length < correctWord.length) {\r\n        hintSlotIndex = currentConstructedWord.length;\r\n    }\r\n\r\n    if (hintSlotIndex !== -1) {\r\n      const correctCharForHint = correctWord[hintSlotIndex];\r\n      // If the slot is filled but incorrect, clear it first\r\n      if (wordSlots[hintSlotIndex] && wordSlots[hintSlotIndex].char && normalizeString(wordSlots[hintSlotIndex].char) !== normalizeString(correctCharForHint)) {\r\n        handleSlotClick(hintSlotIndex); // This will update slots and letters, then we re-evaluate\r\n         // We need to re-find the tile after state update, so this hint action becomes more complex\r\n         // For simplicity now, we'll just place it if the slot is empty or correctly filled by this hint\r\n      }\r\n      \r\n      const tileToPlace = shuffledLetters.find(t => !t.inSlot && normalizeString(t.char) === normalizeString(correctCharForHint));\r\n      if (tileToPlace) {\r\n        const newSlots = [...wordSlots]; // Use fresh slots state in case handleSlotClick was called\r\n        newSlots[hintSlotIndex] = { char: tileToPlace.char, originalTileId: tileToPlace.id };\r\n        setWordSlots(newSlots);\r\n        setShuffledLetters(prevLetters => prevLetters.map(t => t.id === tileToPlace.id ? {...t, inSlot:true, slotIndex: hintSlotIndex} : t));\r\n        setFeedback({ message: t('feedback.hintLetterPlaced', `Hint: Letter \"${getLatinizedText(correctCharForHint, language)}\" placed.`, { letter: getLatinizedText(correctCharForHint, language) }), type: 'hint' });\r\n      } else {\r\n         setFeedback({ message: t('feedback.hintLetterMisplaced', 'Hint: Could not find the next correct letter in the pool (it might be misplaced).'), type: 'info' });\r\n      }\r\n    } else {\r\n      setFeedback({ message: t('feedback.hintWordCorrectOrNoMore', 'Word seems correct or no more hints applicable.'), type: 'info' });\r\n    }\r\n  };\r\n  \r\n  const revealTheAnswer = () => { // Renamed from revealAnswer\r\n    if (!correctWord) return;\r\n    const itemId = `buildword_${normalizeString(correctWord)}`;\r\n    setWordSlots(correctWord.split('').map((char, index) => ({ char, originalTileId: -1-index }))); \r\n    setShuffledLetters(shuffledLetters.map(tile => ({...tile, inSlot: true, slotIndex: correctWord.indexOf(tile.char) }))); \r\n    setFeedback({ message: t('feedback.answerIs', `The word is: ${latinizedCorrectWord || correctWord}`, { answer: latinizedCorrectWord || correctWord }), type: 'info' });\r\n    setIsRevealed(true);\r\n    setIsCorrectState(true); \r\n    progress.scheduleReview(itemId, 'vocab-build-word', language, false); // Ensure language is passed\r\n    if(!isCorrectState) { // Only auto-progress if not already answered correctly before reveal\r\n        setTimeout(() => {\r\n            setupNewWord();\r\n        }, 2000); // Auto-progress\r\n    }\r\n  };\r\n\r\n  const handleReset = () => {\r\n     if (!correctWord || isRevealed || isCorrectState) return; // Prevent reset if already solved/revealed\r\n     setWordSlots(Array(correctWord.length).fill({ char: null, originalTileId: null }));\r\n     setShuffledLetters(\r\n          shuffleArray( \r\n            correctWord.split('').map((char, index) => ({ char, id: index, inSlot: false, slotIndex: null }))\r\n          )\r\n     );\r\n     setFeedback({ message: '', type: '' });\r\n     // setIsRevealed(false); // Should not reset revealed status on tile reset\r\n     // setIsCorrectState(false); // Should not reset correct status on tile reset\r\n  };\r\n\r\n  if (isLoading) return <p>{t('loading.buildWordExercise', 'Loading word building exercise...')}</p>;\r\n  if (error) return <FeedbackDisplay message={error} type=\"error\" />;\r\n  if (!correctWord) return <p>{t('exercises.noWordForBuild', 'No word available for this exercise.')}</p>;\r\n\r\n  const tileBaseStyle = { padding: '10px 15px', margin: '5px', border: '1px solid #ccc', borderRadius: '5px', cursor: 'pointer', minWidth: '40px', textAlign: 'center', userSelect: 'none', backgroundColor: '#f8f9fa' };\r\n  const slotBaseStyle = { ...tileBaseStyle, backgroundColor: '#e9ecef', cursor: 'default', display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '48px' };\r\n\r\n  return (\r\n    <div style={{ textAlign: 'center', padding: '20px', border: '1px solid #eee', borderRadius: '8px' }}>\r\n      <h3>{t('titles.buildTheWord', 'Build the Word')}</h3>\r\n      <button onClick={() => pronounceText(correctWord, language)} disabled={!correctWord} title={t('tooltips.pronounceWord', \"Pronounce the word\")} style={{background:'none', border:'none', fontSize:'1.5rem', cursor:'pointer', verticalAlign:'middle', marginBottom:'10px'}}>🔊</button>\r\n      <div id=\"word-slots\" style={{ display: 'flex', justifyContent: 'center', marginBottom: '20px', minHeight: '50px', flexWrap: 'wrap' }}>\r\n        {wordSlots.map((slot, index) => (\r\n          <div key={`slot-${index}`} style={slotBaseStyle} onClick={() => handleSlotClick(index)}>\r\n            {slot.char ? <span style={{...(isLatinized && slot.char !== getLatinizedText(slot.char, language) && {fontStyle:'italic'})}}>{getLatinizedText(slot.char, language)}</span> : '?'}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div id=\"letter-pool\" style={{ display: 'flex', justifyContent: 'center', flexWrap: 'wrap', marginBottom: '20px', minHeight: '50px', border: '1px dashed #ddd', padding: '10px', borderRadius: '5px' }}>\r\n        {shuffledLetters.filter(tile => !tile.inSlot).map(tile => (\r\n          <button \r\n            key={`tile-${tile.id}`} \r\n            style={tileBaseStyle} \r\n            onClick={() => handleTileClick(tile)}\r\n            disabled={isRevealed || isCorrectState}\r\n          >\r\n            <span style={{...(isLatinized && tile.char !== getLatinizedText(tile.char, language) && {fontStyle:'italic'})}}>{getLatinizedText(tile.char, language)}</span>\r\n          </button>\r\n        ))}\r\n         {shuffledLetters.filter(tile => !tile.inSlot).length === 0 && !isCorrectState && <span style={{color: '#888'}}>{t('feedback.allLettersPlaced', 'All letters placed!')}</span>}\r\n      </div>\r\n      <FeedbackDisplay message={feedback.message} type={feedback.type} language={language} />\r\n      <ExerciseControls\r\n        onCheckAnswer={!isRevealed && !isCorrectState && wordSlots.every(s => s.char) && correctWord ? checkAnswer : undefined}\r\n        onShowHint={!isRevealed && !isCorrectState && correctWord ? showHint : undefined}\r\n        onRevealAnswer={!isRevealed && !isCorrectState && correctWord ? revealTheAnswer : undefined} // Changed to revealTheAnswer\r\n        onNextExercise={setupNewWord} \r\n        config={{ \r\n            showCheck: !isRevealed && !isCorrectState && wordSlots.every(s => s.char) && !!correctWord, \r\n            showHint: !isRevealed && !isCorrectState && !!correctWord, \r\n            showReveal: !isRevealed && !isCorrectState && !!correctWord,\r\n            showNext: true, \r\n        }}\r\n      />\r\n       <button onClick={handleReset} style={{...tileBaseStyle, backgroundColor: '#6c757d', color: 'white', marginTop:'10px'}} disabled={isRevealed || isCorrectState || !correctWord}>\r\n        🔄 {t('buttons.resetTiles', 'Reset Tiles')}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BuildWordExercise;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}