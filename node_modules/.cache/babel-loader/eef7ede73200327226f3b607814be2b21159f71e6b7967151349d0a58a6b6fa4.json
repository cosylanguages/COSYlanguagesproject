{"ast":null,"code":"var _jsxFileName = \"/workspaces/COSYlanguagesproject/src/components/Freestyle/exercises/vocabulary/BuildWordExercise.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { loadVocabularyData } from '../../../../utils/exerciseDataService';\nimport FeedbackDisplay from '../../FeedbackDisplay';\nimport ExerciseControls from '../../ExerciseControls';\nimport { useLatinizationContext } from '../../../../contexts/LatinizationContext';\nimport useLatinization from '../../../../hooks/useLatinization';\nimport { pronounceText } from '../../../../utils/speechUtils';\nimport { shuffleArray } from '../../../../utils/arrayUtils';\nimport { useProgress } from '../../../../contexts/ProgressContext';\nimport { normalizeString } from '../../../../utils/stringUtils';\nimport { useI18n } from '../../../../i18n/I18nContext'; // Assuming i18n for texts\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BuildWordExercise = ({\n  language,\n  days,\n  exerciseKey\n}) => {\n  _s();\n  const [correctWord, setCorrectWord] = useState('');\n  const [shuffledLetters, setShuffledLetters] = useState([]);\n  const [wordSlots, setWordSlots] = useState([]);\n  const [feedback, setFeedback] = useState({\n    message: '',\n    type: ''\n  });\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [isRevealed, setIsRevealed] = useState(false);\n  const [isCorrectState, setIsCorrectState] = useState(false); // Renamed to avoid conflict with isCorrect variable in checkAnswer\n\n  const {\n    isLatinized\n  } = useLatinizationContext();\n  const getLatinizedText = useLatinization; // Use the hook directly\n  const progress = useProgress();\n  const {\n    t\n  } = useI18n(); // For internationalized strings\n\n  const latinizedCorrectWord = getLatinizedText(correctWord, language);\n  const setupNewWord = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    setFeedback({\n      message: '',\n      type: ''\n    });\n    setIsRevealed(false);\n    setIsCorrectState(false); // Use the new state variable\n    setCorrectWord('');\n    setShuffledLetters([]);\n    setWordSlots([]);\n    try {\n      const {\n        data: words,\n        error: fetchError\n      } = await loadVocabularyData(language, days);\n      if (fetchError) {\n        throw new Error(fetchError.message || fetchError.error || 'Failed to load vocabulary words.');\n      }\n      if (words && words.length > 0) {\n        let wordForExercise;\n        const singleWords = words.filter(w => !w.includes(' ') && w.length > 2 && w.length < 15);\n        if (singleWords.length > 0) {\n          wordForExercise = singleWords[Math.floor(Math.random() * singleWords.length)];\n        } else {\n          // Fallback if no suitable single words are found, though less ideal for \"Build Word\"\n          wordForExercise = words[Math.floor(Math.random() * words.length)].split(' ')[0];\n          if (wordForExercise.length <= 2 || wordForExercise.length >= 15) {\n            setError(t('exercises.noSuitableWordBuild', 'Could not find a suitable word (3-14 letters, no spaces) for \"Build Word\" exercise.'));\n            setIsLoading(false);\n            return;\n          }\n        }\n        setCorrectWord(wordForExercise);\n        setWordSlots(Array(wordForExercise.length).fill({\n          char: null,\n          originalTileId: null\n        }));\n        setShuffledLetters(shuffleArray(wordForExercise.split('').map((char, index) => ({\n          char,\n          id: index,\n          inSlot: false,\n          slotIndex: null\n        }))));\n      } else {\n        setError(t('exercises.noWordsFound', 'No vocabulary words found for the selected criteria.'));\n      }\n    } catch (err) {\n      console.error(\"BuildWordExercise - Error fetching word:\", err);\n      setError(err.message || t('errors.unexpectedError', 'An unexpected error occurred.'));\n    } finally {\n      setIsLoading(false);\n    }\n  }, [language, days, t]);\n  useEffect(() => {\n    if (language && days && days.length > 0) {\n      setupNewWord();\n    } else {\n      setIsLoading(false);\n      setError(t('errors.selectLangDay', \"Please select a language and day(s).\"));\n    }\n  }, [setupNewWord, exerciseKey, language, days, t]);\n  const handleTileClick = tile => {\n    if (isRevealed || isCorrectState || tile.inSlot) return;\n    const newWordSlots = [...wordSlots];\n    const firstEmptySlotIndex = newWordSlots.findIndex(slot => slot.char === null);\n    if (firstEmptySlotIndex !== -1) {\n      newWordSlots[firstEmptySlotIndex] = {\n        char: tile.char,\n        originalTileId: tile.id\n      };\n      setWordSlots(newWordSlots);\n      const newShuffledLetters = shuffledLetters.map(t => t.id === tile.id ? {\n        ...t,\n        inSlot: true,\n        slotIndex: firstEmptySlotIndex\n      } : t);\n      setShuffledLetters(newShuffledLetters);\n      setFeedback({\n        message: '',\n        type: ''\n      });\n    }\n  };\n  const handleSlotClick = slotIndex => {\n    if (isRevealed || isCorrectState || !wordSlots[slotIndex] || wordSlots[slotIndex].char === null) return;\n    const tileToReturnId = wordSlots[slotIndex].originalTileId;\n    const newWordSlots = [...wordSlots];\n    newWordSlots[slotIndex] = {\n      char: null,\n      originalTileId: null\n    };\n    setWordSlots(newWordSlots);\n    const newShuffledLetters = shuffledLetters.map(t => t.id === tileToReturnId ? {\n      ...t,\n      inSlot: false,\n      slotIndex: null\n    } : t);\n    setShuffledLetters(newShuffledLetters);\n    setFeedback({\n      message: '',\n      type: ''\n    });\n  };\n  const checkAnswer = () => {\n    if (isRevealed || isCorrectState || !correctWord) return;\n    const constructedWord = wordSlots.map(slot => slot.char).join('');\n    const itemId = `buildword_${normalizeString(correctWord)}`;\n    const isCorrectNow = normalizeString(constructedWord) === normalizeString(correctWord);\n    if (isCorrectNow) {\n      setFeedback({\n        message: t('feedback.correct', 'Correct!'),\n        type: 'correct'\n      });\n      setIsCorrectState(true);\n      progress.awardCorrectAnswer(itemId, 'vocab-build-word', language);\n      setTimeout(() => {\n        setupNewWord();\n      }, 1500); // Auto-progress\n    } else {\n      setFeedback({\n        message: t('feedback.incorrectKeepTrying', `Incorrect. Keep trying or use a hint.`),\n        type: 'incorrect'\n      });\n      progress.awardIncorrectAnswer(itemId, 'vocab-build-word', language);\n    }\n  };\n  const showHint = () => {\n    if (isRevealed || isCorrectState || !correctWord) return;\n    let hintSlotIndex = -1;\n    const currentConstructedWord = wordSlots.map(slot => slot.char).join('');\n    for (let i = 0; i < correctWord.length; i++) {\n      if (!wordSlots[i] || !wordSlots[i].char || normalizeString(wordSlots[i].char) !== normalizeString(correctWord[i])) {\n        hintSlotIndex = i;\n        break;\n      }\n    }\n    if (hintSlotIndex === -1 && currentConstructedWord.length < correctWord.length) {\n      hintSlotIndex = currentConstructedWord.length;\n    }\n    if (hintSlotIndex !== -1) {\n      const correctCharForHint = correctWord[hintSlotIndex];\n      // If the slot is filled but incorrect, clear it first\n      if (wordSlots[hintSlotIndex] && wordSlots[hintSlotIndex].char && normalizeString(wordSlots[hintSlotIndex].char) !== normalizeString(correctCharForHint)) {\n        handleSlotClick(hintSlotIndex); // This will update slots and letters, then we re-evaluate\n        // We need to re-find the tile after state update, so this hint action becomes more complex\n        // For simplicity now, we'll just place it if the slot is empty or correctly filled by this hint\n      }\n      const tileToPlace = shuffledLetters.find(t => !t.inSlot && normalizeString(t.char) === normalizeString(correctCharForHint));\n      if (tileToPlace) {\n        const newSlots = [...wordSlots]; // Use fresh slots state in case handleSlotClick was called\n        newSlots[hintSlotIndex] = {\n          char: tileToPlace.char,\n          originalTileId: tileToPlace.id\n        };\n        setWordSlots(newSlots);\n        setShuffledLetters(prevLetters => prevLetters.map(t => t.id === tileToPlace.id ? {\n          ...t,\n          inSlot: true,\n          slotIndex: hintSlotIndex\n        } : t));\n        setFeedback({\n          message: t('feedback.hintLetterPlaced', `Hint: Letter \"${getLatinizedText(correctCharForHint, language)}\" placed.`, {\n            letter: getLatinizedText(correctCharForHint, language)\n          }),\n          type: 'hint'\n        });\n      } else {\n        setFeedback({\n          message: t('feedback.hintLetterMisplaced', 'Hint: Could not find the next correct letter in the pool (it might be misplaced).'),\n          type: 'info'\n        });\n      }\n    } else {\n      setFeedback({\n        message: t('feedback.hintWordCorrectOrNoMore', 'Word seems correct or no more hints applicable.'),\n        type: 'info'\n      });\n    }\n  };\n  const revealTheAnswer = () => {\n    // Renamed from revealAnswer\n    if (!correctWord) return;\n    const itemId = `buildword_${normalizeString(correctWord)}`;\n    setWordSlots(correctWord.split('').map((char, index) => ({\n      char,\n      originalTileId: -1 - index\n    })));\n    setShuffledLetters(shuffledLetters.map(tile => ({\n      ...tile,\n      inSlot: true,\n      slotIndex: correctWord.indexOf(tile.char)\n    })));\n    setFeedback({\n      message: t('feedback.answerIs', `The word is: ${latinizedCorrectWord || correctWord}`, {\n        answer: latinizedCorrectWord || correctWord\n      }),\n      type: 'info'\n    });\n    setIsRevealed(true);\n    setIsCorrectState(true);\n    progress.scheduleReview(itemId, 'vocab-build-word', language, false); // Ensure language is passed\n    if (!isCorrectState) {\n      // Only auto-progress if not already answered correctly before reveal\n      setTimeout(() => {\n        setupNewWord();\n      }, 2000); // Auto-progress\n    }\n  };\n  const handleReset = () => {\n    if (!correctWord || isRevealed || isCorrectState) return; // Prevent reset if already solved/revealed\n    setWordSlots(Array(correctWord.length).fill({\n      char: null,\n      originalTileId: null\n    }));\n    setShuffledLetters(shuffleArray(correctWord.split('').map((char, index) => ({\n      char,\n      id: index,\n      inSlot: false,\n      slotIndex: null\n    }))));\n    setFeedback({\n      message: '',\n      type: ''\n    });\n    // setIsRevealed(false); // Should not reset revealed status on tile reset\n    // setIsCorrectState(false); // Should not reset correct status on tile reset\n  };\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: t('loading.buildWordExercise', 'Loading word building exercise...')\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 210,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(FeedbackDisplay, {\n    message: error,\n    type: \"error\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 211,\n    columnNumber: 21\n  }, this);\n  if (!correctWord) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: t('exercises.noWordForBuild', 'No word available for this exercise.')\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 212,\n    columnNumber: 28\n  }, this);\n  const tileBaseStyle = {\n    padding: '10px 15px',\n    margin: '5px',\n    border: '1px solid #ccc',\n    borderRadius: '5px',\n    cursor: 'pointer',\n    minWidth: '40px',\n    textAlign: 'center',\n    userSelect: 'none',\n    backgroundColor: '#f8f9fa'\n  };\n  const slotBaseStyle = {\n    ...tileBaseStyle,\n    backgroundColor: '#e9ecef',\n    cursor: 'default',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    minHeight: '48px'\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: 'center',\n      padding: '20px',\n      border: '1px solid #eee',\n      borderRadius: '8px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: t('titles.buildTheWord', 'Build the Word')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => pronounceText(correctWord, language),\n      disabled: !correctWord,\n      title: t('tooltips.pronounceWord', \"Pronounce the word\"),\n      style: {\n        background: 'none',\n        border: 'none',\n        fontSize: '1.5rem',\n        cursor: 'pointer',\n        verticalAlign: 'middle',\n        marginBottom: '10px'\n      },\n      children: \"\\uD83D\\uDD0A\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"word-slots\",\n      style: {\n        display: 'flex',\n        justifyContent: 'center',\n        marginBottom: '20px',\n        minHeight: '50px',\n        flexWrap: 'wrap'\n      },\n      children: wordSlots.map((slot, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: slotBaseStyle,\n        onClick: () => handleSlotClick(index),\n        children: slot.char ? /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            ...(isLatinized && slot.char !== getLatinizedText(slot.char, language) && {\n              fontStyle: 'italic'\n            })\n          },\n          children: getLatinizedText(slot.char, language)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 26\n        }, this) : '?'\n      }, `slot-${index}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"letter-pool\",\n      style: {\n        display: 'flex',\n        justifyContent: 'center',\n        flexWrap: 'wrap',\n        marginBottom: '20px',\n        minHeight: '50px',\n        border: '1px dashed #ddd',\n        padding: '10px',\n        borderRadius: '5px'\n      },\n      children: [shuffledLetters.filter(tile => !tile.inSlot).map(tile => /*#__PURE__*/_jsxDEV(\"button\", {\n        style: tileBaseStyle,\n        onClick: () => handleTileClick(tile),\n        disabled: isRevealed || isCorrectState,\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            ...(isLatinized && tile.char !== getLatinizedText(tile.char, language) && {\n              fontStyle: 'italic'\n            })\n          },\n          children: getLatinizedText(tile.char, language)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 13\n        }, this)\n      }, `tile-${tile.id}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 11\n      }, this)), shuffledLetters.filter(tile => !tile.inSlot).length === 0 && !isCorrectState && /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          color: '#888'\n        },\n        children: t('feedback.allLettersPlaced', 'All letters placed!')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 91\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FeedbackDisplay, {\n      message: feedback.message,\n      type: feedback.type,\n      language: language\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ExerciseControls, {\n      onCheckAnswer: !isRevealed && !isCorrectState && wordSlots.every(s => s.char) && correctWord ? checkAnswer : undefined,\n      onShowHint: !isRevealed && !isCorrectState && correctWord ? showHint : undefined,\n      onRevealAnswer: !isRevealed && !isCorrectState && correctWord ? revealTheAnswer : undefined // Changed to revealTheAnswer\n      ,\n      onNextExercise: setupNewWord,\n      config: {\n        showCheck: !isRevealed && !isCorrectState && wordSlots.every(s => s.char) && !!correctWord,\n        showHint: !isRevealed && !isCorrectState && !!correctWord,\n        showReveal: !isRevealed && !isCorrectState && !!correctWord,\n        showNext: true\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleReset,\n      style: {\n        ...tileBaseStyle,\n        backgroundColor: '#6c757d',\n        color: 'white',\n        marginTop: '10px'\n      },\n      disabled: isRevealed || isCorrectState || !correctWord,\n      children: [\"\\uD83D\\uDD04 \", t('buttons.resetTiles', 'Reset Tiles')]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 8\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 218,\n    columnNumber: 5\n  }, this);\n};\n_s(BuildWordExercise, \"+9cEbg/e/m3ODB4YezVxpHZWpuw=\", false, function () {\n  return [useLatinizationContext, useProgress, useI18n];\n});\n_c = BuildWordExercise;\nexport default BuildWordExercise;\nvar _c;\n$RefreshReg$(_c, \"BuildWordExercise\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","loadVocabularyData","FeedbackDisplay","ExerciseControls","useLatinizationContext","useLatinization","pronounceText","shuffleArray","useProgress","normalizeString","useI18n","jsxDEV","_jsxDEV","BuildWordExercise","language","days","exerciseKey","_s","correctWord","setCorrectWord","shuffledLetters","setShuffledLetters","wordSlots","setWordSlots","feedback","setFeedback","message","type","isLoading","setIsLoading","error","setError","isRevealed","setIsRevealed","isCorrectState","setIsCorrectState","isLatinized","getLatinizedText","progress","t","latinizedCorrectWord","setupNewWord","data","words","fetchError","Error","length","wordForExercise","singleWords","filter","w","includes","Math","floor","random","split","Array","fill","char","originalTileId","map","index","id","inSlot","slotIndex","err","console","handleTileClick","tile","newWordSlots","firstEmptySlotIndex","findIndex","slot","newShuffledLetters","handleSlotClick","tileToReturnId","checkAnswer","constructedWord","join","itemId","isCorrectNow","awardCorrectAnswer","setTimeout","awardIncorrectAnswer","showHint","hintSlotIndex","currentConstructedWord","i","correctCharForHint","tileToPlace","find","newSlots","prevLetters","letter","revealTheAnswer","indexOf","answer","scheduleReview","handleReset","children","fileName","_jsxFileName","lineNumber","columnNumber","tileBaseStyle","padding","margin","border","borderRadius","cursor","minWidth","textAlign","userSelect","backgroundColor","slotBaseStyle","display","justifyContent","alignItems","minHeight","style","onClick","disabled","title","background","fontSize","verticalAlign","marginBottom","flexWrap","fontStyle","color","onCheckAnswer","every","s","undefined","onShowHint","onRevealAnswer","onNextExercise","config","showCheck","showReveal","showNext","marginTop","_c","$RefreshReg$"],"sources":["/workspaces/COSYlanguagesproject/src/components/Freestyle/exercises/vocabulary/BuildWordExercise.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { loadVocabularyData } from '../../../../utils/exerciseDataService';\r\nimport FeedbackDisplay from '../../FeedbackDisplay';\r\nimport ExerciseControls from '../../ExerciseControls';\r\nimport { useLatinizationContext } from '../../../../contexts/LatinizationContext';\r\nimport useLatinization from '../../../../hooks/useLatinization';\r\nimport { pronounceText } from '../../../../utils/speechUtils';\r\nimport { shuffleArray } from '../../../../utils/arrayUtils';\r\nimport { useProgress } from '../../../../contexts/ProgressContext';\r\nimport { normalizeString } from '../../../../utils/stringUtils';\r\nimport { useI18n } from '../../../../i18n/I18nContext'; // Assuming i18n for texts\r\n\r\n\r\nconst BuildWordExercise = ({ language, days, exerciseKey }) => {\r\n  const [correctWord, setCorrectWord] = useState('');\r\n  const [shuffledLetters, setShuffledLetters] = useState([]); \r\n  const [wordSlots, setWordSlots] = useState([]); \r\n  \r\n  const [feedback, setFeedback] = useState({ message: '', type: '' });\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [isRevealed, setIsRevealed] = useState(false);\r\n  const [isCorrectState, setIsCorrectState] = useState(false); // Renamed to avoid conflict with isCorrect variable in checkAnswer\r\n\r\n  const { isLatinized } = useLatinizationContext();\r\n  const getLatinizedText = useLatinization; // Use the hook directly\r\n  const progress = useProgress();\r\n  const { t } = useI18n(); // For internationalized strings\r\n\r\n  const latinizedCorrectWord = getLatinizedText(correctWord, language);\r\n\r\n  const setupNewWord = useCallback(async () => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    setFeedback({ message: '', type: '' });\r\n    setIsRevealed(false);\r\n    setIsCorrectState(false); // Use the new state variable\r\n    setCorrectWord('');\r\n    setShuffledLetters([]);\r\n    setWordSlots([]);\r\n\r\n    try {\r\n      const { data: words, error: fetchError } = await loadVocabularyData(language, days);\r\n      if (fetchError) {\r\n        throw new Error(fetchError.message || fetchError.error || 'Failed to load vocabulary words.');\r\n      }\r\n      if (words && words.length > 0) {\r\n        let wordForExercise;\r\n        const singleWords = words.filter(w => !w.includes(' ') && w.length > 2 && w.length < 15);\r\n        if (singleWords.length > 0) {\r\n            wordForExercise = singleWords[Math.floor(Math.random() * singleWords.length)];\r\n        } else {\r\n            // Fallback if no suitable single words are found, though less ideal for \"Build Word\"\r\n            wordForExercise = words[Math.floor(Math.random() * words.length)].split(' ')[0]; \r\n            if(wordForExercise.length <= 2 || wordForExercise.length >=15) { \r\n                 setError(t('exercises.noSuitableWordBuild', 'Could not find a suitable word (3-14 letters, no spaces) for \"Build Word\" exercise.'));\r\n                 setIsLoading(false);\r\n                 return;\r\n            }\r\n        }\r\n        \r\n        setCorrectWord(wordForExercise);\r\n        setWordSlots(Array(wordForExercise.length).fill({ char: null, originalTileId: null }));\r\n        setShuffledLetters(\r\n          shuffleArray(\r\n            wordForExercise.split('').map((char, index) => ({ char, id: index, inSlot: false, slotIndex: null }))\r\n          )\r\n        );\r\n      } else {\r\n        setError(t('exercises.noWordsFound', 'No vocabulary words found for the selected criteria.'));\r\n      }\r\n    } catch (err) {\r\n      console.error(\"BuildWordExercise - Error fetching word:\", err);\r\n      setError(err.message || t('errors.unexpectedError', 'An unexpected error occurred.'));\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [language, days, t]);\r\n\r\n  useEffect(() => {\r\n    if (language && days && days.length > 0) {\r\n      setupNewWord();\r\n    } else {\r\n      setIsLoading(false);\r\n      setError(t('errors.selectLangDay', \"Please select a language and day(s).\"));\r\n    }\r\n  }, [setupNewWord, exerciseKey, language, days, t]);\r\n\r\n  const handleTileClick = (tile) => {\r\n    if (isRevealed || isCorrectState || tile.inSlot) return;\r\n\r\n    const newWordSlots = [...wordSlots];\r\n    const firstEmptySlotIndex = newWordSlots.findIndex(slot => slot.char === null);\r\n\r\n    if (firstEmptySlotIndex !== -1) {\r\n      newWordSlots[firstEmptySlotIndex] = { char: tile.char, originalTileId: tile.id };\r\n      setWordSlots(newWordSlots);\r\n\r\n      const newShuffledLetters = shuffledLetters.map(t =>\r\n        t.id === tile.id ? { ...t, inSlot: true, slotIndex: firstEmptySlotIndex } : t\r\n      );\r\n      setShuffledLetters(newShuffledLetters);\r\n      setFeedback({ message: '', type: '' });\r\n    }\r\n  };\r\n\r\n  const handleSlotClick = (slotIndex) => {\r\n    if (isRevealed || isCorrectState || !wordSlots[slotIndex] || wordSlots[slotIndex].char === null) return;\r\n\r\n    const tileToReturnId = wordSlots[slotIndex].originalTileId;\r\n    \r\n    const newWordSlots = [...wordSlots];\r\n    newWordSlots[slotIndex] = { char: null, originalTileId: null };\r\n    setWordSlots(newWordSlots);\r\n\r\n    const newShuffledLetters = shuffledLetters.map(t =>\r\n      t.id === tileToReturnId ? { ...t, inSlot: false, slotIndex: null } : t\r\n    );\r\n    setShuffledLetters(newShuffledLetters);\r\n    setFeedback({ message: '', type: '' });\r\n  };\r\n  \r\n  const checkAnswer = () => {\r\n    if (isRevealed || isCorrectState || !correctWord) return;\r\n    const constructedWord = wordSlots.map(slot => slot.char).join('');\r\n    const itemId = `buildword_${normalizeString(correctWord)}`;\r\n    const isCorrectNow = normalizeString(constructedWord) === normalizeString(correctWord);\r\n\r\n    if (isCorrectNow) {\r\n      setFeedback({ message: t('feedback.correct', 'Correct!'), type: 'correct' });\r\n      setIsCorrectState(true);\r\n      progress.awardCorrectAnswer(itemId, 'vocab-build-word', language);\r\n      setTimeout(() => {\r\n        setupNewWord();\r\n      }, 1500); // Auto-progress\r\n    } else {\r\n      setFeedback({ message: t('feedback.incorrectKeepTrying', `Incorrect. Keep trying or use a hint.`), type: 'incorrect' });\r\n      progress.awardIncorrectAnswer(itemId, 'vocab-build-word', language);\r\n    }\r\n  };\r\n\r\n  const showHint = () => {\r\n    if (isRevealed || isCorrectState || !correctWord) return;\r\n    let hintSlotIndex = -1;\r\n    const currentConstructedWord = wordSlots.map(slot => slot.char).join('');\r\n\r\n    for (let i = 0; i < correctWord.length; i++) {\r\n      if (!wordSlots[i] || !wordSlots[i].char || normalizeString(wordSlots[i].char) !== normalizeString(correctWord[i])) {\r\n        hintSlotIndex = i;\r\n        break;\r\n      }\r\n    }\r\n    if (hintSlotIndex === -1 && currentConstructedWord.length < correctWord.length) {\r\n        hintSlotIndex = currentConstructedWord.length;\r\n    }\r\n\r\n    if (hintSlotIndex !== -1) {\r\n      const correctCharForHint = correctWord[hintSlotIndex];\r\n      // If the slot is filled but incorrect, clear it first\r\n      if (wordSlots[hintSlotIndex] && wordSlots[hintSlotIndex].char && normalizeString(wordSlots[hintSlotIndex].char) !== normalizeString(correctCharForHint)) {\r\n        handleSlotClick(hintSlotIndex); // This will update slots and letters, then we re-evaluate\r\n         // We need to re-find the tile after state update, so this hint action becomes more complex\r\n         // For simplicity now, we'll just place it if the slot is empty or correctly filled by this hint\r\n      }\r\n      \r\n      const tileToPlace = shuffledLetters.find(t => !t.inSlot && normalizeString(t.char) === normalizeString(correctCharForHint));\r\n      if (tileToPlace) {\r\n        const newSlots = [...wordSlots]; // Use fresh slots state in case handleSlotClick was called\r\n        newSlots[hintSlotIndex] = { char: tileToPlace.char, originalTileId: tileToPlace.id };\r\n        setWordSlots(newSlots);\r\n        setShuffledLetters(prevLetters => prevLetters.map(t => t.id === tileToPlace.id ? {...t, inSlot:true, slotIndex: hintSlotIndex} : t));\r\n        setFeedback({ message: t('feedback.hintLetterPlaced', `Hint: Letter \"${getLatinizedText(correctCharForHint, language)}\" placed.`, { letter: getLatinizedText(correctCharForHint, language) }), type: 'hint' });\r\n      } else {\r\n         setFeedback({ message: t('feedback.hintLetterMisplaced', 'Hint: Could not find the next correct letter in the pool (it might be misplaced).'), type: 'info' });\r\n      }\r\n    } else {\r\n      setFeedback({ message: t('feedback.hintWordCorrectOrNoMore', 'Word seems correct or no more hints applicable.'), type: 'info' });\r\n    }\r\n  };\r\n  \r\n  const revealTheAnswer = () => { // Renamed from revealAnswer\r\n    if (!correctWord) return;\r\n    const itemId = `buildword_${normalizeString(correctWord)}`;\r\n    setWordSlots(correctWord.split('').map((char, index) => ({ char, originalTileId: -1-index }))); \r\n    setShuffledLetters(shuffledLetters.map(tile => ({...tile, inSlot: true, slotIndex: correctWord.indexOf(tile.char) }))); \r\n    setFeedback({ message: t('feedback.answerIs', `The word is: ${latinizedCorrectWord || correctWord}`, { answer: latinizedCorrectWord || correctWord }), type: 'info' });\r\n    setIsRevealed(true);\r\n    setIsCorrectState(true); \r\n    progress.scheduleReview(itemId, 'vocab-build-word', language, false); // Ensure language is passed\r\n    if(!isCorrectState) { // Only auto-progress if not already answered correctly before reveal\r\n        setTimeout(() => {\r\n            setupNewWord();\r\n        }, 2000); // Auto-progress\r\n    }\r\n  };\r\n\r\n  const handleReset = () => {\r\n     if (!correctWord || isRevealed || isCorrectState) return; // Prevent reset if already solved/revealed\r\n     setWordSlots(Array(correctWord.length).fill({ char: null, originalTileId: null }));\r\n     setShuffledLetters(\r\n          shuffleArray( \r\n            correctWord.split('').map((char, index) => ({ char, id: index, inSlot: false, slotIndex: null }))\r\n          )\r\n     );\r\n     setFeedback({ message: '', type: '' });\r\n     // setIsRevealed(false); // Should not reset revealed status on tile reset\r\n     // setIsCorrectState(false); // Should not reset correct status on tile reset\r\n  };\r\n\r\n  if (isLoading) return <p>{t('loading.buildWordExercise', 'Loading word building exercise...')}</p>;\r\n  if (error) return <FeedbackDisplay message={error} type=\"error\" />;\r\n  if (!correctWord) return <p>{t('exercises.noWordForBuild', 'No word available for this exercise.')}</p>;\r\n\r\n  const tileBaseStyle = { padding: '10px 15px', margin: '5px', border: '1px solid #ccc', borderRadius: '5px', cursor: 'pointer', minWidth: '40px', textAlign: 'center', userSelect: 'none', backgroundColor: '#f8f9fa' };\r\n  const slotBaseStyle = { ...tileBaseStyle, backgroundColor: '#e9ecef', cursor: 'default', display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '48px' };\r\n\r\n  return (\r\n    <div style={{ textAlign: 'center', padding: '20px', border: '1px solid #eee', borderRadius: '8px' }}>\r\n      <h3>{t('titles.buildTheWord', 'Build the Word')}</h3>\r\n      <button onClick={() => pronounceText(correctWord, language)} disabled={!correctWord} title={t('tooltips.pronounceWord', \"Pronounce the word\")} style={{background:'none', border:'none', fontSize:'1.5rem', cursor:'pointer', verticalAlign:'middle', marginBottom:'10px'}}>🔊</button>\r\n      <div id=\"word-slots\" style={{ display: 'flex', justifyContent: 'center', marginBottom: '20px', minHeight: '50px', flexWrap: 'wrap' }}>\r\n        {wordSlots.map((slot, index) => (\r\n          <div key={`slot-${index}`} style={slotBaseStyle} onClick={() => handleSlotClick(index)}>\r\n            {slot.char ? <span style={{...(isLatinized && slot.char !== getLatinizedText(slot.char, language) && {fontStyle:'italic'})}}>{getLatinizedText(slot.char, language)}</span> : '?'}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div id=\"letter-pool\" style={{ display: 'flex', justifyContent: 'center', flexWrap: 'wrap', marginBottom: '20px', minHeight: '50px', border: '1px dashed #ddd', padding: '10px', borderRadius: '5px' }}>\r\n        {shuffledLetters.filter(tile => !tile.inSlot).map(tile => (\r\n          <button \r\n            key={`tile-${tile.id}`} \r\n            style={tileBaseStyle} \r\n            onClick={() => handleTileClick(tile)}\r\n            disabled={isRevealed || isCorrectState}\r\n          >\r\n            <span style={{...(isLatinized && tile.char !== getLatinizedText(tile.char, language) && {fontStyle:'italic'})}}>{getLatinizedText(tile.char, language)}</span>\r\n          </button>\r\n        ))}\r\n         {shuffledLetters.filter(tile => !tile.inSlot).length === 0 && !isCorrectState && <span style={{color: '#888'}}>{t('feedback.allLettersPlaced', 'All letters placed!')}</span>}\r\n      </div>\r\n      <FeedbackDisplay message={feedback.message} type={feedback.type} language={language} />\r\n      <ExerciseControls\r\n        onCheckAnswer={!isRevealed && !isCorrectState && wordSlots.every(s => s.char) && correctWord ? checkAnswer : undefined}\r\n        onShowHint={!isRevealed && !isCorrectState && correctWord ? showHint : undefined}\r\n        onRevealAnswer={!isRevealed && !isCorrectState && correctWord ? revealTheAnswer : undefined} // Changed to revealTheAnswer\r\n        onNextExercise={setupNewWord} \r\n        config={{ \r\n            showCheck: !isRevealed && !isCorrectState && wordSlots.every(s => s.char) && !!correctWord, \r\n            showHint: !isRevealed && !isCorrectState && !!correctWord, \r\n            showReveal: !isRevealed && !isCorrectState && !!correctWord,\r\n            showNext: true, \r\n        }}\r\n      />\r\n       <button onClick={handleReset} style={{...tileBaseStyle, backgroundColor: '#6c757d', color: 'white', marginTop:'10px'}} disabled={isRevealed || isCorrectState || !correctWord}>\r\n        🔄 {t('buttons.resetTiles', 'Reset Tiles')}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BuildWordExercise;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}