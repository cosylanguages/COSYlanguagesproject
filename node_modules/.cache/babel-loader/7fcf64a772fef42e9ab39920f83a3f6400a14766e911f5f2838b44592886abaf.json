{"ast":null,"code":"import _objectSpread from\"/workspaces/COSYlanguagesproject/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect,useCallback,useRef}from'react';import{loadImageData}from'../../../../utils/exerciseDataService';import FeedbackDisplay from'../../FeedbackDisplay';import ExerciseControls from'../../ExerciseControls';import{useLatinizationContext}from'../../../../contexts/LatinizationContext';import useLatinization from'../../../../hooks/useLatinization';import{shuffleArray}from'../../../../utils/arrayUtils';import{useProgress}from'../../../../contexts/ProgressContext';import{normalizeString}from'../../../../utils/stringUtils';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const MatchImageWordExercise=_ref=>{let{language,days,exerciseKey}=_ref;const[gameItems,setGameItems]=useState([]);const[selectedItems,setSelectedItems]=useState([]);// Array of selected item objects\nconst[matchedPairs,setMatchedPairs]=useState({});// { [pairId]: true }\nconst[feedback,setFeedback]=useState({message:'',type:''});const[isLoading,setIsLoading]=useState(true);const[error,setError]=useState(null);const[numPairs,setNumPairs]=useState(0);const[isRevealed,setIsRevealed]=useState(false);const[lines,setLines]=useState([]);// For drawing lines\nconst{isLatinized}=useLatinizationContext();const getLatinizedText=useLatinization;const progress=useProgress();const itemRefs=useRef({});// To store refs for each clickable item\nconst gridContainerRef=useRef(null);// Ref for the grid container\nconst NUM_PAIRS_FOR_GAME=4;const setupExercise=useCallback(async()=>{setIsLoading(true);setError(null);setFeedback({message:'',type:''});setSelectedItems([]);setMatchedPairs({});setNumPairs(0);setGameItems([]);setLines([]);// Clear lines\nsetIsRevealed(false);itemRefs.current={};// Clear old refs\ntry{const{data:imagesData,error:fetchError}=await loadImageData(language,days);if(fetchError){throw new Error(fetchError.message||fetchError.error||'Failed to load image data.');}if(!imagesData||imagesData.length<NUM_PAIRS_FOR_GAME){setError(\"Not enough images for this exercise. Need at least \".concat(NUM_PAIRS_FOR_GAME,\". Found \").concat((imagesData===null||imagesData===void 0?void 0:imagesData.length)||0,\".\"));setIsLoading(false);return;}const selectedImages=shuffleArray(imagesData).slice(0,NUM_PAIRS_FOR_GAME);setNumPairs(selectedImages.length);let currentIdSuffix=0;const itemsToSet=[];selectedImages.forEach(imgData=>{const word=imgData.translations[language]||imgData.word;// Fallback to imgData.word if translation missing\nconst pairId=\"pair-\".concat(imgData.id||Date.now()+'-'+currentIdSuffix++);itemsToSet.push({type:'image',value:imgData.src,id:\"img-\".concat(pairId),pairId:pairId,src:imgData.src,alt:word});itemsToSet.push({type:'word',value:word,id:\"word-\".concat(pairId),pairId:pairId});});setGameItems(shuffleArray(itemsToSet));}catch(err){console.error(\"MatchImageWordExercise - Error setting up:\",err);setError(err.message||'An unexpected error occurred.');}finally{setIsLoading(false);}},[language,days,NUM_PAIRS_FOR_GAME]);useEffect(()=>{if(language&&days&&days.length>0){setupExercise();}else{setIsLoading(false);setError(\"Please select a language and day(s).\");}},[setupExercise,exerciseKey,language,days]);const handleItemClick=item=>{if(isRevealed||matchedPairs[item.pairId]||selectedItems.find(sel=>sel.id===item.id)||selectedItems.length>=2){return;}const newSelectedItems=[...selectedItems,item];setSelectedItems(newSelectedItems);setFeedback({message:'',type:''});};const drawLineBetweenItems=useCallback((item1Id,item2Id)=>{const el1=itemRefs.current[item1Id];const el2=itemRefs.current[item2Id];if(!el1||!el2||!gridContainerRef.current)return;const containerRect=gridContainerRef.current.getBoundingClientRect();const rect1=el1.getBoundingClientRect();const rect2=el2.getBoundingClientRect();const x1=rect1.left+rect1.width/2-containerRect.left+gridContainerRef.current.scrollLeft;const y1=rect1.top+rect1.height/2-containerRect.top+gridContainerRef.current.scrollTop;const x2=rect2.left+rect2.width/2-containerRect.left+gridContainerRef.current.scrollLeft;const y2=rect2.top+rect2.height/2-containerRect.top+gridContainerRef.current.scrollTop;const lineKey=\"line-\".concat(item1Id,\"-\").concat(item2Id);// Avoid duplicate lines if already drawn (e.g. if logic re-triggers)\nsetLines(prevLines=>{if(prevLines.some(l=>l.key===lineKey||l.key===\"line-\".concat(item2Id,\"-\").concat(item1Id))){return prevLines;}return[...prevLines,{x1,y1,x2,y2,key:lineKey}];});},[]);useEffect(()=>{if(selectedItems.length===2){const[item1,item2]=selectedItems;const wordItem=item1.type==='word'?item1:item2.type==='word'?item2:null;const imageItem=item1.type==='image'?item1:item2.type==='image'?item2:null;const itemIdForProgress=\"matchimg_\".concat(imageItem?normalizeString(imageItem.value):'unknownimg',\"_\").concat(wordItem?normalizeString(wordItem.value):'unknownword');if(item1.pairId===item2.pairId){setFeedback({message:'Correct Match!',type:'correct'});setMatchedPairs(prev=>_objectSpread(_objectSpread({},prev),{},{[item1.pairId]:true}));drawLineBetweenItems(item1.id,item2.id);progress.awardCorrectAnswer(itemIdForProgress,'vocab-match-image-word',language);setSelectedItems([]);}else{setFeedback({message:'Incorrect Match. Try again.',type:'incorrect'});progress.awardIncorrectAnswer(itemIdForProgress,'vocab-match-image-word',language);const el1=itemRefs.current[item1.id];const el2=itemRefs.current[item2.id];if(el1)el1.classList.add('incorrect-flash');if(el2)el2.classList.add('incorrect-flash');setTimeout(()=>{if(el1)el1.classList.remove('incorrect-flash');if(el2)el2.classList.remove('incorrect-flash');setSelectedItems([]);},1000);}}},[selectedItems,progress,language,drawLineBetweenItems]);useEffect(()=>{if(numPairs>0&&Object.keys(matchedPairs).length===numPairs&&!isRevealed){setFeedback({message:'All pairs matched! Well done!',type:'success'});}},[matchedPairs,numPairs,isRevealed]);const showHint=()=>{if(isRevealed||Object.keys(matchedPairs).length>=numPairs)return;// Find an unmatched pairId\nconst allPairIds=new Set(gameItems.map(item=>item.pairId));const matchedPairIds=new Set(Object.keys(matchedPairs));let hintPairId=null;for(const id of allPairIds){if(!matchedPairIds.has(id)){hintPairId=id;break;}}if(hintPairId){const pairHintItems=gameItems.filter(item=>item.pairId===hintPairId);if(pairHintItems.length===2){const item1Text=pairHintItems[0].type==='word'?pairHintItems[0].value:\"the image for \\\"\".concat(pairHintItems[0].alt,\"\\\"\");const item2Text=pairHintItems[1].type==='word'?pairHintItems[1].value:\"the image for \\\"\".concat(pairHintItems[1].alt,\"\\\"\");setFeedback({message:\"Hint: Try matching \".concat(getLatinizedText(item1Text,language),\" with \").concat(getLatinizedText(item2Text,language),\".\"),type:'hint'});}}else{setFeedback({message:\"No more hints available.\",type:'info'});}};const revealAllAnswers=()=>{setIsRevealed(true);const allPairsRevealed={};const newLines=[];const uniquePairIds=[...new Set(gameItems.map(item=>item.pairId))];uniquePairIds.forEach(pairId=>{allPairsRevealed[pairId]=true;const itemsInPair=gameItems.filter(item=>item.pairId===pairId);if(itemsInPair.length===2){drawLineBetweenItems(itemsInPair[0].id,itemsInPair[1].id);const wordItem=itemsInPair.find(pi=>pi.type==='word');const imageItem=itemsInPair.find(pi=>pi.type==='image');if(wordItem&&imageItem){const itemIdForProgress=\"matchimg_\".concat(normalizeString(imageItem.value),\"_\").concat(normalizeString(wordItem.value));progress.scheduleReview(itemIdForProgress,'vocab-match-image-word',language,false);}}});setMatchedPairs(allPairsRevealed);// setLines(newLines); // drawLineBetweenItems updates lines state directly\nsetFeedback({message:\"All pairs revealed.\",type:'info'});};if(isLoading)return/*#__PURE__*/_jsx(\"p\",{children:\"Loading match image & word exercise...\"});if(error)return/*#__PURE__*/_jsx(FeedbackDisplay,{message:error,type:\"error\"});if(gameItems.length===0&&!isLoading)return/*#__PURE__*/_jsx(FeedbackDisplay,{message:\"No items available for this exercise.\",type:\"info\"});const getItemStyle=item=>{let style={padding:'10px',margin:'5px',border:'2px solid #ddd',borderRadius:'8px',cursor:'pointer',display:'flex',justifyContent:'center',alignItems:'center',minHeight:'80px',minWidth:'100px',backgroundColor:'#fff',transition:'all 0.2s ease-out',boxSizing:'border-box'};if(selectedItems.find(sel=>sel.id===item.id)&&!matchedPairs[item.pairId]){style.borderColor='#007bff';style.boxShadow='0 0 5px rgba(0,123,255,0.5)';}if(matchedPairs[item.pairId]){style.backgroundColor='#e6ffed';style.borderColor='#b7eac9';style.cursor='default';}return style;};return/*#__PURE__*/_jsxs(\"div\",{style:{textAlign:'center',padding:'20px',border:'1px solid #eee',borderRadius:'8px',maxWidth:'700px',margin:'auto'},children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Match Image with Word\"}),/*#__PURE__*/_jsxs(\"div\",{ref:gridContainerRef,style:{display:'grid',gridTemplateColumns:'repeat(auto-fit, minmax(120px, 1fr))',gap:'15px',margin:'20px auto',position:'relative'},children:[/*#__PURE__*/_jsx(\"svg\",{style:{position:'absolute',top:0,left:0,width:'100%',height:'100%',pointerEvents:'none',zIndex:0},children:lines.map(line=>/*#__PURE__*/_jsx(\"line\",{x1:line.x1,y1:line.y1,x2:line.x2,y2:line.y2,stroke:\"#28a745\",strokeWidth:\"3\",opacity:\"0.7\"},line.key))}),gameItems.map(item=>/*#__PURE__*/_jsx(\"button\",{ref:el=>itemRefs.current[item.id]=el,\"data-id\":item.id,style:_objectSpread(_objectSpread({},getItemStyle(item)),{},{zIndex:1})// Ensure buttons are above SVG\n,onClick:()=>handleItemClick(item),disabled:isRevealed||matchedPairs[item.pairId],className:matchedPairs[item.pairId]?'matched':selectedItems.find(sel=>sel.id===item.id)?'selected-match-item':'',children:item.type==='image'?/*#__PURE__*/_jsx(\"img\",{src:item.src.startsWith('assets/')?\"/\".concat(item.src):item.src,alt:item.alt||\"Match image\",style:{maxWidth:'80px',maxHeight:'80px',objectFit:'contain'}}):/*#__PURE__*/_jsx(\"span\",{style:_objectSpread({},isLatinized&&item.value!==getLatinizedText(item.value,language)&&{fontStyle:'italic'}),children:getLatinizedText(item.value,language)})},item.id))]}),/*#__PURE__*/_jsx(FeedbackDisplay,{message:feedback.message,type:feedback.type,language:language}),/*#__PURE__*/_jsx(ExerciseControls,{onShowHint:!isRevealed&&Object.keys(matchedPairs).length<numPairs?showHint:undefined,onRevealAnswer:!isRevealed&&Object.keys(matchedPairs).length<numPairs?revealAllAnswers:undefined,onNextExercise:setupExercise,config:{showCheck:false,showHint:!isRevealed&&Object.keys(matchedPairs).length<numPairs&&numPairs>0,showReveal:!isRevealed&&Object.keys(matchedPairs).length<numPairs&&numPairs>0,showNext:true}})]});};export default MatchImageWordExercise;","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","loadImageData","FeedbackDisplay","ExerciseControls","useLatinizationContext","useLatinization","shuffleArray","useProgress","normalizeString","jsx","_jsx","jsxs","_jsxs","MatchImageWordExercise","_ref","language","days","exerciseKey","gameItems","setGameItems","selectedItems","setSelectedItems","matchedPairs","setMatchedPairs","feedback","setFeedback","message","type","isLoading","setIsLoading","error","setError","numPairs","setNumPairs","isRevealed","setIsRevealed","lines","setLines","isLatinized","getLatinizedText","progress","itemRefs","gridContainerRef","NUM_PAIRS_FOR_GAME","setupExercise","current","data","imagesData","fetchError","Error","length","concat","selectedImages","slice","currentIdSuffix","itemsToSet","forEach","imgData","word","translations","pairId","id","Date","now","push","value","src","alt","err","console","handleItemClick","item","find","sel","newSelectedItems","drawLineBetweenItems","item1Id","item2Id","el1","el2","containerRect","getBoundingClientRect","rect1","rect2","x1","left","width","scrollLeft","y1","top","height","scrollTop","x2","y2","lineKey","prevLines","some","l","key","item1","item2","wordItem","imageItem","itemIdForProgress","prev","_objectSpread","awardCorrectAnswer","awardIncorrectAnswer","classList","add","setTimeout","remove","Object","keys","showHint","allPairIds","Set","map","matchedPairIds","hintPairId","has","pairHintItems","filter","item1Text","item2Text","revealAllAnswers","allPairsRevealed","newLines","uniquePairIds","itemsInPair","pi","scheduleReview","children","getItemStyle","style","padding","margin","border","borderRadius","cursor","display","justifyContent","alignItems","minHeight","minWidth","backgroundColor","transition","boxSizing","borderColor","boxShadow","textAlign","maxWidth","ref","gridTemplateColumns","gap","position","pointerEvents","zIndex","line","stroke","strokeWidth","opacity","el","onClick","disabled","className","startsWith","maxHeight","objectFit","fontStyle","onShowHint","undefined","onRevealAnswer","onNextExercise","config","showCheck","showReveal","showNext"],"sources":["/workspaces/COSYlanguagesproject/src/components/Freestyle/exercises/vocabulary/MatchImageWordExercise.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\r\nimport { loadImageData } from '../../../../utils/exerciseDataService';\r\nimport FeedbackDisplay from '../../FeedbackDisplay';\r\nimport ExerciseControls from '../../ExerciseControls';\r\nimport { useLatinizationContext } from '../../../../contexts/LatinizationContext';\r\nimport useLatinization from '../../../../hooks/useLatinization';\r\nimport { shuffleArray } from '../../../../utils/arrayUtils';\r\nimport { useProgress } from '../../../../contexts/ProgressContext';\r\nimport { normalizeString } from '../../../../utils/stringUtils';\r\n\r\nconst MatchImageWordExercise = ({ language, days, exerciseKey }) => {\r\n  const [gameItems, setGameItems] = useState([]);\r\n  const [selectedItems, setSelectedItems] = useState([]); // Array of selected item objects\r\n  const [matchedPairs, setMatchedPairs] = useState({}); // { [pairId]: true }\r\n  const [feedback, setFeedback] = useState({ message: '', type: '' });\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [numPairs, setNumPairs] = useState(0);\r\n  const [isRevealed, setIsRevealed] = useState(false);\r\n  const [lines, setLines] = useState([]); // For drawing lines\r\n\r\n  const { isLatinized } = useLatinizationContext();\r\n  const getLatinizedText = useLatinization;\r\n  const progress = useProgress();\r\n\r\n  const itemRefs = useRef({}); // To store refs for each clickable item\r\n  const gridContainerRef = useRef(null); // Ref for the grid container\r\n\r\n  const NUM_PAIRS_FOR_GAME = 4;\r\n\r\n  const setupExercise = useCallback(async () => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    setFeedback({ message: '', type: '' });\r\n    setSelectedItems([]);\r\n    setMatchedPairs({});\r\n    setNumPairs(0);\r\n    setGameItems([]);\r\n    setLines([]); // Clear lines\r\n    setIsRevealed(false);\r\n    itemRefs.current = {}; // Clear old refs\r\n\r\n    try {\r\n      const { data: imagesData, error: fetchError } = await loadImageData(language, days);\r\n      if (fetchError) {\r\n        throw new Error(fetchError.message || fetchError.error || 'Failed to load image data.');\r\n      }\r\n\r\n      if (!imagesData || imagesData.length < NUM_PAIRS_FOR_GAME) {\r\n        setError(`Not enough images for this exercise. Need at least ${NUM_PAIRS_FOR_GAME}. Found ${imagesData?.length || 0}.`);\r\n        setIsLoading(false);\r\n        return;\r\n      }\r\n\r\n      const selectedImages = shuffleArray(imagesData).slice(0, NUM_PAIRS_FOR_GAME);\r\n      setNumPairs(selectedImages.length);\r\n\r\n      let currentIdSuffix = 0;\r\n      const itemsToSet = [];\r\n      selectedImages.forEach((imgData) => {\r\n        const word = imgData.translations[language] || imgData.word; // Fallback to imgData.word if translation missing\r\n        const pairId = `pair-${imgData.id || Date.now() + '-' + (currentIdSuffix++)}`;\r\n        itemsToSet.push({ type: 'image', value: imgData.src, id: `img-${pairId}`, pairId: pairId, src: imgData.src, alt: word });\r\n        itemsToSet.push({ type: 'word', value: word, id: `word-${pairId}`, pairId: pairId });\r\n      });\r\n\r\n      setGameItems(shuffleArray(itemsToSet));\r\n\r\n    } catch (err) {\r\n      console.error(\"MatchImageWordExercise - Error setting up:\", err);\r\n      setError(err.message || 'An unexpected error occurred.');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [language, days, NUM_PAIRS_FOR_GAME]);\r\n\r\n  useEffect(() => {\r\n    if (language && days && days.length > 0) {\r\n      setupExercise();\r\n    } else {\r\n      setIsLoading(false);\r\n      setError(\"Please select a language and day(s).\");\r\n    }\r\n  }, [setupExercise, exerciseKey, language, days]);\r\n\r\n  const handleItemClick = (item) => {\r\n    if (isRevealed || matchedPairs[item.pairId] || selectedItems.find(sel => sel.id === item.id) || selectedItems.length >= 2) {\r\n      return;\r\n    }\r\n    const newSelectedItems = [...selectedItems, item];\r\n    setSelectedItems(newSelectedItems);\r\n    setFeedback({ message: '', type: '' });\r\n  };\r\n  \r\n  const drawLineBetweenItems = useCallback((item1Id, item2Id) => {\r\n    const el1 = itemRefs.current[item1Id];\r\n    const el2 = itemRefs.current[item2Id];\r\n\r\n    if (!el1 || !el2 || !gridContainerRef.current) return;\r\n\r\n    const containerRect = gridContainerRef.current.getBoundingClientRect();\r\n    const rect1 = el1.getBoundingClientRect();\r\n    const rect2 = el2.getBoundingClientRect();\r\n\r\n    const x1 = rect1.left + rect1.width / 2 - containerRect.left + gridContainerRef.current.scrollLeft;\r\n    const y1 = rect1.top + rect1.height / 2 - containerRect.top + gridContainerRef.current.scrollTop;\r\n    const x2 = rect2.left + rect2.width / 2 - containerRect.left + gridContainerRef.current.scrollLeft;\r\n    const y2 = rect2.top + rect2.height / 2 - containerRect.top + gridContainerRef.current.scrollTop;\r\n\r\n    const lineKey = `line-${item1Id}-${item2Id}`;\r\n    // Avoid duplicate lines if already drawn (e.g. if logic re-triggers)\r\n    setLines(prevLines => {\r\n        if (prevLines.some(l => l.key === lineKey || l.key === `line-${item2Id}-${item1Id}`)) {\r\n            return prevLines;\r\n        }\r\n        return [...prevLines, { x1, y1, x2, y2, key: lineKey }];\r\n    });\r\n  }, []);\r\n\r\n\r\n  useEffect(() => {\r\n    if (selectedItems.length === 2) {\r\n      const [item1, item2] = selectedItems;\r\n      const wordItem = item1.type === 'word' ? item1 : (item2.type === 'word' ? item2 : null);\r\n      const imageItem = item1.type === 'image' ? item1 : (item2.type === 'image' ? item2 : null);\r\n      const itemIdForProgress = `matchimg_${imageItem ? normalizeString(imageItem.value) : 'unknownimg'}_${wordItem ? normalizeString(wordItem.value) : 'unknownword'}`;\r\n\r\n      if (item1.pairId === item2.pairId) {\r\n        setFeedback({ message: 'Correct Match!', type: 'correct' });\r\n        setMatchedPairs(prev => ({ ...prev, [item1.pairId]: true }));\r\n        drawLineBetweenItems(item1.id, item2.id);\r\n        progress.awardCorrectAnswer(itemIdForProgress, 'vocab-match-image-word', language);\r\n        setSelectedItems([]);\r\n      } else {\r\n        setFeedback({ message: 'Incorrect Match. Try again.', type: 'incorrect' });\r\n        progress.awardIncorrectAnswer(itemIdForProgress, 'vocab-match-image-word', language);\r\n        \r\n        const el1 = itemRefs.current[item1.id];\r\n        const el2 = itemRefs.current[item2.id];\r\n        if(el1) el1.classList.add('incorrect-flash');\r\n        if(el2) el2.classList.add('incorrect-flash');\r\n\r\n        setTimeout(() => {\r\n          if(el1) el1.classList.remove('incorrect-flash');\r\n          if(el2) el2.classList.remove('incorrect-flash');\r\n          setSelectedItems([]);\r\n        }, 1000);\r\n      }\r\n    }\r\n  }, [selectedItems, progress, language, drawLineBetweenItems]);\r\n\r\n  useEffect(() => {\r\n    if (numPairs > 0 && Object.keys(matchedPairs).length === numPairs && !isRevealed) {\r\n      setFeedback({ message: 'All pairs matched! Well done!', type: 'success' });\r\n    }\r\n  }, [matchedPairs, numPairs, isRevealed]);\r\n\r\n  const showHint = () => {\r\n     if (isRevealed || Object.keys(matchedPairs).length >= numPairs) return;\r\n    // Find an unmatched pairId\r\n    const allPairIds = new Set(gameItems.map(item => item.pairId));\r\n    const matchedPairIds = new Set(Object.keys(matchedPairs));\r\n    let hintPairId = null;\r\n    for (const id of allPairIds) {\r\n        if (!matchedPairIds.has(id)) {\r\n            hintPairId = id;\r\n            break;\r\n        }\r\n    }\r\n\r\n    if (hintPairId) {\r\n        const pairHintItems = gameItems.filter(item => item.pairId === hintPairId);\r\n        if (pairHintItems.length === 2) {\r\n            const item1Text = pairHintItems[0].type === 'word' ? pairHintItems[0].value : `the image for \"${pairHintItems[0].alt}\"`;\r\n            const item2Text = pairHintItems[1].type === 'word' ? pairHintItems[1].value : `the image for \"${pairHintItems[1].alt}\"`;\r\n            setFeedback({ message: `Hint: Try matching ${getLatinizedText(item1Text, language)} with ${getLatinizedText(item2Text, language)}.`, type: 'hint' });\r\n        }\r\n    } else {\r\n        setFeedback({ message: \"No more hints available.\", type: 'info' });\r\n    }\r\n  };\r\n\r\n  const revealAllAnswers = () => {\r\n    setIsRevealed(true);\r\n    const allPairsRevealed = {};\r\n    const newLines = [];\r\n    const uniquePairIds = [...new Set(gameItems.map(item => item.pairId))];\r\n\r\n    uniquePairIds.forEach(pairId => {\r\n      allPairsRevealed[pairId] = true;\r\n      const itemsInPair = gameItems.filter(item => item.pairId === pairId);\r\n      if (itemsInPair.length === 2) {\r\n        drawLineBetweenItems(itemsInPair[0].id, itemsInPair[1].id);\r\n        \r\n        const wordItem = itemsInPair.find(pi => pi.type === 'word');\r\n        const imageItem = itemsInPair.find(pi => pi.type === 'image');\r\n        if(wordItem && imageItem){\r\n            const itemIdForProgress = `matchimg_${normalizeString(imageItem.value)}_${normalizeString(wordItem.value)}`;\r\n            progress.scheduleReview(itemIdForProgress, 'vocab-match-image-word', language, false);\r\n        }\r\n      }\r\n    });\r\n    setMatchedPairs(allPairsRevealed);\r\n    // setLines(newLines); // drawLineBetweenItems updates lines state directly\r\n    setFeedback({ message: \"All pairs revealed.\", type: 'info' });\r\n  };\r\n\r\n  if (isLoading) return <p>Loading match image & word exercise...</p>;\r\n  if (error) return <FeedbackDisplay message={error} type=\"error\" />;\r\n  if (gameItems.length === 0 && !isLoading) return <FeedbackDisplay message=\"No items available for this exercise.\" type=\"info\" />;\r\n\r\n  const getItemStyle = (item) => {\r\n    let style = {\r\n      padding: '10px', margin: '5px', border: '2px solid #ddd', borderRadius: '8px',\r\n      cursor: 'pointer', display: 'flex', justifyContent: 'center', alignItems: 'center',\r\n      minHeight: '80px', minWidth: '100px', backgroundColor: '#fff', transition: 'all 0.2s ease-out',\r\n      boxSizing: 'border-box',\r\n    };\r\n    if (selectedItems.find(sel => sel.id === item.id) && !matchedPairs[item.pairId]) {\r\n      style.borderColor = '#007bff';\r\n      style.boxShadow = '0 0 5px rgba(0,123,255,0.5)';\r\n    }\r\n    if (matchedPairs[item.pairId]) {\r\n      style.backgroundColor = '#e6ffed';\r\n      style.borderColor = '#b7eac9';\r\n      style.cursor = 'default';\r\n    }\r\n    return style;\r\n  };\r\n\r\n  return (\r\n    <div style={{ textAlign: 'center', padding: '20px', border: '1px solid #eee', borderRadius: '8px', maxWidth: '700px', margin: 'auto' }}>\r\n      <h3>Match Image with Word</h3>\r\n      <div \r\n        ref={gridContainerRef} \r\n        style={{ \r\n          display: 'grid', \r\n          gridTemplateColumns: 'repeat(auto-fit, minmax(120px, 1fr))', \r\n          gap: '15px', \r\n          margin: '20px auto', \r\n          position: 'relative' \r\n        }}\r\n      >\r\n        <svg \r\n          style={{ \r\n            position: 'absolute', top: 0, left: 0, \r\n            width: '100%', height: '100%', \r\n            pointerEvents: 'none', zIndex: 0 \r\n          }}\r\n        >\r\n          {lines.map(line => (\r\n            <line \r\n              key={line.key} \r\n              x1={line.x1} y1={line.y1} \r\n              x2={line.x2} y2={line.y2} \r\n              stroke=\"#28a745\" strokeWidth=\"3\" opacity=\"0.7\"\r\n            />\r\n          ))}\r\n        </svg>\r\n        {gameItems.map((item) => (\r\n          <button\r\n            key={item.id}\r\n            ref={el => itemRefs.current[item.id] = el}\r\n            data-id={item.id}\r\n            style={{...getItemStyle(item), zIndex: 1}} // Ensure buttons are above SVG\r\n            onClick={() => handleItemClick(item)}\r\n            disabled={isRevealed || matchedPairs[item.pairId]}\r\n            className={matchedPairs[item.pairId] ? 'matched' : (selectedItems.find(sel => sel.id === item.id) ? 'selected-match-item' : '')}\r\n          >\r\n            {item.type === 'image' ? (\r\n              <img src={item.src.startsWith('assets/') ? `/${item.src}` : item.src} alt={item.alt || \"Match image\"} style={{ maxWidth: '80px', maxHeight: '80px', objectFit: 'contain' }} />\r\n            ) : (\r\n              <span style={{...(isLatinized && item.value !== getLatinizedText(item.value, language) && {fontStyle:'italic'})}}>\r\n                {getLatinizedText(item.value, language)}\r\n              </span>\r\n            )}\r\n          </button>\r\n        ))}\r\n      </div>\r\n      <FeedbackDisplay message={feedback.message} type={feedback.type} language={language} />\r\n      <ExerciseControls\r\n        onShowHint={!isRevealed && Object.keys(matchedPairs).length < numPairs ? showHint : undefined}\r\n        onRevealAnswer={!isRevealed && Object.keys(matchedPairs).length < numPairs ? revealAllAnswers : undefined}\r\n        onNextExercise={setupExercise}\r\n        config={{\r\n          showCheck: false,\r\n          showHint: !isRevealed && Object.keys(matchedPairs).length < numPairs && numPairs > 0,\r\n          showReveal: !isRevealed && Object.keys(matchedPairs).length < numPairs && numPairs > 0,\r\n          showNext: true,\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MatchImageWordExercise;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}