{"ast":null,"code":"import _objectSpread from\"/workspaces/COSYlanguagesproject/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect,useCallback}from'react';import{loadVerbGrammarData}from'../../../../utils/exerciseDataService';import{processVerbData}from'../../../../utils/grammarSentenceGenerator';import{useLatinizationContext}from'../../../../contexts/LatinizationContext';import useLatinization from'../../../../hooks/useLatinization';import{shuffleArray}from'../../../../utils/arrayUtils';import FeedbackDisplay from'../../FeedbackDisplay';import ExerciseControls from'../../ExerciseControls';import{useI18n}from'../../../../i18n/I18nContext';import{useProgress}from'../../../../contexts/ProgressContext';// Import useProgress\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const MatchVerbsPronounsExercise=_ref=>{let{language,days,exerciseKey}=_ref;const[targetVerbInfinitive,setTargetVerbInfinitive]=useState('');const[actualPairs,setActualPairs]=useState([]);const[pronounsColumn,setPronounsColumn]=useState([]);const[formsColumn,setFormsColumn]=useState([]);const[selectedPronoun,setSelectedPronoun]=useState(null);const[selectedForm,setSelectedForm]=useState(null);const[matchedItems,setMatchedItems]=useState({});const[feedback,setFeedback]=useState({message:'',type:''});const[isLoading,setIsLoading]=useState(true);const[error,setError]=useState(null);const[numCorrectMatches,setNumCorrectMatches]=useState(0);const[isRevealed,setIsRevealed]=useState(false);const{isLatinized}=useLatinizationContext();const getLatinizedText=useLatinization;const{t}=useI18n();const progress=useProgress();const NUM_PAIRS_TO_DISPLAY=6;const setupNewExercise=useCallback(async()=>{setIsLoading(true);setError(null);setFeedback({message:'',type:''});setSelectedPronoun(null);setSelectedForm(null);setMatchedItems({});setNumCorrectMatches(0);setIsRevealed(false);setTargetVerbInfinitive('');setActualPairs([]);setPronounsColumn([]);setFormsColumn([]);try{const{data:rawVerbItems,error:fetchError}=await loadVerbGrammarData(language,days);if(fetchError){throw new Error(fetchError.message||fetchError.error||'Failed to load verb grammar data.');}if(!rawVerbItems||rawVerbItems.length===0){setError(t('errors.noVerbData','No verb grammar data found for the selected criteria.'));setIsLoading(false);return;}const processedVerbItems=processVerbData(rawVerbItems,language);if(!processedVerbItems||processedVerbItems.length===0){setError(t('errors.noProcessableVerbData','No processable verb items found.'));setIsLoading(false);return;}const randomVerbInfinitive=processedVerbItems[Math.floor(Math.random()*processedVerbItems.length)].verb;setTargetVerbInfinitive(randomVerbInfinitive);const itemsForThisVerb=processedVerbItems.filter(item=>item.verb===randomVerbInfinitive);if(!itemsForThisVerb||itemsForThisVerb.length<2){setError(t('errors.notEnoughVerbForms',\"Not enough forms for the verb \\\"\".concat(randomVerbInfinitive,\"\\\" to create this exercise. Need at least 2.\"),{verb:randomVerbInfinitive}));setIsLoading(false);return;}const selectedItems=shuffleArray(itemsForThisVerb).slice(0,NUM_PAIRS_TO_DISPLAY);setActualPairs(selectedItems);setPronounsColumn(shuffleArray(selectedItems.map(p=>p.pronoun)));setFormsColumn(shuffleArray(selectedItems.map(p=>p.form)));}catch(err){console.error(\"MatchVerbsPronounsExercise - Error setting up:\",err);setError(err.message||t('errors.unexpectedError','An unexpected error occurred.'));}finally{setIsLoading(false);}},[language,days,t]);useEffect(()=>{if(language&&days&&days.length>0){setupNewExercise();}else{setIsLoading(false);setError(t('errors.selectLangDay',\"Please select a language and day(s).\"));}},[setupNewExercise,exerciseKey,language,days,t]);const handleItemClick=(value,type,ref)=>{if(matchedItems[value]||isRevealed)return;if(type==='pronoun'){if(selectedPronoun&&selectedPronoun.elementRef===ref)setSelectedPronoun(null);else setSelectedPronoun({value,elementRef:ref});setFeedback({message:'',type:''});}else if(type==='form'){if(selectedForm&&selectedForm.elementRef===ref)setSelectedForm(null);else setSelectedForm({value,elementRef:ref});setFeedback({message:'',type:''});}};useEffect(()=>{if(selectedPronoun&&selectedForm){const currentPronounValue=selectedPronoun.value;const currentFormValue=selectedForm.value;const isCorrectMatch=actualPairs.some(pair=>pair.pronoun===currentPronounValue&&pair.form===currentFormValue);// Construct a unique ID for the specific pronoun-form pair of this verb\nconst itemId=\"verbmatch_\".concat(targetVerbInfinitive,\"_\").concat(currentPronounValue,\"_\").concat(currentFormValue);if(isCorrectMatch){setFeedback({message:t('feedback.correctMatch','Correct Match!'),type:'correct'});setMatchedItems(prev=>_objectSpread(_objectSpread({},prev),{},{[currentPronounValue]:true,[currentFormValue]:true}));setNumCorrectMatches(prev=>prev+1);progress.awardCorrectAnswer(itemId,'grammar-match-verb');}else{setFeedback({message:t('feedback.incorrectMatch','Incorrect Match. Try again.'),type:'incorrect'});progress.awardIncorrectAnswer(itemId,'grammar-match-verb');if(selectedPronoun.elementRef)selectedPronoun.elementRef.classList.add('incorrect-flash');if(selectedForm.elementRef)selectedForm.elementRef.classList.add('incorrect-flash');setTimeout(()=>{if(selectedPronoun&&selectedPronoun.elementRef)selectedPronoun.elementRef.classList.remove('incorrect-flash');if(selectedForm&&selectedForm.elementRef)selectedForm.elementRef.classList.remove('incorrect-flash');},1000);}setSelectedPronoun(null);setSelectedForm(null);}},[selectedPronoun,selectedForm,actualPairs,t,language,progress,targetVerbInfinitive]);useEffect(()=>{if(actualPairs.length>0&&numCorrectMatches===actualPairs.length&&!isRevealed){setFeedback({message:t('feedback.allPairsMatched','All pairs matched! Well done!'),type:'success'});}},[numCorrectMatches,actualPairs.length,isRevealed,t]);const showHint=()=>{if(isRevealed||numCorrectMatches===actualPairs.length)return;const unMatched=actualPairs.filter(p=>!matchedItems[p.pronoun]||!matchedItems[p.form]);if(unMatched.length>0){const hintPair=unMatched[0];setFeedback({message:t('feedback.hintMatchVerb',\"Hint: Try matching \\\"\".concat(getLatinizedText(hintPair.pronoun,language),\"\\\" with \\\"\").concat(getLatinizedText(hintPair.form,language),\"\\\".\"),{item1:getLatinizedText(hintPair.pronoun,language),item2:getLatinizedText(hintPair.form,language)}),type:'hint'});}else{setFeedback({message:t('feedback.noMoreHints',\"No more hints available.\"),type:'info'});}};const revealAllAnswers=()=>{setIsRevealed(true);const allMatched={};actualPairs.forEach(p=>{allMatched[p.pronoun]=true;allMatched[p.form]=true;const itemId=\"verbmatch_\".concat(targetVerbInfinitive,\"_\").concat(p.pronoun,\"_\").concat(p.form);progress.scheduleReview(itemId,'grammar-match-verb',false);});setMatchedItems(allMatched);setNumCorrectMatches(actualPairs.length);setFeedback({message:t('feedback.allPairsRevealed',\"All pairs revealed.\"),type:'info'});};if(isLoading)return/*#__PURE__*/_jsx(\"p\",{children:t('loading.matchVerbExercise','Loading match verbs exercise...')});if(error)return/*#__PURE__*/_jsx(FeedbackDisplay,{message:error,type:\"error\"});if(actualPairs.length===0&&!isLoading)return/*#__PURE__*/_jsx(FeedbackDisplay,{message:t('exercises.noData',\"No pairs available for this exercise.\"),type:\"info\"});const columnStyle={display:'flex',flexDirection:'column',gap:'8px',alignItems:'stretch',margin:'0 15px',flex:1};const itemStyleBuilder=(value,type)=>{let isSelected=type==='pronoun'&&(selectedPronoun===null||selectedPronoun===void 0?void 0:selectedPronoun.value)===value||type==='form'&&(selectedForm===null||selectedForm===void 0?void 0:selectedForm.value)===value;return{padding:'12px 18px',border:\"2px solid \".concat(isSelected?'#007bff':matchedItems[value]?'#28a745':'#ccc'),borderRadius:'8px',cursor:matchedItems[value]||isRevealed?'default':'pointer',textAlign:'center',backgroundColor:matchedItems[value]?'#d4edda':isSelected?'#cfe2ff':'#f8f9fa',transition:'background-color 0.2s, border-color 0.2s',opacity:isRevealed&&!matchedItems[value]?0.5:1};};const latinizedVerbInfinitive=getLatinizedText(targetVerbInfinitive,language);return/*#__PURE__*/_jsxs(\"div\",{style:{textAlign:'center',padding:'20px',border:'1px solid #eee',borderRadius:'8px'},children:[/*#__PURE__*/_jsx(\"h3\",{children:t('titles.matchVerbPronoun','Match Pronouns with Verb Forms')}),/*#__PURE__*/_jsxs(\"p\",{style:_objectSpread({fontSize:'1.2em',fontWeight:'bold'},isLatinized&&targetVerbInfinitive!==latinizedVerbInfinitive&&{fontStyle:'italic'}),children:[t('labels.verb','Verb'),\": \",latinizedVerbInfinitive||targetVerbInfinitive]}),/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',justifyContent:'center',alignItems:'flex-start',margin:'20px 0'},children:[/*#__PURE__*/_jsxs(\"div\",{style:columnStyle,children:[/*#__PURE__*/_jsx(\"h4\",{children:t('labels.pronouns','Pronouns')}),pronounsColumn.map(pronoun=>{const ref=/*#__PURE__*/React.createRef();return/*#__PURE__*/_jsx(\"button\",{ref:ref,style:itemStyleBuilder(pronoun,'pronoun'),onClick:()=>handleItemClick(pronoun,'pronoun',ref.current),disabled:matchedItems[pronoun]||isRevealed,children:getLatinizedText(pronoun,language)},\"pronoun-\".concat(pronoun));})]}),/*#__PURE__*/_jsxs(\"div\",{style:columnStyle,children:[/*#__PURE__*/_jsx(\"h4\",{children:t('labels.verbForms','Verb Forms')}),formsColumn.map(form=>{const ref=/*#__PURE__*/React.createRef();return/*#__PURE__*/_jsx(\"button\",{ref:ref,style:itemStyleBuilder(form,'form'),onClick:()=>handleItemClick(form,'form',ref.current),disabled:matchedItems[form]||isRevealed,children:getLatinizedText(form,language)},\"form-\".concat(form));})]})]}),/*#__PURE__*/_jsx(FeedbackDisplay,{message:feedback.message,type:feedback.type,language:language}),/*#__PURE__*/_jsx(ExerciseControls,{onShowHint:!isRevealed&&numCorrectMatches<actualPairs.length?showHint:undefined,onRevealAnswer:!isRevealed&&numCorrectMatches<actualPairs.length?revealAllAnswers:undefined,onNextExercise:setupNewExercise,config:{showCheck:false,showHint:!isRevealed&&numCorrectMatches<actualPairs.length,showReveal:!isRevealed&&numCorrectMatches<actualPairs.length,showNext:true}})]});};export default MatchVerbsPronounsExercise;","map":{"version":3,"names":["React","useState","useEffect","useCallback","loadVerbGrammarData","processVerbData","useLatinizationContext","useLatinization","shuffleArray","FeedbackDisplay","ExerciseControls","useI18n","useProgress","jsx","_jsx","jsxs","_jsxs","MatchVerbsPronounsExercise","_ref","language","days","exerciseKey","targetVerbInfinitive","setTargetVerbInfinitive","actualPairs","setActualPairs","pronounsColumn","setPronounsColumn","formsColumn","setFormsColumn","selectedPronoun","setSelectedPronoun","selectedForm","setSelectedForm","matchedItems","setMatchedItems","feedback","setFeedback","message","type","isLoading","setIsLoading","error","setError","numCorrectMatches","setNumCorrectMatches","isRevealed","setIsRevealed","isLatinized","getLatinizedText","t","progress","NUM_PAIRS_TO_DISPLAY","setupNewExercise","data","rawVerbItems","fetchError","Error","length","processedVerbItems","randomVerbInfinitive","Math","floor","random","verb","itemsForThisVerb","filter","item","concat","selectedItems","slice","map","p","pronoun","form","err","console","handleItemClick","value","ref","elementRef","currentPronounValue","currentFormValue","isCorrectMatch","some","pair","itemId","prev","_objectSpread","awardCorrectAnswer","awardIncorrectAnswer","classList","add","setTimeout","remove","showHint","unMatched","hintPair","item1","item2","revealAllAnswers","allMatched","forEach","scheduleReview","children","columnStyle","display","flexDirection","gap","alignItems","margin","flex","itemStyleBuilder","isSelected","padding","border","borderRadius","cursor","textAlign","backgroundColor","transition","opacity","latinizedVerbInfinitive","style","fontSize","fontWeight","fontStyle","justifyContent","createRef","onClick","current","disabled","onShowHint","undefined","onRevealAnswer","onNextExercise","config","showCheck","showReveal","showNext"],"sources":["/workspaces/COSYlanguagesproject/src/components/Freestyle/exercises/grammar/MatchVerbsPronounsExercise.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { loadVerbGrammarData } from '../../../../utils/exerciseDataService';\r\nimport { processVerbData } from '../../../../utils/grammarSentenceGenerator';\r\nimport { useLatinizationContext } from '../../../../contexts/LatinizationContext';\r\nimport useLatinization from '../../../../hooks/useLatinization';\r\nimport { shuffleArray } from '../../../../utils/arrayUtils';\r\nimport FeedbackDisplay from '../../FeedbackDisplay';\r\nimport ExerciseControls from '../../ExerciseControls';\r\nimport { useI18n } from '../../../../i18n/I18nContext';\r\nimport { useProgress } from '../../../../contexts/ProgressContext'; // Import useProgress\r\n\r\nconst MatchVerbsPronounsExercise = ({ language, days, exerciseKey }) => {\r\n  const [targetVerbInfinitive, setTargetVerbInfinitive] = useState('');\r\n  const [actualPairs, setActualPairs] = useState([]); \r\n  const [pronounsColumn, setPronounsColumn] = useState([]);\r\n  const [formsColumn, setFormsColumn] = useState([]);\r\n  \r\n  const [selectedPronoun, setSelectedPronoun] = useState(null); \r\n  const [selectedForm, setSelectedForm] = useState(null); \r\n  \r\n  const [matchedItems, setMatchedItems] = useState({}); \r\n  const [feedback, setFeedback] = useState({ message: '', type: '' });\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [numCorrectMatches, setNumCorrectMatches] = useState(0);\r\n  const [isRevealed, setIsRevealed] = useState(false);\r\n\r\n  const { isLatinized } = useLatinizationContext();\r\n  const getLatinizedText = useLatinization;\r\n  const { t } = useI18n();\r\n  const progress = useProgress();\r\n\r\n  const NUM_PAIRS_TO_DISPLAY = 6;\r\n\r\n  const setupNewExercise = useCallback(async () => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    setFeedback({ message: '', type: '' });\r\n    setSelectedPronoun(null);\r\n    setSelectedForm(null);\r\n    setMatchedItems({});\r\n    setNumCorrectMatches(0);\r\n    setIsRevealed(false);\r\n    setTargetVerbInfinitive('');\r\n    setActualPairs([]);\r\n    setPronounsColumn([]);\r\n    setFormsColumn([]);\r\n\r\n    try {\r\n      const { data: rawVerbItems, error: fetchError } = await loadVerbGrammarData(language, days);\r\n      if (fetchError) {\r\n        throw new Error(fetchError.message || fetchError.error || 'Failed to load verb grammar data.');\r\n      }\r\n\r\n      if (!rawVerbItems || rawVerbItems.length === 0) {\r\n        setError(t('errors.noVerbData', 'No verb grammar data found for the selected criteria.'));\r\n        setIsLoading(false);\r\n        return;\r\n      }\r\n      \r\n      const processedVerbItems = processVerbData(rawVerbItems, language);\r\n      if (!processedVerbItems || processedVerbItems.length === 0) {\r\n        setError(t('errors.noProcessableVerbData', 'No processable verb items found.'));\r\n        setIsLoading(false);\r\n        return;\r\n      }\r\n\r\n      const randomVerbInfinitive = processedVerbItems[Math.floor(Math.random() * processedVerbItems.length)].verb;\r\n      setTargetVerbInfinitive(randomVerbInfinitive);\r\n\r\n      const itemsForThisVerb = processedVerbItems.filter(item => item.verb === randomVerbInfinitive);\r\n\r\n      if (!itemsForThisVerb || itemsForThisVerb.length < 2) {\r\n        setError(t('errors.notEnoughVerbForms', `Not enough forms for the verb \"${randomVerbInfinitive}\" to create this exercise. Need at least 2.`, {verb: randomVerbInfinitive}));\r\n        setIsLoading(false);\r\n        return;\r\n      }\r\n      \r\n      const selectedItems = shuffleArray(itemsForThisVerb).slice(0, NUM_PAIRS_TO_DISPLAY);\r\n      setActualPairs(selectedItems);\r\n      setPronounsColumn(shuffleArray(selectedItems.map(p => p.pronoun)));\r\n      setFormsColumn(shuffleArray(selectedItems.map(p => p.form)));\r\n\r\n    } catch (err) {\r\n      console.error(\"MatchVerbsPronounsExercise - Error setting up:\", err);\r\n      setError(err.message || t('errors.unexpectedError', 'An unexpected error occurred.'));\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [language, days, t]);\r\n\r\n  useEffect(() => {\r\n    if (language && days && days.length > 0) {\r\n      setupNewExercise();\r\n    } else {\r\n      setIsLoading(false);\r\n      setError(t('errors.selectLangDay', \"Please select a language and day(s).\"));\r\n    }\r\n  }, [setupNewExercise, exerciseKey, language, days, t]);\r\n  \r\n  const handleItemClick = (value, type, ref) => {\r\n    if (matchedItems[value] || isRevealed) return;\r\n\r\n    if (type === 'pronoun') {\r\n      if (selectedPronoun && selectedPronoun.elementRef === ref) setSelectedPronoun(null);\r\n      else setSelectedPronoun({ value, elementRef: ref });\r\n      setFeedback({message: '', type: ''});\r\n    } else if (type === 'form') {\r\n      if (selectedForm && selectedForm.elementRef === ref) setSelectedForm(null);\r\n      else setSelectedForm({ value, elementRef: ref });\r\n      setFeedback({message: '', type: ''});\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (selectedPronoun && selectedForm) {\r\n      const currentPronounValue = selectedPronoun.value;\r\n      const currentFormValue = selectedForm.value;\r\n      const isCorrectMatch = actualPairs.some(pair => \r\n        pair.pronoun === currentPronounValue && pair.form === currentFormValue\r\n      );\r\n      // Construct a unique ID for the specific pronoun-form pair of this verb\r\n      const itemId = `verbmatch_${targetVerbInfinitive}_${currentPronounValue}_${currentFormValue}`;\r\n\r\n      if (isCorrectMatch) {\r\n        setFeedback({ message: t('feedback.correctMatch', 'Correct Match!'), type: 'correct' });\r\n        setMatchedItems(prev => ({ ...prev, [currentPronounValue]: true, [currentFormValue]: true }));\r\n        setNumCorrectMatches(prev => prev + 1);\r\n        progress.awardCorrectAnswer(itemId, 'grammar-match-verb');\r\n      } else {\r\n        setFeedback({ message: t('feedback.incorrectMatch', 'Incorrect Match. Try again.'), type: 'incorrect' });\r\n        progress.awardIncorrectAnswer(itemId, 'grammar-match-verb');\r\n        if (selectedPronoun.elementRef) selectedPronoun.elementRef.classList.add('incorrect-flash');\r\n        if (selectedForm.elementRef) selectedForm.elementRef.classList.add('incorrect-flash');\r\n        setTimeout(() => {\r\n            if (selectedPronoun && selectedPronoun.elementRef) selectedPronoun.elementRef.classList.remove('incorrect-flash');\r\n            if (selectedForm && selectedForm.elementRef) selectedForm.elementRef.classList.remove('incorrect-flash');\r\n        }, 1000);\r\n      }\r\n      setSelectedPronoun(null);\r\n      setSelectedForm(null);\r\n    }\r\n  }, [selectedPronoun, selectedForm, actualPairs, t, language, progress, targetVerbInfinitive]);\r\n\r\n  useEffect(() => {\r\n    if (actualPairs.length > 0 && numCorrectMatches === actualPairs.length && !isRevealed) {\r\n      setFeedback({ message: t('feedback.allPairsMatched', 'All pairs matched! Well done!'), type: 'success' });\r\n    }\r\n  }, [numCorrectMatches, actualPairs.length, isRevealed, t]);\r\n\r\n  const showHint = () => {\r\n    if (isRevealed || numCorrectMatches === actualPairs.length) return;\r\n    const unMatched = actualPairs.filter(p => !matchedItems[p.pronoun] || !matchedItems[p.form]);\r\n    if (unMatched.length > 0) {\r\n      const hintPair = unMatched[0];\r\n      setFeedback({ \r\n        message: t('feedback.hintMatchVerb', `Hint: Try matching \"${getLatinizedText(hintPair.pronoun, language)}\" with \"${getLatinizedText(hintPair.form, language)}\".`, {item1: getLatinizedText(hintPair.pronoun, language), item2: getLatinizedText(hintPair.form, language)}), \r\n        type: 'hint' \r\n      });\r\n    } else {\r\n      setFeedback({ message: t('feedback.noMoreHints', \"No more hints available.\"), type: 'info' });\r\n    }\r\n  };\r\n  \r\n  const revealAllAnswers = () => {\r\n    setIsRevealed(true);\r\n    const allMatched = {};\r\n    actualPairs.forEach(p => {\r\n      allMatched[p.pronoun] = true;\r\n      allMatched[p.form] = true;\r\n      const itemId = `verbmatch_${targetVerbInfinitive}_${p.pronoun}_${p.form}`;\r\n      progress.scheduleReview(itemId, 'grammar-match-verb', false);\r\n    });\r\n    setMatchedItems(allMatched);\r\n    setNumCorrectMatches(actualPairs.length);\r\n    setFeedback({ message: t('feedback.allPairsRevealed', \"All pairs revealed.\"), type: 'info' });\r\n  };\r\n\r\n  if (isLoading) return <p>{t('loading.matchVerbExercise', 'Loading match verbs exercise...')}</p>;\r\n  if (error) return <FeedbackDisplay message={error} type=\"error\" />;\r\n  if (actualPairs.length === 0 && !isLoading) return <FeedbackDisplay message={t('exercises.noData', \"No pairs available for this exercise.\")} type=\"info\" />;\r\n\r\n  const columnStyle = { display: 'flex', flexDirection: 'column', gap: '8px', alignItems: 'stretch', margin: '0 15px', flex: 1 };\r\n  const itemStyleBuilder = (value, type) => {\r\n    let isSelected = (type === 'pronoun' && selectedPronoun?.value === value) || (type === 'form' && selectedForm?.value === value);\r\n    return { \r\n        padding: '12px 18px', \r\n        border: `2px solid ${isSelected ? '#007bff' : (matchedItems[value] ? '#28a745' : '#ccc')}`, \r\n        borderRadius: '8px', \r\n        cursor: (matchedItems[value] || isRevealed) ? 'default' : 'pointer', \r\n        textAlign: 'center',\r\n        backgroundColor: matchedItems[value] ? '#d4edda' : (isSelected ? '#cfe2ff' : '#f8f9fa'),\r\n        transition: 'background-color 0.2s, border-color 0.2s',\r\n        opacity: (isRevealed && !matchedItems[value]) ? 0.5 : 1,\r\n    };\r\n  };\r\n  const latinizedVerbInfinitive = getLatinizedText(targetVerbInfinitive, language);\r\n\r\n  return (\r\n    <div style={{ textAlign: 'center', padding: '20px', border: '1px solid #eee', borderRadius: '8px' }}>\r\n      <h3>{t('titles.matchVerbPronoun', 'Match Pronouns with Verb Forms')}</h3>\r\n      <p style={{fontSize: '1.2em', fontWeight: 'bold', ...(isLatinized && targetVerbInfinitive !== latinizedVerbInfinitive && {fontStyle: 'italic'})}}>\r\n        {t('labels.verb', 'Verb')}: {latinizedVerbInfinitive || targetVerbInfinitive}\r\n      </p>\r\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'flex-start', margin: '20px 0' }}>\r\n        <div style={columnStyle}>\r\n          <h4>{t('labels.pronouns', 'Pronouns')}</h4>\r\n          {pronounsColumn.map(pronoun => {\r\n            const ref = React.createRef();\r\n            return (\r\n            <button \r\n              key={`pronoun-${pronoun}`} \r\n              ref={ref}\r\n              style={itemStyleBuilder(pronoun, 'pronoun')}\r\n              onClick={() => handleItemClick(pronoun, 'pronoun', ref.current)}\r\n              disabled={matchedItems[pronoun] || isRevealed}\r\n            >\r\n              {getLatinizedText(pronoun, language)}\r\n            </button>\r\n          )})}\r\n        </div>\r\n        <div style={columnStyle}>\r\n          <h4>{t('labels.verbForms', 'Verb Forms')}</h4>\r\n          {formsColumn.map(form => {\r\n            const ref = React.createRef();\r\n            return (\r\n            <button \r\n              key={`form-${form}`} \r\n              ref={ref}\r\n              style={itemStyleBuilder(form, 'form')}\r\n              onClick={() => handleItemClick(form, 'form', ref.current)}\r\n              disabled={matchedItems[form] || isRevealed}\r\n            >\r\n              {getLatinizedText(form, language)}\r\n            </button>\r\n          )})}\r\n        </div>\r\n      </div>\r\n      <FeedbackDisplay message={feedback.message} type={feedback.type} language={language} />\r\n      <ExerciseControls\r\n        onShowHint={!isRevealed && numCorrectMatches < actualPairs.length ? showHint : undefined}\r\n        onRevealAnswer={!isRevealed && numCorrectMatches < actualPairs.length ? revealAllAnswers : undefined}\r\n        onNextExercise={setupNewExercise}\r\n        config={{\r\n          showCheck: false, \r\n          showHint: !isRevealed && numCorrectMatches < actualPairs.length,\r\n          showReveal: !isRevealed && numCorrectMatches < actualPairs.length,\r\n          showNext: true,\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MatchVerbsPronounsExercise;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}