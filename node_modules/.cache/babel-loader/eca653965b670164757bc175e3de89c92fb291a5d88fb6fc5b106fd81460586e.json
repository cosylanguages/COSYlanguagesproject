{"ast":null,"code":"import _objectSpread from\"/workspaces/COSYlanguagesproject/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect,useCallback}from'react';import{loadVocabularyData}from'../../../../utils/exerciseDataService';import{useLatinizationContext}from'../../../../contexts/LatinizationContext';import useLatinization from'../../../../hooks/useLatinization';import{pronounceText,unlockAudioPlayback}from'../../../../utils/speechUtils';import ExerciseControls from'../../ExerciseControls';import FeedbackDisplay from'../../FeedbackDisplay';import{useProgress}from'../../../../contexts/ProgressContext';// Import useProgress\nimport{normalizeString}from'../../../../utils/stringUtils';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const ShowWordExercise=_ref=>{let{language,days,exerciseKey}=_ref;const[currentWord,setCurrentWord]=useState('');const[isLoading,setIsLoading]=useState(true);const[error,setError]=useState(null);const{isLatinized}=useLatinizationContext();const progress=useProgress();const latinizedWord=useLatinization(currentWord,language);useEffect(()=>{unlockAudioPlayback();},[]);const fetchAndSetNewWord=useCallback(async()=>{setIsLoading(true);setError(null);const oldWord=currentWord;// Keep track of the word being replaced\nsetCurrentWord('');// If there was a word, consider it \"seen\" or \"passed\" for SRS purposes\n// This is a simple way; more complex logic might depend on user interaction (e.g., if they pronounced it)\nif(oldWord){const itemId=\"showword_\".concat(normalizeString(oldWord));// For ShowWord, \"correct\" might mean the user acknowledged/studied it.\n// Since there's no direct input, we might assume \"correct\" when they move to the next.\n// Or, this could be a place for a \"I knew this\" / \"I didn't know this\" button in future.\n// For now, let's log it as a generic interaction.\nprogress.scheduleReview(itemId,'vocab-show-word',true);// Assume \"true\" as they moved on\n}try{const{data:words,error:fetchError}=await loadVocabularyData(language,days);if(fetchError){throw new Error(fetchError.message||fetchError.error||'Failed to load vocabulary words.');}if(words&&words.length>0){const randomIndex=Math.floor(Math.random()*words.length);setCurrentWord(words[randomIndex]);}else{setError('No vocabulary words found for the selected criteria.');}}catch(err){console.error(\"ShowWordExercise - Error fetching word:\",err);setError(err.message||'An unexpected error occurred.');}finally{setIsLoading(false);}},[language,days,progress,currentWord]);// Added currentWord to useCallback deps for oldWord tracking\nuseEffect(()=>{if(language&&days&&days.length>0){fetchAndSetNewWord();}else{setIsLoading(false);setError(\"Please select a language and day(s).\");setCurrentWord('');}},[fetchAndSetNewWord,exerciseKey,language,days]);// fetchAndSetNewWord is already memoized\nconst handleNextWord=()=>{fetchAndSetNewWord();// This will also trigger the progress tracking for the \"oldWord\" inside fetchAndSetNewWord\n};const handlePronounce=async()=>{if(currentWord&&language){try{await pronounceText(currentWord,language);}catch(speechError){console.error(\"Error pronouncing word:\",speechError);setError(\"Could not pronounce the word. Please ensure your browser supports speech synthesis and audio is enabled.\");}}};const wordStyle=isLatinized&&currentWord!==latinizedWord?{fontFamily:'Arial, sans-serif',fontStyle:'italic'}:{};if(isLoading){return/*#__PURE__*/_jsx(\"p\",{children:\"Loading word...\"});}if(error){return/*#__PURE__*/_jsx(FeedbackDisplay,{message:error,type:\"error\"});}if(!currentWord&&!isLoading){return/*#__PURE__*/_jsx(FeedbackDisplay,{message:\"No word to display. Try different selections or check data.\",type:\"info\"});}const pronounceButtonStyle={padding:'10px 15px',fontSize:'1rem',cursor:'pointer',backgroundColor:'#007bff',color:'white',border:'none',borderRadius:'5px',marginRight:'10px'};return/*#__PURE__*/_jsxs(\"div\",{style:{textAlign:'center',padding:'20px',border:'1px solid #eee',borderRadius:'8px'},children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Random Word\"}),currentWord&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{style:_objectSpread({fontSize:'2.5rem',margin:'20px 0',padding:'10px'},wordStyle),\"aria-label\":\"Word to practice: \".concat(currentWord),children:latinizedWord||currentWord}),/*#__PURE__*/_jsxs(\"div\",{style:{marginTop:'20px',display:'flex',justifyContent:'center',alignItems:'center',gap:'10px'},children:[/*#__PURE__*/_jsx(\"button\",{onClick:handlePronounce,style:pronounceButtonStyle,disabled:!currentWord,children:\"\\uD83D\\uDD0A Pronounce\"}),/*#__PURE__*/_jsx(ExerciseControls,{onNextExercise:handleNextWord,config:{showNext:true,showCheck:false,showHint:false,showReveal:false,showRandomize:false}})]})]})]});};export default ShowWordExercise;","map":{"version":3,"names":["React","useState","useEffect","useCallback","loadVocabularyData","useLatinizationContext","useLatinization","pronounceText","unlockAudioPlayback","ExerciseControls","FeedbackDisplay","useProgress","normalizeString","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","ShowWordExercise","_ref","language","days","exerciseKey","currentWord","setCurrentWord","isLoading","setIsLoading","error","setError","isLatinized","progress","latinizedWord","fetchAndSetNewWord","oldWord","itemId","concat","scheduleReview","data","words","fetchError","Error","message","length","randomIndex","Math","floor","random","err","console","handleNextWord","handlePronounce","speechError","wordStyle","fontFamily","fontStyle","children","type","pronounceButtonStyle","padding","fontSize","cursor","backgroundColor","color","border","borderRadius","marginRight","style","textAlign","_objectSpread","margin","marginTop","display","justifyContent","alignItems","gap","onClick","disabled","onNextExercise","config","showNext","showCheck","showHint","showReveal","showRandomize"],"sources":["/workspaces/COSYlanguagesproject/src/components/Freestyle/exercises/vocabulary/ShowWordExercise.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { loadVocabularyData } from '../../../../utils/exerciseDataService';\r\nimport { useLatinizationContext } from '../../../../contexts/LatinizationContext';\r\nimport useLatinization from '../../../../hooks/useLatinization';\r\nimport { pronounceText, unlockAudioPlayback } from '../../../../utils/speechUtils';\r\nimport ExerciseControls from '../../ExerciseControls'; \r\nimport FeedbackDisplay from '../../FeedbackDisplay';\r\nimport { useProgress } from '../../../../contexts/ProgressContext'; // Import useProgress\r\nimport { normalizeString } from '../../../../utils/stringUtils';\r\n\r\n\r\nconst ShowWordExercise = ({ language, days, exerciseKey }) => {\r\n  const [currentWord, setCurrentWord] = useState('');\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const { isLatinized } = useLatinizationContext();\r\n  const progress = useProgress();\r\n\r\n  const latinizedWord = useLatinization(currentWord, language);\r\n\r\n  useEffect(() => {\r\n    unlockAudioPlayback(); \r\n  }, []);\r\n\r\n\r\n  const fetchAndSetNewWord = useCallback(async () => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    const oldWord = currentWord; // Keep track of the word being replaced\r\n    setCurrentWord(''); \r\n\r\n    // If there was a word, consider it \"seen\" or \"passed\" for SRS purposes\r\n    // This is a simple way; more complex logic might depend on user interaction (e.g., if they pronounced it)\r\n    if (oldWord) {\r\n        const itemId = `showword_${normalizeString(oldWord)}`;\r\n        // For ShowWord, \"correct\" might mean the user acknowledged/studied it.\r\n        // Since there's no direct input, we might assume \"correct\" when they move to the next.\r\n        // Or, this could be a place for a \"I knew this\" / \"I didn't know this\" button in future.\r\n        // For now, let's log it as a generic interaction.\r\n        progress.scheduleReview(itemId, 'vocab-show-word', true); // Assume \"true\" as they moved on\r\n    }\r\n\r\n    try {\r\n      const { data: words, error: fetchError } = await loadVocabularyData(language, days);\r\n      if (fetchError) {\r\n        throw new Error(fetchError.message || fetchError.error || 'Failed to load vocabulary words.');\r\n      }\r\n      if (words && words.length > 0) {\r\n        const randomIndex = Math.floor(Math.random() * words.length);\r\n        setCurrentWord(words[randomIndex]);\r\n      } else {\r\n        setError('No vocabulary words found for the selected criteria.');\r\n      }\r\n    } catch (err) {\r\n      console.error(\"ShowWordExercise - Error fetching word:\", err);\r\n      setError(err.message || 'An unexpected error occurred.');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [language, days, progress, currentWord]); // Added currentWord to useCallback deps for oldWord tracking\r\n\r\n  useEffect(() => {\r\n    if (language && days && days.length > 0) { \r\n        fetchAndSetNewWord();\r\n    } else {\r\n        setIsLoading(false);\r\n        setError(\"Please select a language and day(s).\");\r\n        setCurrentWord('');\r\n    }\r\n  }, [fetchAndSetNewWord, exerciseKey, language, days]); // fetchAndSetNewWord is already memoized\r\n\r\n  const handleNextWord = () => {\r\n    fetchAndSetNewWord(); // This will also trigger the progress tracking for the \"oldWord\" inside fetchAndSetNewWord\r\n  };\r\n\r\n  const handlePronounce = async () => {\r\n    if (currentWord && language) {\r\n      try {\r\n        await pronounceText(currentWord, language);\r\n      } catch (speechError) {\r\n        console.error(\"Error pronouncing word:\", speechError);\r\n        setError(\"Could not pronounce the word. Please ensure your browser supports speech synthesis and audio is enabled.\");\r\n      }\r\n    }\r\n  };\r\n  \r\n  const wordStyle = (isLatinized && currentWord !== latinizedWord) ? { fontFamily: 'Arial, sans-serif', fontStyle: 'italic' } : {};\r\n\r\n  if (isLoading) {\r\n    return <p>Loading word...</p>;\r\n  }\r\n\r\n  if (error) {\r\n    return <FeedbackDisplay message={error} type=\"error\" />;\r\n  }\r\n\r\n  if (!currentWord && !isLoading) { \r\n    return <FeedbackDisplay message=\"No word to display. Try different selections or check data.\" type=\"info\" />;\r\n  }\r\n  \r\n  const pronounceButtonStyle = {\r\n    padding: '10px 15px',\r\n    fontSize: '1rem',\r\n    cursor: 'pointer',\r\n    backgroundColor: '#007bff',\r\n    color: 'white',\r\n    border: 'none',\r\n    borderRadius: '5px',\r\n    marginRight: '10px', \r\n  };\r\n\r\n\r\n  return (\r\n    <div style={{ textAlign: 'center', padding: '20px', border: '1px solid #eee', borderRadius: '8px' }}>\r\n      <h3>Random Word</h3>\r\n      {currentWord && ( \r\n        <>\r\n          <div\r\n            style={{ fontSize: '2.5rem', margin: '20px 0', padding: '10px', ...wordStyle }}\r\n            aria-label={`Word to practice: ${currentWord}`}\r\n          >\r\n            {latinizedWord || currentWord}\r\n          </div>\r\n          <div style={{ marginTop: '20px', display: 'flex', justifyContent: 'center', alignItems: 'center', gap: '10px' }}>\r\n            <button onClick={handlePronounce} style={pronounceButtonStyle} disabled={!currentWord}>\r\n              🔊 Pronounce\r\n            </button>\r\n            <ExerciseControls \r\n              onNextExercise={handleNextWord}\r\n              config={{\r\n                showNext: true,\r\n                showCheck: false,\r\n                showHint: false,\r\n                showReveal: false,\r\n                showRandomize: false, \r\n              }}\r\n            />\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ShowWordExercise;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}