{"ast":null,"code":"import React,{useState,useEffect,useCallback}from'react';import{loadVocabularyData}from'../../../../utils/exerciseDataService';import{pronounceText}from'../../../../utils/speechUtils';import FeedbackDisplay from'../../FeedbackDisplay';import ExerciseControls from'../../ExerciseControls';import{useLatinizationContext}from'../../../../contexts/LatinizationContext';import useLatinization from'../../../../hooks/useLatinization';import{normalizeString as normalizeStringUtil}from'../../../../utils/stringUtils';import{useProgress}from'../../../../contexts/ProgressContext';import{useI18n}from'../../../../i18n/I18nContext';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const TranscribeWordExercise=_ref=>{let{language,days,exerciseKey}=_ref;const[correctWord,setCorrectWord]=useState('');const[userInput,setUserInput]=useState('');const[feedback,setFeedback]=useState({message:'',type:''});const[isLoading,setIsLoading]=useState(true);const[error,setError]=useState(null);const[isRevealed,setIsRevealed]=useState(false);const[isAnsweredCorrectly,setIsAnsweredCorrectly]=useState(false);const{isLatinized}=useLatinizationContext();const getLatinizedText=useLatinization;const progress=useProgress();const{t}=useI18n();const fetchAndSetNewWord=useCallback(async()=>{setIsLoading(true);setError(null);setFeedback({message:'',type:''});setUserInput('');setIsRevealed(false);setCorrectWord('');setIsAnsweredCorrectly(false);try{const{data:words,error:fetchError}=await loadVocabularyData(language,days);if(fetchError){throw new Error(fetchError.message||fetchError.error||'Failed to load vocabulary words.');}if(words&&words.length>0){const randomIndex=Math.floor(Math.random()*words.length);const wordToTranscribe=words[randomIndex];setCorrectWord(wordToTranscribe);if(wordToTranscribe&&language){pronounceText(wordToTranscribe,language).catch(err=>{console.error(\"Autoplay pronunciation error:\",err);});}}else{setError(t('exercises.noWordsFound','No vocabulary words found for the selected criteria.'));}}catch(err){console.error(\"TranscribeWordExercise - Error fetching word:\",err);setError(err.message||t('errors.unexpectedError','An unexpected error occurred.'));}finally{setIsLoading(false);}},[language,days,t]);useEffect(()=>{if(language&&days&&days.length>0){fetchAndSetNewWord();}else{setIsLoading(false);setError(t('errors.selectLangDay',\"Please select a language and day(s).\"));setCorrectWord('');}},[fetchAndSetNewWord,exerciseKey,language,days,t]);const handlePlaySound=()=>{if(correctWord&&language){pronounceText(correctWord,language).catch(err=>{console.error(\"Pronunciation error on button click:\",err);setFeedback({message:t('errors.soundPlayError','Could not play sound.'),type:'error'});});}};const handleInputChange=e=>{setUserInput(e.target.value);if(feedback.message)setFeedback({message:'',type:''});};const checkAnswer=()=>{if(!correctWord||isRevealed||isAnsweredCorrectly)return;const latinizedCorrectDisplay=getLatinizedText(correctWord,language);const displayAnswer=isLatinized?latinizedCorrectDisplay:correctWord;const itemId=\"transcribe_\".concat(normalizeStringUtil(correctWord));const isCorrect=normalizeStringUtil(userInput)===normalizeStringUtil(correctWord);if(isCorrect){setFeedback({message:t('feedback.correct','Correct!'),type:'correct'});progress.awardCorrectAnswer(itemId,'vocab-transcribe',language);setIsAnsweredCorrectly(true);setTimeout(()=>{fetchAndSetNewWord();},1500);// 1.5-second delay\n}else{setFeedback({message:t('feedback.incorrectAnswerIs',\"Incorrect. The correct answer is: \".concat(displayAnswer),{correctAnswer:displayAnswer}),type:'incorrect'});progress.awardIncorrectAnswer(itemId,'vocab-transcribe',language);}};const showHint=()=>{if(!correctWord||isRevealed||isAnsweredCorrectly)return;const firstLetter=getLatinizedText(correctWord[0],language);setFeedback({message:t('feedback.hintWordStructure',\"Hint: The word has \".concat(correctWord.length,\" letters and starts with '\").concat(firstLetter,\"'.\"),{length:correctWord.length,letter:firstLetter}),type:'hint'});};const revealTheAnswer=()=>{if(!correctWord||isAnsweredCorrectly)return;// Allow reveal even if already revealed, but prevent re-progression if already correct\nconst latinizedCorrectDisplay=getLatinizedText(correctWord,language);const displayAnswer=isLatinized?latinizedCorrectDisplay:correctWord;const itemId=\"transcribe_\".concat(normalizeStringUtil(correctWord));setUserInput(correctWord);setFeedback({message:t('feedback.correctAnswerIs',\"The correct answer is: \".concat(displayAnswer),{correctAnswer:displayAnswer}),type:'info'});setIsRevealed(true);progress.scheduleReview(itemId,'vocab-transcribe',language,false);// Ensure language is passed\nif(!isAnsweredCorrectly){// Only auto-progress if not already answered correctly\nsetTimeout(()=>{fetchAndSetNewWord();},2000);// Slightly longer delay for revealed answers\n}};const handleNext=()=>{fetchAndSetNewWord();};if(isLoading){return/*#__PURE__*/_jsx(\"p\",{children:t('loading.transcribeExercise','Loading transcription exercise...')});}if(error){return/*#__PURE__*/_jsx(FeedbackDisplay,{message:error,type:\"error\"});}if(!correctWord&&!isLoading){return/*#__PURE__*/_jsx(FeedbackDisplay,{message:t('exercises.noWordForTranscription',\"No word available for transcription. Try different selections.\"),type:\"info\"});}return/*#__PURE__*/_jsxs(\"div\",{style:{textAlign:'center',padding:'20px',border:'1px solid #eee',borderRadius:'8px'},children:[/*#__PURE__*/_jsx(\"h3\",{children:t('titles.typeWhatYouHear','Type What You Hear')}),/*#__PURE__*/_jsx(\"button\",{onClick:handlePlaySound,disabled:!correctWord||isLoading,style:{fontSize:'2rem',margin:'20px',background:'none',border:'none',cursor:'pointer'},\"aria-label\":t('aria.playSound',\"Play sound\"),children:\"\\uD83D\\uDD0A\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:userInput,onChange:handleInputChange,placeholder:t('placeholders.typeHere',\"Type here...\"),disabled:isRevealed||isAnsweredCorrectly||isLoading,style:{padding:'10px',fontSize:'1rem',width:'250px',marginBottom:'10px',border:'1px solid #ccc',borderRadius:'4px'},onKeyPress:event=>{if(event.key==='Enter'&&!isRevealed&&!isAnsweredCorrectly){checkAnswer();}}}),/*#__PURE__*/_jsx(FeedbackDisplay,{message:feedback.message,type:feedback.type,language:language}),/*#__PURE__*/_jsx(ExerciseControls,{onCheckAnswer:!isRevealed&&!isAnsweredCorrectly&&!!correctWord?checkAnswer:undefined,onShowHint:!isRevealed&&!isAnsweredCorrectly&&!!correctWord?showHint:undefined,onRevealAnswer:!isRevealed&&!isAnsweredCorrectly&&!!correctWord?revealTheAnswer:undefined,onNextExercise:handleNext,config:{showCheck:!isRevealed&&!isAnsweredCorrectly&&!!correctWord,showHint:!isRevealed&&!isAnsweredCorrectly&&!!correctWord,showReveal:!isRevealed&&!isAnsweredCorrectly&&!!correctWord,showNext:true}})]});};export default TranscribeWordExercise;","map":{"version":3,"names":["React","useState","useEffect","useCallback","loadVocabularyData","pronounceText","FeedbackDisplay","ExerciseControls","useLatinizationContext","useLatinization","normalizeString","normalizeStringUtil","useProgress","useI18n","jsx","_jsx","jsxs","_jsxs","TranscribeWordExercise","_ref","language","days","exerciseKey","correctWord","setCorrectWord","userInput","setUserInput","feedback","setFeedback","message","type","isLoading","setIsLoading","error","setError","isRevealed","setIsRevealed","isAnsweredCorrectly","setIsAnsweredCorrectly","isLatinized","getLatinizedText","progress","t","fetchAndSetNewWord","data","words","fetchError","Error","length","randomIndex","Math","floor","random","wordToTranscribe","catch","err","console","handlePlaySound","handleInputChange","e","target","value","checkAnswer","latinizedCorrectDisplay","displayAnswer","itemId","concat","isCorrect","awardCorrectAnswer","setTimeout","correctAnswer","awardIncorrectAnswer","showHint","firstLetter","letter","revealTheAnswer","scheduleReview","handleNext","children","style","textAlign","padding","border","borderRadius","onClick","disabled","fontSize","margin","background","cursor","onChange","placeholder","width","marginBottom","onKeyPress","event","key","onCheckAnswer","undefined","onShowHint","onRevealAnswer","onNextExercise","config","showCheck","showReveal","showNext"],"sources":["/workspaces/COSYlanguagesproject/src/components/Freestyle/exercises/vocabulary/TranscribeWordExercise.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { loadVocabularyData } from '../../../../utils/exerciseDataService';\r\nimport { pronounceText } from '../../../../utils/speechUtils';\r\nimport FeedbackDisplay from '../../FeedbackDisplay';\r\nimport ExerciseControls from '../../ExerciseControls';\r\nimport { useLatinizationContext } from '../../../../contexts/LatinizationContext';\r\nimport useLatinization from '../../../../hooks/useLatinization';\r\nimport { normalizeString as normalizeStringUtil } from '../../../../utils/stringUtils';\r\nimport { useProgress } from '../../../../contexts/ProgressContext';\r\nimport { useI18n } from '../../../../i18n/I18nContext';\r\n\r\nconst TranscribeWordExercise = ({ language, days, exerciseKey }) => {\r\n  const [correctWord, setCorrectWord] = useState('');\r\n  const [userInput, setUserInput] = useState('');\r\n  const [feedback, setFeedback] = useState({ message: '', type: '' });\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [isRevealed, setIsRevealed] = useState(false);\r\n  const [isAnsweredCorrectly, setIsAnsweredCorrectly] = useState(false);\r\n\r\n  const { isLatinized } = useLatinizationContext();\r\n  const getLatinizedText = useLatinization;\r\n  const progress = useProgress();\r\n  const { t } = useI18n();\r\n\r\n  const fetchAndSetNewWord = useCallback(async () => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    setFeedback({ message: '', type: '' });\r\n    setUserInput('');\r\n    setIsRevealed(false);\r\n    setCorrectWord('');\r\n    setIsAnsweredCorrectly(false);\r\n    try {\r\n      const { data: words, error: fetchError } = await loadVocabularyData(language, days);\r\n      if (fetchError) {\r\n        throw new Error(fetchError.message || fetchError.error || 'Failed to load vocabulary words.');\r\n      }\r\n      if (words && words.length > 0) {\r\n        const randomIndex = Math.floor(Math.random() * words.length);\r\n        const wordToTranscribe = words[randomIndex];\r\n        setCorrectWord(wordToTranscribe);\r\n        \r\n        if (wordToTranscribe && language) {\r\n            pronounceText(wordToTranscribe, language).catch(err => {\r\n                console.error(\"Autoplay pronunciation error:\", err);\r\n            });\r\n        }\r\n      } else {\r\n        setError(t('exercises.noWordsFound', 'No vocabulary words found for the selected criteria.'));\r\n      }\r\n    } catch (err) {\r\n      console.error(\"TranscribeWordExercise - Error fetching word:\", err);\r\n      setError(err.message || t('errors.unexpectedError', 'An unexpected error occurred.'));\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [language, days, t]);\r\n\r\n  useEffect(() => {\r\n    if (language && days && days.length > 0) {\r\n      fetchAndSetNewWord();\r\n    } else {\r\n      setIsLoading(false);\r\n      setError(t('errors.selectLangDay', \"Please select a language and day(s).\"));\r\n      setCorrectWord('');\r\n    }\r\n  }, [fetchAndSetNewWord, exerciseKey, language, days, t]);\r\n\r\n  const handlePlaySound = () => {\r\n    if (correctWord && language) {\r\n      pronounceText(correctWord, language).catch(err => {\r\n        console.error(\"Pronunciation error on button click:\", err);\r\n        setFeedback({ message: t('errors.soundPlayError', 'Could not play sound.'), type: 'error'});\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    setUserInput(e.target.value);\r\n    if (feedback.message) setFeedback({ message: '', type: '' });\r\n  };\r\n\r\n  const checkAnswer = () => {\r\n    if (!correctWord || isRevealed || isAnsweredCorrectly) return;\r\n    \r\n    const latinizedCorrectDisplay = getLatinizedText(correctWord, language);\r\n    const displayAnswer = isLatinized ? latinizedCorrectDisplay : correctWord;\r\n    const itemId = `transcribe_${normalizeStringUtil(correctWord)}`;\r\n    const isCorrect = normalizeStringUtil(userInput) === normalizeStringUtil(correctWord);\r\n\r\n    if (isCorrect) {\r\n      setFeedback({ message: t('feedback.correct', 'Correct!'), type: 'correct' });\r\n      progress.awardCorrectAnswer(itemId, 'vocab-transcribe', language);\r\n      setIsAnsweredCorrectly(true);\r\n      setTimeout(() => {\r\n        fetchAndSetNewWord();\r\n      }, 1500); // 1.5-second delay\r\n    } else {\r\n      setFeedback({ message: t('feedback.incorrectAnswerIs', `Incorrect. The correct answer is: ${displayAnswer}`, { correctAnswer: displayAnswer }), type: 'incorrect' });\r\n      progress.awardIncorrectAnswer(itemId, 'vocab-transcribe', language);\r\n    }\r\n  };\r\n\r\n  const showHint = () => {\r\n    if (!correctWord || isRevealed || isAnsweredCorrectly) return;\r\n    const firstLetter = getLatinizedText(correctWord[0], language);\r\n    setFeedback({ message: t('feedback.hintWordStructure', `Hint: The word has ${correctWord.length} letters and starts with '${firstLetter}'.`, { length: correctWord.length, letter: firstLetter }), type: 'hint' });\r\n  };\r\n\r\n  const revealTheAnswer = () => {\r\n    if (!correctWord || isAnsweredCorrectly) return; // Allow reveal even if already revealed, but prevent re-progression if already correct\r\n    const latinizedCorrectDisplay = getLatinizedText(correctWord, language);\r\n    const displayAnswer = isLatinized ? latinizedCorrectDisplay : correctWord;\r\n    const itemId = `transcribe_${normalizeStringUtil(correctWord)}`;\r\n    \r\n    setUserInput(correctWord); \r\n    setFeedback({ message: t('feedback.correctAnswerIs', `The correct answer is: ${displayAnswer}`, { correctAnswer: displayAnswer }), type: 'info' });\r\n    setIsRevealed(true);\r\n    progress.scheduleReview(itemId, 'vocab-transcribe', language, false); // Ensure language is passed\r\n\r\n    if (!isAnsweredCorrectly) { // Only auto-progress if not already answered correctly\r\n        setTimeout(() => {\r\n            fetchAndSetNewWord();\r\n        }, 2000); // Slightly longer delay for revealed answers\r\n    }\r\n  };\r\n\r\n  const handleNext = () => {\r\n    fetchAndSetNewWord();\r\n  };\r\n\r\n  if (isLoading) {\r\n    return <p>{t('loading.transcribeExercise', 'Loading transcription exercise...')}</p>;\r\n  }\r\n\r\n  if (error) {\r\n    return <FeedbackDisplay message={error} type=\"error\" />;\r\n  }\r\n\r\n  if (!correctWord && !isLoading) { \r\n    return <FeedbackDisplay message={t('exercises.noWordForTranscription', \"No word available for transcription. Try different selections.\")} type=\"info\" />;\r\n  }\r\n  \r\n  return (\r\n    <div style={{ textAlign: 'center', padding: '20px', border: '1px solid #eee', borderRadius: '8px' }}>\r\n      <h3>{t('titles.typeWhatYouHear', 'Type What You Hear')}</h3>\r\n      <button onClick={handlePlaySound} disabled={!correctWord || isLoading} style={{ fontSize: '2rem', margin: '20px', background: 'none', border: 'none', cursor: 'pointer' }} aria-label={t('aria.playSound', \"Play sound\")}>\r\n        🔊\r\n      </button>\r\n      <input\r\n        type=\"text\"\r\n        value={userInput}\r\n        onChange={handleInputChange}\r\n        placeholder={t('placeholders.typeHere', \"Type here...\")}\r\n        disabled={isRevealed || isAnsweredCorrectly || isLoading}\r\n        style={{ padding: '10px', fontSize: '1rem', width: '250px', marginBottom: '10px', border: '1px solid #ccc', borderRadius: '4px' }}\r\n        onKeyPress={(event) => {\r\n            if (event.key === 'Enter' && !isRevealed && !isAnsweredCorrectly) {\r\n              checkAnswer();\r\n            }\r\n        }}\r\n      />\r\n      <FeedbackDisplay message={feedback.message} type={feedback.type} language={language} />\r\n      <ExerciseControls\r\n        onCheckAnswer={!isRevealed && !isAnsweredCorrectly && !!correctWord ? checkAnswer : undefined}\r\n        onShowHint={!isRevealed && !isAnsweredCorrectly && !!correctWord ? showHint : undefined}\r\n        onRevealAnswer={!isRevealed && !isAnsweredCorrectly && !!correctWord ? revealTheAnswer : undefined}\r\n        onNextExercise={handleNext}\r\n        config={{ \r\n            showCheck: !isRevealed && !isAnsweredCorrectly && !!correctWord, \r\n            showHint: !isRevealed && !isAnsweredCorrectly && !!correctWord, \r\n            showReveal: !isRevealed && !isAnsweredCorrectly && !!correctWord,\r\n            showNext: true, \r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TranscribeWordExercise;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}