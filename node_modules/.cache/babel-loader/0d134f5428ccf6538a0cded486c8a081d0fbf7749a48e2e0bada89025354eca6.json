{"ast":null,"code":"// Defines API functions related to fetching plan data.\n\nconst BASE_URL = 'http://localhost:3001/api'; // Define the base URL for the API\n\n/**\r\n * Fetches the user's plan data from the backend.\r\n * @param {string} token - The authentication token for the user.\r\n * @returns {Promise<object>} A promise that resolves to the plan data.\r\n * @throws {Error} If the network response is not ok.\r\n */\nexport async function fetchPlan(token) {\n  const res = await fetch(`${BASE_URL}/plan`, {\n    // Use BASE_URL\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json' // Good practice to include Content-Type\n    }\n  });\n  if (!res.ok) {\n    // Attempt to parse error message from backend if available\n    const errorData = await res.json().catch(() => ({\n      message: 'Failed to fetch plan and error response is not valid JSON'\n    }));\n    throw new Error(errorData.message || `Failed to fetch plan. Status: ${res.status}`);\n  }\n  return await res.json();\n}\n\n// Future API functions related to plans can be added here.\n// For example:\n// export async function updatePlanSection(token, sectionId, sectionData) { ... }","map":{"version":3,"names":["BASE_URL","fetchPlan","token","res","fetch","headers","ok","errorData","json","catch","message","Error","status"],"sources":["/workspaces/COSYlanguagesproject/src/api/plan.js"],"sourcesContent":["// Defines API functions related to fetching plan data.\r\n\r\nconst BASE_URL = 'http://localhost:3001/api'; // Define the base URL for the API\r\n\r\n/**\r\n * Fetches the user's plan data from the backend.\r\n * @param {string} token - The authentication token for the user.\r\n * @returns {Promise<object>} A promise that resolves to the plan data.\r\n * @throws {Error} If the network response is not ok.\r\n */\r\nexport async function fetchPlan(token) {\r\n    const res = await fetch(`${BASE_URL}/plan`, { // Use BASE_URL\r\n        headers: { \r\n            'Authorization': `Bearer ${token}`,\r\n            'Content-Type': 'application/json' // Good practice to include Content-Type\r\n        }\r\n    });\r\n    if (!res.ok) {\r\n        // Attempt to parse error message from backend if available\r\n        const errorData = await res.json().catch(() => ({ message: 'Failed to fetch plan and error response is not valid JSON' }));\r\n        throw new Error(errorData.message || `Failed to fetch plan. Status: ${res.status}`);\r\n    }\r\n    return await res.json();\r\n}\r\n\r\n// Future API functions related to plans can be added here.\r\n// For example:\r\n// export async function updatePlanSection(token, sectionId, sectionData) { ... }\r\n"],"mappings":"AAAA;;AAEA,MAAMA,QAAQ,GAAG,2BAA2B,CAAC,CAAC;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeC,SAASA,CAACC,KAAK,EAAE;EACnC,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGJ,QAAQ,OAAO,EAAE;IAAE;IAC1CK,OAAO,EAAE;MACL,eAAe,EAAE,UAAUH,KAAK,EAAE;MAClC,cAAc,EAAE,kBAAkB,CAAC;IACvC;EACJ,CAAC,CAAC;EACF,IAAI,CAACC,GAAG,CAACG,EAAE,EAAE;IACT;IACA,MAAMC,SAAS,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,OAAO;MAAEC,OAAO,EAAE;IAA4D,CAAC,CAAC,CAAC;IAC1H,MAAM,IAAIC,KAAK,CAACJ,SAAS,CAACG,OAAO,IAAI,iCAAiCP,GAAG,CAACS,MAAM,EAAE,CAAC;EACvF;EACA,OAAO,MAAMT,GAAG,CAACK,IAAI,CAAC,CAAC;AAC3B;;AAEA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}