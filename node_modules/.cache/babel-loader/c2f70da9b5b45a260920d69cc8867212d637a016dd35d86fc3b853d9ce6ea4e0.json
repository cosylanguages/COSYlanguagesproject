{"ast":null,"code":"var _jsxFileName = \"/workspaces/COSYlanguagesproject/src/components/Freestyle/FeedbackDisplay.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useLatinizationContext } from '../../contexts/LatinizationContext';\nimport useLatinization from '../../hooks/useLatinization';\n\n/**\r\n * Displays feedback messages for exercises.\r\n * Props:\r\n * - message: string or React node - The feedback message.\r\n * - type: string (e.g., 'correct', 'incorrect', 'hint', 'info', 'error') - Determines styling.\r\n * - language: string (optional) - The language of the feedback message, for latinization.\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FeedbackDisplay = ({\n  message,\n  type,\n  language\n}) => {\n  _s();\n  // Call the useLatinization hook unconditionally at the top level.\n  // Pass an empty string if message is not a string to prevent errors in the hook.\n  // The hook itself is expected to use LatinizationContext to determine if latinization is active.\n  const latinizedVersion = useLatinization(typeof message === 'string' ? message : '', language);\n\n  // Determine the actual message to display.\n  // If the original message was not a string, or no language was provided, use the original message.\n  // Otherwise, use the output from useLatinization (which respects the isLatinized context).\n  const processedMessage = typeof message === 'string' && language ? latinizedVersion : message;\n\n  // Get isLatinized from context, primarily for UI adjustments like font style,\n  // not for deciding whether to call useLatinization.\n  const {\n    isLatinized\n  } = useLatinizationContext();\n  if (!message) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        minHeight: '24px',\n        margin: '10px 0'\n      },\n      \"aria-live\": \"polite\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 12\n    }, this); // Reserve space\n  }\n  let style = {\n    padding: '10px',\n    margin: '10px 0',\n    borderRadius: '4px',\n    textAlign: 'center',\n    minHeight: '24px' // Ensure it doesn't collapse when empty\n  };\n  let textPrefix = '';\n  switch (type) {\n    case 'correct':\n      style.backgroundColor = '#d4edda';\n      style.color = '#155724';\n      style.borderColor = '#c3e6cb';\n      textPrefix = '‚úÖ ';\n      break;\n    case 'incorrect':\n      style.backgroundColor = '#f8d7da';\n      style.color = '#721c24';\n      style.borderColor = '#f5c6cb';\n      textPrefix = '‚ùå ';\n      break;\n    case 'hint':\n      style.backgroundColor = '#fff3cd';\n      style.color = '#856404';\n      style.borderColor = '#ffeeba';\n      textPrefix = 'üí° ';\n      break;\n    case 'info':\n      style.backgroundColor = '#d1ecf1';\n      style.color = '#0c5460';\n      style.borderColor = '#bee5eb';\n      textPrefix = '‚ÑπÔ∏è ';\n      break;\n    case 'error':\n      style.backgroundColor = '#f8d7da'; // Same as incorrect\n      style.color = '#721c24';\n      style.borderColor = '#f5c6cb';\n      textPrefix = '‚ö†Ô∏è ';\n      break;\n    default:\n      // Neutral / no specific type\n      style.backgroundColor = '#e9ecef';\n      style.color = '#495057';\n      style.borderColor = '#ced4da';\n  }\n\n  // Apply visual indication for latinized text if necessary\n  if (isLatinized && typeof processedMessage === 'string' && typeof message === 'string' && processedMessage !== message) {\n    style.fontStyle = 'italic';\n    // style.fontFamily = 'Arial, sans-serif'; // Example alternative font\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: style,\n    role: \"alert\",\n    \"aria-live\": \"assertive\",\n    children: [textPrefix, processedMessage]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n_s(FeedbackDisplay, \"gWq0/tHbXlYFbUuBrcZDiQob1kU=\", false, function () {\n  return [useLatinization, useLatinizationContext];\n});\n_c = FeedbackDisplay;\nexport default FeedbackDisplay;\nvar _c;\n$RefreshReg$(_c, \"FeedbackDisplay\");","map":{"version":3,"names":["React","useLatinizationContext","useLatinization","jsxDEV","_jsxDEV","FeedbackDisplay","message","type","language","_s","latinizedVersion","processedMessage","isLatinized","style","minHeight","margin","fileName","_jsxFileName","lineNumber","columnNumber","padding","borderRadius","textAlign","textPrefix","backgroundColor","color","borderColor","fontStyle","role","children","_c","$RefreshReg$"],"sources":["/workspaces/COSYlanguagesproject/src/components/Freestyle/FeedbackDisplay.js"],"sourcesContent":["import React from 'react';\r\nimport { useLatinizationContext } from '../../contexts/LatinizationContext';\r\nimport useLatinization from '../../hooks/useLatinization';\r\n\r\n/**\r\n * Displays feedback messages for exercises.\r\n * Props:\r\n * - message: string or React node - The feedback message.\r\n * - type: string (e.g., 'correct', 'incorrect', 'hint', 'info', 'error') - Determines styling.\r\n * - language: string (optional) - The language of the feedback message, for latinization.\r\n */\r\nconst FeedbackDisplay = ({ message, type, language }) => {\r\n  // Call the useLatinization hook unconditionally at the top level.\r\n  // Pass an empty string if message is not a string to prevent errors in the hook.\r\n  // The hook itself is expected to use LatinizationContext to determine if latinization is active.\r\n  const latinizedVersion = useLatinization(typeof message === 'string' ? message : '', language);\r\n\r\n  // Determine the actual message to display.\r\n  // If the original message was not a string, or no language was provided, use the original message.\r\n  // Otherwise, use the output from useLatinization (which respects the isLatinized context).\r\n  const processedMessage = (typeof message === 'string' && language)\r\n    ? latinizedVersion\r\n    : message;\r\n\r\n  // Get isLatinized from context, primarily for UI adjustments like font style,\r\n  // not for deciding whether to call useLatinization.\r\n  const { isLatinized } = useLatinizationContext();\r\n\r\n  if (!message) {\r\n    return <div style={{ minHeight: '24px', margin: '10px 0' }} aria-live=\"polite\"></div>; // Reserve space\r\n  }\r\n\r\n  let style = {\r\n    padding: '10px',\r\n    margin: '10px 0',\r\n    borderRadius: '4px',\r\n    textAlign: 'center',\r\n    minHeight: '24px', // Ensure it doesn't collapse when empty\r\n  };\r\n\r\n  let textPrefix = '';\r\n\r\n  switch (type) {\r\n    case 'correct':\r\n      style.backgroundColor = '#d4edda';\r\n      style.color = '#155724';\r\n      style.borderColor = '#c3e6cb';\r\n      textPrefix = '‚úÖ ';\r\n      break;\r\n    case 'incorrect':\r\n      style.backgroundColor = '#f8d7da';\r\n      style.color = '#721c24';\r\n      style.borderColor = '#f5c6cb';\r\n      textPrefix = '‚ùå ';\r\n      break;\r\n    case 'hint':\r\n      style.backgroundColor = '#fff3cd';\r\n      style.color = '#856404';\r\n      style.borderColor = '#ffeeba';\r\n      textPrefix = 'üí° ';\r\n      break;\r\n    case 'info':\r\n      style.backgroundColor = '#d1ecf1';\r\n      style.color = '#0c5460';\r\n      style.borderColor = '#bee5eb';\r\n      textPrefix = '‚ÑπÔ∏è ';\r\n      break;\r\n    case 'error':\r\n      style.backgroundColor = '#f8d7da'; // Same as incorrect\r\n      style.color = '#721c24';\r\n      style.borderColor = '#f5c6cb';\r\n      textPrefix = '‚ö†Ô∏è ';\r\n      break;\r\n    default: // Neutral / no specific type\r\n      style.backgroundColor = '#e9ecef';\r\n      style.color = '#495057';\r\n      style.borderColor = '#ced4da';\r\n  }\r\n  \r\n  // Apply visual indication for latinized text if necessary\r\n  if (isLatinized && typeof processedMessage === 'string' && typeof message === 'string' && processedMessage !== message) {\r\n    style.fontStyle = 'italic'; \r\n    // style.fontFamily = 'Arial, sans-serif'; // Example alternative font\r\n  }\r\n\r\n  return (\r\n    <div style={style} role=\"alert\" aria-live=\"assertive\">\r\n      {textPrefix}{processedMessage}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FeedbackDisplay;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}